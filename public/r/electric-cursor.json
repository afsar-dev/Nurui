{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "electric-cursor",
  "type": "registry:component",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/electric-cursor-demo.tsx",
      "content": "import ElectricCursor from \"@/components/nurui/electric-cursor\";\r\n\r\nconst ElectricCursorDemo = () => {\r\n  return (\r\n    <>\r\n      <p className=\"text-3xl text-center pt-4 text-[#3ca2fa] font-bold\">\r\n        Move cursor to see the effect.\r\n      </p>\r\n      <ElectricCursor />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ElectricCursorDemo;\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/electric-cursor.tsx",
      "content": "\"use client\";\r\nimport React, { useEffect, useRef } from \"react\";\r\n\r\n// Interface for Spark instance\r\ninterface ISpark {\r\n  x: number;\r\n  y: number;\r\n  length: number;\r\n  alpha: number;\r\n  update: () => void;\r\n  draw: () => void;\r\n}\r\n\r\nconst ElectricCursor: React.FC = () => {\r\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\r\n\r\n  useEffect(() => {\r\n    const sparks: ISpark[] = [];\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    if (!ctx) return;\r\n\r\n    canvas.width = window.innerWidth;\r\n    canvas.height = window.innerHeight;\r\n\r\n    class Spark implements ISpark {\r\n      x: number;\r\n      y: number;\r\n      length: number;\r\n      alpha: number;\r\n\r\n      constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.length = Math.random() * 10 + 5;\r\n        this.alpha = 1;\r\n      }\r\n\r\n      update(): void {\r\n        this.length -= 0.5;\r\n        this.alpha -= 0.03;\r\n      }\r\n\r\n      draw(): void {\r\n        if (!ctx) return;\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.x, this.y);\r\n        ctx.lineTo(\r\n          this.x + Math.random() * this.length,\r\n          this.y + Math.random() * this.length,\r\n        );\r\n        ctx.strokeStyle = `rgba(0, 200, 255, ${this.alpha})`;\r\n        ctx.lineWidth = 1;\r\n        ctx.stroke();\r\n      }\r\n    }\r\n\r\n    const animate = (): void => {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n      for (let i = sparks.length - 1; i >= 0; i--) {\r\n        sparks[i].update();\r\n        sparks[i].draw();\r\n        if (sparks[i].alpha <= 0) {\r\n          sparks.splice(i, 1);\r\n        }\r\n      }\r\n\r\n      requestAnimationFrame(animate);\r\n    };\r\n\r\n    const onMove = (e: MouseEvent): void => {\r\n      for (let i = 0; i < 3; i++) {\r\n        sparks.push(new Spark(e.clientX, e.clientY));\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"mousemove\", onMove);\r\n    animate();\r\n\r\n    return () => {\r\n      window.removeEventListener(\"mousemove\", onMove);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      className=\"fixed inset-0 w-full h-full pointer-events-none z-50\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ElectricCursor;\r\n",
      "type": "registry:component"
    }
  ]
}