{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "animated-pricing",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "tailwind-merge"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/animated-pricing-demo.tsx",
      "content": "import {\r\n  ModernPricingPage,\r\n  PricingCardProps,\r\n} from \"@/components/nurui/modern-pricing-page\";\r\n\r\nconst myPricingPlans: PricingCardProps[] = [\r\n  {\r\n    planName: \"Basic\",\r\n    description: \"Perfect for personal projects and hobbyists.\",\r\n    price: \"0\",\r\n    features: [\"1 User\", \"1GB Storage\", \"Community Forum\"],\r\n    buttonText: \"Get Started\",\r\n    buttonVariant: \"secondary\",\r\n  },\r\n  {\r\n    planName: \"Team\",\r\n    description: \"Collaborate with your team on multiple projects.\",\r\n    price: \"49\",\r\n    features: [\r\n      \"10 Users\",\r\n      \"100GB Storage\",\r\n      \"Email Support\",\r\n      \"Shared Workspaces\",\r\n    ],\r\n    buttonText: \"Choose Team Plan\",\r\n    isPopular: true,\r\n    buttonVariant: \"primary\",\r\n  },\r\n  {\r\n    planName: \"Agency\",\r\n    description: \"Manage all your clients under one roof.\",\r\n    price: \"149\",\r\n    features: [\r\n      \"Unlimited Users\",\r\n      \"1TB Storage\",\r\n      \"Dedicated Support\",\r\n      \"Client Invoicing\",\r\n    ],\r\n    buttonText: \"Contact Us\",\r\n    buttonVariant: \"primary\",\r\n  },\r\n];\r\n\r\nconst AnimatedPricingDemo = () => {\r\n  return (\r\n    <ModernPricingPage\r\n      title={\r\n        <>\r\n          Find the <span className=\"text-cyan-400\">Perfect Plan</span>\r\n        </>\r\n      }\r\n      subtitle=\"Start for free, then grow with us. Flexible plans for projects of all sizes.\"\r\n      plans={myPricingPlans}\r\n      showAnimatedBackground={true}\r\n    />\r\n  );\r\n};\r\n\r\nexport { AnimatedPricingDemo };\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/modern-pricing-page.tsx",
      "content": "\"use client\"\r\nimport type React from \"react\"\r\nimport { ShaderCanvas } from \"@/components/nurui/shader-canvas\"\r\nimport { RippleButton } from \"@/components/nurui/multi-type-ripple-buttons\"\r\n\r\nconst CheckIcon = ({ className }: { className?: string }) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"16\"\r\n    height=\"16\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"3\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    className={className}\r\n  >\r\n    <path d=\"M20 6 9 17l-5-5\" />\r\n  </svg>\r\n)\r\n\r\nexport interface PricingCardProps {\r\n  planName: string\r\n  description: string\r\n  price: string\r\n  features: string[]\r\n  buttonText: string\r\n  isPopular?: boolean\r\n  buttonVariant?: \"primary\" | \"secondary\"\r\n}\r\n\r\nexport const AnimatedPricingCard = ({\r\n  planName,\r\n  description,\r\n  price,\r\n  features,\r\n  buttonText,\r\n  isPopular = false,\r\n  buttonVariant = \"primary\",\r\n}: PricingCardProps) => {\r\n  // Prevent runtime errors if `features` is undefined\r\n  const safeFeatures = features ?? []\r\n  const cardClasses = `\r\n  backdrop-blur-[14px] bg-white/80 dark:bg-black/20 rounded-2xl shadow-xl \r\n  flex-1 max-w-sm w-full px-6 py-8 flex flex-col transition-all duration-300\r\n  border border-gray-200/50 dark:border-white/10\r\n  ${isPopular ? \"scale-105 relative ring-2 ring-cyan-400/50 shadow-2xl bg-white/90 dark:bg-black/30\" : \"hover:scale-[1.02]\"}\r\n`\r\n  const buttonClasses = `\r\n  mt-auto w-full py-2.5 rounded-xl font-semibold text-[14px] transition font-sans\r\n  ${\r\n    buttonVariant === \"primary\"\r\n      ? \"bg-cyan-400 hover:bg-cyan-300 text-foreground\"\r\n      : \"bg-black/10 hover:bg-black/20 text-foreground border border-black/20 dark:bg-white/10 dark:hover:bg-white/20 dark:text-white dark:border-white/20\"\r\n  }\r\n`\r\n\r\n  return (\r\n    <div className={cardClasses.trim()}>\r\n      {isPopular && (\r\n        <div className=\"absolute -top-4 right-4 px-3 py-1 text-[12px] font-semibold rounded-full bg-cyan-400 text-foreground dark:text-black\">\r\n          Most Popular\r\n        </div>\r\n      )}\r\n      <div className=\"mb-3\">\r\n        <h2 className=\"text-[48px] font-extralight tracking-[-0.03em] text-foreground font-display\">{planName}</h2>\r\n        <p className=\"text-[16px] text-foreground/70 mt-1 font-sans\">{description}</p>\r\n      </div>\r\n      <div className=\"my-6 flex items-baseline gap-2\">\r\n        <span className=\"text-[48px] font-extralight text-foreground font-display\">${price}</span>\r\n        <span className=\"text-[14px] text-foreground/70 font-sans\">/mo</span>\r\n      </div>\r\n      <div className=\"card-divider w-full mb-5 h-px bg-[linear-gradient(90deg,transparent,rgba(0,0,0,0.1)_50%,transparent)] dark:bg-[linear-gradient(90deg,transparent,rgba(255,255,255,0.09)_20%,rgba(255,255,255,0.22)_50%,rgba(255,255,255,0.09)_80%,transparent)]\"></div>\r\n      {/* use safeFeatures instead of features */}\r\n      <ul className=\"flex flex-col gap-2 text-[14px] text-foreground/90 mb-6 font-sans\">\r\n        {safeFeatures.map((feature, index) => (\r\n          <li key={index} className=\"flex items-center gap-2\">\r\n            <CheckIcon className=\"text-cyan-400 w-4 h-4\" /> {feature}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <RippleButton className={buttonClasses.trim()}>{buttonText}</RippleButton>\r\n    </div>\r\n  )\r\n}\r\n\r\ninterface ModernPricingPageProps {\r\n  title: React.ReactNode\r\n  subtitle: React.ReactNode\r\n  plans: PricingCardProps[]\r\n  showAnimatedBackground?: boolean\r\n}\r\n\r\nexport const ModernPricingPage = ({\r\n  title,\r\n  subtitle,\r\n  plans,\r\n  showAnimatedBackground = true,\r\n}: ModernPricingPageProps) => {\r\n  return (\r\n    <div className=\"py-10 w-full overflow-x-hidden\">\r\n      <main className=\"relative w-full flex flex-col items-center justify-center px-4 py-8\">\r\n        <div className=\"w-full max-w-5xl mx-auto text-center mb-14\">\r\n          <h1 className=\"text-[48px] md:text-[64px] font-extralight leading-tight tracking-[-0.03em] bg-clip-text text-transparent bg-gradient-to-r from-slate-900 via-cyan-500 to-blue-600 dark:from-white dark:via-cyan-300 dark:to-blue-400 font-display\">\r\n            {title}\r\n          </h1>\r\n          <p className=\"mt-3 text-[16px] md:text-[20px] text-foreground/80 max-w-2xl mx-auto font-sans\">{subtitle}</p>\r\n        </div>\r\n\r\n        <div className=\"relative w-full max-w-6xl\">\r\n          {showAnimatedBackground && (\r\n            <div className=\"absolute inset-0 z-0 pointer-events-none rounded-2xl overflow-hidden\">\r\n              <ShaderCanvas />\r\n            </div>\r\n          )}\r\n          <div className=\"relative z-10 flex flex-col lg:flex-row gap-6 justify-center items-stretch w-full px-4 py-10 max-w-5xl mx-auto\">\r\n            {plans.map((plan) => (\r\n              <AnimatedPricingCard key={plan.planName} {...plan} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  )\r\n}",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/shader-canvas.tsx",
      "content": "\"use client\";\r\nimport React, { useRef, useEffect } from \"react\";\r\n\r\nexport const ShaderCanvas = () => {\r\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\r\n  const glProgramRef = useRef<WebGLProgram | null>(null);\r\n  const glRef = useRef<WebGLRenderingContext | null>(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const gl = canvas.getContext(\"webgl\", { alpha: true });\r\n    if (!gl) {\r\n      console.error(\"WebGL not supported\");\r\n      return;\r\n    }\r\n    glRef.current = gl;\r\n\r\n    const vertexShaderSource = `\r\n      attribute vec2 aPosition;\r\n      void main() {\r\n        gl_Position = vec4(aPosition, 0.0, 1.0);\r\n      }\r\n    `;\r\n\r\n    const fragmentShaderSource = `\r\n      precision highp float;\r\n      uniform float iTime;\r\n      uniform vec2 iResolution;\r\n\r\n      mat2 rotate2d(float angle) {\r\n        float c = cos(angle), s = sin(angle);\r\n        return mat2(c, -s, s, c);\r\n      }\r\n\r\n      float variation(vec2 v1, vec2 v2, float strength, float speed) {\r\n        return sin(dot(normalize(v1), normalize(v2)) * strength + iTime * speed) / 100.0;\r\n      }\r\n\r\n      vec3 paintCircle(vec2 uv, vec2 center, float rad, float width) {\r\n        vec2 diff = center - uv;\r\n        float len = length(diff);\r\n        len += variation(diff, vec2(0., 1.), 5., 2.);\r\n        len -= variation(diff, vec2(1., 0.), 5., 2.);\r\n        float circle = smoothstep(rad - width, rad, len) - smoothstep(rad, rad + width, len);\r\n        return vec3(circle);\r\n      }\r\n\r\n      void main() {\r\n        vec2 uv = gl_FragCoord.xy / iResolution.xy;\r\n        uv.x *= 1.5;\r\n        uv.x -= 0.25;\r\n\r\n        float mask = 0.0;\r\n        float radius = 0.35;\r\n        vec2 center = vec2(0.5);\r\n\r\n        mask += paintCircle(uv, center, radius, 0.035).r;\r\n        mask += paintCircle(uv, center, radius - 0.018, 0.01).r;\r\n        mask += paintCircle(uv, center, radius + 0.018, 0.005).r;\r\n\r\n        vec2 v = rotate2d(iTime) * uv;\r\n        vec3 foregroundColor = vec3(v.x, v.y, 0.7 - v.y * v.x);\r\n\r\n        vec3 color = foregroundColor * mask;\r\n        gl_FragColor = vec4(color, mask); // Transparent outside glow\r\n      }\r\n    `;\r\n\r\n    const compileShader = (type: number, source: string) => {\r\n      const shader = gl.createShader(type);\r\n      if (!shader) throw new Error(\"Could not create shader\");\r\n      gl.shaderSource(shader, source);\r\n      gl.compileShader(shader);\r\n      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n        throw new Error(gl.getShaderInfoLog(shader) || \"Shader compilation error\");\r\n      }\r\n      return shader;\r\n    };\r\n\r\n    const program = gl.createProgram();\r\n    if (!program) throw new Error(\"Could not create program\");\r\n\r\n    const vertexShader = compileShader(gl.VERTEX_SHADER, vertexShaderSource);\r\n    const fragmentShader = compileShader(gl.FRAGMENT_SHADER, fragmentShaderSource);\r\n\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragmentShader);\r\n    gl.linkProgram(program);\r\n    gl.useProgram(program);\r\n    glProgramRef.current = program;\r\n\r\n    const buffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.bufferData(\r\n      gl.ARRAY_BUFFER,\r\n      new Float32Array([-1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1]),\r\n      gl.STATIC_DRAW\r\n    );\r\n\r\n    const aPosition = gl.getAttribLocation(program, \"aPosition\");\r\n    gl.enableVertexAttribArray(aPosition);\r\n    gl.vertexAttribPointer(aPosition, 2, gl.FLOAT, false, 0, 0);\r\n\r\n    const iTimeLoc = gl.getUniformLocation(program, \"iTime\");\r\n    const iResLoc = gl.getUniformLocation(program, \"iResolution\");\r\n\r\n    gl.clearColor(0, 0, 0, 0); // Fully transparent\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n\r\n    const render = (time: number) => {\r\n      gl.uniform1f(iTimeLoc, time * 0.001);\r\n      gl.uniform2f(iResLoc, canvas.width, canvas.height);\r\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\r\n      requestAnimationFrame(render);\r\n    };\r\n\r\n    const handleResize = () => {\r\n      canvas.width = canvas.offsetWidth;\r\n      canvas.height = canvas.offsetHeight;\r\n      gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n    };\r\n\r\n    handleResize();\r\n    window.addEventListener(\"resize\", handleResize);\r\n    requestAnimationFrame(render);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      className=\"w-full h-full block absolute top-0 left-0 z-0 pointer-events-none\"\r\n    />\r\n  );\r\n};\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/multi-type-ripple-buttons.tsx",
      "content": "import React, { ReactNode, useState, useMemo, MouseEvent, CSSProperties } from 'react';\r\n\r\ninterface RippleState {\r\n  key: number;\r\n  x: number;\r\n  y: number;\r\n  size: number;\r\n  color: string;\r\n}\r\n\r\ninterface RippleButtonProps {\r\n  children: ReactNode;\r\n  onClick?: (event: MouseEvent<HTMLButtonElement>) => void;\r\n  className?: string;\r\n  disabled?: boolean;\r\n  variant?: 'default' | 'hover' | 'ghost' | 'hoverborder';\r\n  rippleColor?: string; // User override for the JS click ripple color\r\n  rippleDuration?: number; // Duration for the JS click ripple (all variants)\r\n\r\n  // For 'hover' variant\r\n  hoverBaseColor?: string;\r\n  hoverRippleColor?: string;\r\n\r\n  // For 'hoverborder' variant\r\n  hoverBorderEffectColor?: string; // Color of the visual effect forming the border\r\n  hoverBorderEffectThickness?: string; // Thickness of the border effect (e.g., \"0.3em\", \"2px\")\r\n}\r\n\r\nconst hexToRgba = (hex: string, alpha: number): string => {\r\n  let hexValue = hex.startsWith('#') ? hex.slice(1) : hex;\r\n  if (hexValue.length === 3) {\r\n    hexValue = hexValue.split('').map(char => char + char).join('');\r\n  }\r\n  const r = parseInt(hexValue.slice(0, 2), 16);\r\n  const g = parseInt(hexValue.slice(2, 4), 16);\r\n  const b = parseInt(hexValue.slice(4, 6), 16);\r\n  return `rgba(${r}, ${g}, ${b}, ${alpha})`;\r\n};\r\n\r\nconst GRID_HOVER_NUM_COLS = 36;\r\nconst GRID_HOVER_NUM_ROWS = 12;\r\nconst GRID_HOVER_TOTAL_CELLS = GRID_HOVER_NUM_COLS * GRID_HOVER_NUM_ROWS;\r\nconst GRID_HOVER_RIPPLE_EFFECT_SIZE = \"18.973665961em\";\r\n\r\nconst JS_RIPPLE_KEYFRAMES = `\r\n  @keyframes js-ripple-animation {\r\n    0% { transform: scale(0); opacity: 1; }\r\n    100% { transform: scale(1); opacity: 0; }\r\n  }\r\n  .animate-js-ripple-effect {\r\n    animation: js-ripple-animation var(--ripple-duration) ease-out forwards;\r\n  }\r\n`;\r\n\r\nconst RippleButton: React.FC<RippleButtonProps> = ({\r\n  children,\r\n  onClick,\r\n  className = '',\r\n  disabled = false,\r\n  variant = 'default',\r\n  rippleColor: userProvidedRippleColor,\r\n  rippleDuration = 600,\r\n  hoverBaseColor = '#6996e2',\r\n  hoverRippleColor: customHoverRippleColor,\r\n  hoverBorderEffectColor = '#6996e277',\r\n  hoverBorderEffectThickness = '0.3em',\r\n}) => {\r\n  const [jsRipples, setJsRipples] = useState<RippleState[]>([]);\r\n\r\n  const determinedJsRippleColor = useMemo(() => {\r\n    if (userProvidedRippleColor) {\r\n      return userProvidedRippleColor;\r\n    }\r\n    return 'var(--button-ripple-color, rgba(0, 0, 0, 0.1))';\r\n  }, [userProvidedRippleColor]);\r\n\r\n  const dynamicGridHoverStyles = useMemo(() => {\r\n    let nthChildHoverRules = '';\r\n    const cellDim = 0.25;\r\n    const initialTopOffset = 0.125;\r\n    const initialLeftOffset = 0.1875;\r\n\r\n    // Standardized hover transition duration for width and height\r\n    const hoverEffectDuration = '0.9s'; // CHANGED: Standardized to 0.9s\r\n\r\n    for (let r = 0; r < GRID_HOVER_NUM_ROWS; r++) {\r\n      for (let c = 0; c < GRID_HOVER_NUM_COLS; c++) {\r\n        const childIndex = r * GRID_HOVER_NUM_COLS + c + 1;\r\n        const topPos = initialTopOffset + r * cellDim;\r\n        const leftPos = initialLeftOffset + c * cellDim;\r\n\r\n        if (variant === 'hover') {\r\n          nthChildHoverRules += `\r\n            .hover-variant-grid-cell:nth-child(${childIndex}):hover ~ .hover-variant-visual-ripple {\r\n              top: ${topPos}em; left: ${leftPos}em;\r\n              transition: width ${hoverEffectDuration} ease, height ${hoverEffectDuration} ease, top 0s linear, left 0s linear;\r\n            }`;\r\n        } else if (variant === 'hoverborder') {\r\n          nthChildHoverRules += `\r\n            .hoverborder-variant-grid-cell:nth-child(${childIndex}):hover ~ .hoverborder-variant-visual-ripple {\r\n              top: ${topPos}em; left: ${leftPos}em;\r\n              transition: width ${hoverEffectDuration} ease-out, height ${hoverEffectDuration} ease-out, top 0s linear, left 0s linear;\r\n            }`; // Using ease-out for hoverborder as it was before, just changed duration\r\n        }\r\n      }\r\n    }\r\n\r\n    if (variant === 'hover') {\r\n      const actualHoverRippleColor = customHoverRippleColor\r\n        ? customHoverRippleColor\r\n        : hexToRgba(hoverBaseColor, 0.466);\r\n      return `\r\n        .hover-variant-visual-ripple {\r\n          background-color: ${actualHoverRippleColor};\r\n          transition: width ${hoverEffectDuration} ease, height ${hoverEffectDuration} ease, top 99999s linear, left 99999s linear;\r\n        }\r\n        .hover-variant-grid-cell:hover ~ .hover-variant-visual-ripple {\r\n          width: ${GRID_HOVER_RIPPLE_EFFECT_SIZE}; height: ${GRID_HOVER_RIPPLE_EFFECT_SIZE};\r\n        }\r\n        ${nthChildHoverRules}\r\n      `;\r\n    } else if (variant === 'hoverborder') {\r\n      return `\r\n        .hoverborder-variant-ripple-container {\r\n          padding: ${hoverBorderEffectThickness};\r\n          mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\r\n          mask-composite: exclude;\r\n          -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\r\n          -webkit-mask-composite: xor;\r\n        }\r\n        .hoverborder-variant-visual-ripple {\r\n          background-color: ${hoverBorderEffectColor};\r\n          /* Ensure the base transition also uses the standardized duration for width/height */\r\n          transition: width ${hoverEffectDuration} ease-out, height ${hoverEffectDuration} ease-out, top 99999s linear, left 9999s linear;\r\n        }\r\n        .hoverborder-variant-grid-cell:hover ~ .hoverborder-variant-visual-ripple {\r\n          width: ${GRID_HOVER_RIPPLE_EFFECT_SIZE}; height: ${GRID_HOVER_RIPPLE_EFFECT_SIZE};\r\n        }\r\n        ${nthChildHoverRules}\r\n      `;\r\n    }\r\n    return '';\r\n  }, [variant, hoverBaseColor, customHoverRippleColor, hoverBorderEffectColor, hoverBorderEffectThickness]);\r\n\r\n  const createJsRipple = (event: MouseEvent<HTMLButtonElement>) => {\r\n    const button = event.currentTarget;\r\n    const rect = button.getBoundingClientRect();\r\n    const size = Math.max(rect.width, rect.height) * 2;\r\n    const x = event.clientX - rect.left - size / 2;\r\n    const y = event.clientY - rect.top - size / 2;\r\n    const newRipple: RippleState = { key: Date.now(), x, y, size, color: determinedJsRippleColor };\r\n    setJsRipples(prev => [...prev, newRipple]);\r\n    setTimeout(() => {\r\n      setJsRipples(currentRipples => currentRipples.filter(r => r.key !== newRipple.key));\r\n    }, rippleDuration);\r\n  };\r\n\r\n  const handleButtonClick = (event: MouseEvent<HTMLButtonElement>) => {\r\n    if (!disabled) {\r\n      createJsRipple(event);\r\n      if (onClick) onClick(event);\r\n    }\r\n  };\r\n\r\n  const jsRippleElements = (\r\n    <div className=\"absolute inset-0 pointer-events-none z-[5]\">\r\n      {jsRipples.map(ripple => (\r\n        <span\r\n          key={ripple.key}\r\n          className=\"absolute rounded-full animate-js-ripple-effect\"\r\n          style={{\r\n            left: ripple.x, top: ripple.y, width: ripple.size, height: ripple.size,\r\n            backgroundColor: ripple.color,\r\n            ['--ripple-duration' as string]: `${rippleDuration}ms`,\r\n          } as CSSProperties}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n\r\n  if (variant === 'hover') {\r\n    const hoverButtonFinalClassName = [\r\n      \"relative\", \"rounded-lg\", \"text-lg\", \"px-4\", \"py-2\",\r\n      \"border-none\", \"bg-transparent\", \"isolate\", \"overflow-hidden\", \"cursor-pointer\",\r\n      disabled ? \"opacity-50 cursor-not-allowed pointer-events-none\" : \"\",\r\n      className,\r\n    ].filter(Boolean).join(\" \");\r\n    return (\r\n      <>\r\n        <style dangerouslySetInnerHTML={{ __html: JS_RIPPLE_KEYFRAMES }} />\r\n        <style dangerouslySetInnerHTML={{ __html: dynamicGridHoverStyles }} />\r\n        <button className={hoverButtonFinalClassName} onClick={handleButtonClick} disabled={disabled}>\r\n          <span className=\"relative z-[10] pointer-events-none\">{children}</span>\r\n          {jsRippleElements}\r\n          <div\r\n            className=\"hover-variant-grid-container absolute inset-0 grid overflow-hidden pointer-events-none z-[0]\"\r\n            style={{ gridTemplateColumns: `repeat(${GRID_HOVER_NUM_COLS}, 0.25em)` }}\r\n          >\r\n            {Array.from({ length: GRID_HOVER_TOTAL_CELLS }, (_, index) => (\r\n              <span key={index} className=\"hover-variant-grid-cell relative flex justify-center items-center pointer-events-auto\" />\r\n            ))}\r\n            <div className=\"hover-variant-visual-ripple pointer-events-none absolute w-0 h-0 rounded-full transform -translate-x-1/2 -translate-y-1/2 top-0 left-0 z-[-1]\" />\r\n          </div>\r\n        </button>\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (variant === 'hoverborder') {\r\n    const hoverBorderButtonFinalClassName = [\r\n      \"relative\", \"rounded-lg\", \"overflow-hidden\", \"text-lg\", \"px-4\", \"py-2\",\r\n      \"border-none\", \"bg-transparent\", \"isolate\", \"cursor-pointer\",\r\n      disabled ? \"opacity-50 cursor-not-allowed pointer-events-none\" : \"\",\r\n      className,\r\n    ].filter(Boolean).join(\" \");\r\n\r\n    return (\r\n      <>\r\n        <style dangerouslySetInnerHTML={{ __html: JS_RIPPLE_KEYFRAMES }} />\r\n        <style dangerouslySetInnerHTML={{ __html: dynamicGridHoverStyles }} />\r\n        <button\r\n          className={hoverBorderButtonFinalClassName}\r\n          onClick={handleButtonClick}\r\n          disabled={disabled}\r\n        >\r\n          <span className=\"relative z-[10] pointer-events-none\">{children}</span>\r\n          {jsRippleElements}\r\n          <div\r\n            className=\"hoverborder-variant-ripple-container absolute inset-0 grid rounded-[0.8em] overflow-hidden pointer-events-none z-[0]\"\r\n            style={{ gridTemplateColumns: `repeat(${GRID_HOVER_NUM_COLS}, 0.25em)` }}\r\n          >\r\n            {Array.from({ length: GRID_HOVER_TOTAL_CELLS }, (_, index) => (\r\n              <span\r\n                key={index}\r\n                className=\"hoverborder-variant-grid-cell relative flex justify-center items-center pointer-events-auto\"\r\n              />\r\n            ))}\r\n            <div className=\"hoverborder-variant-visual-ripple pointer-events-none absolute w-0 h-0 rounded-full transform -translate-x-1/2 -translate-y-1/2 top-0 left-0 z-[-1]\" />\r\n          </div>\r\n        </button>\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (variant === 'ghost') {\r\n    const ghostButtonFinalClassName = [\r\n      \"relative\", \"border-none\", \"bg-transparent\", \"isolate\", \"overflow-hidden\", \"cursor-pointer\",\r\n      \"px-4\", \"py-2\", \"rounded-lg\", \"text-lg\",\r\n      disabled ? \"opacity-50 cursor-not-allowed pointer-events-none\" : \"\",\r\n      className,\r\n    ].filter(Boolean).join(\" \");\r\n    return (\r\n      <>\r\n        <style dangerouslySetInnerHTML={{ __html: JS_RIPPLE_KEYFRAMES }} />\r\n        <button className={ghostButtonFinalClassName} onClick={handleButtonClick} disabled={disabled}>\r\n          <span className=\"relative z-10 pointer-events-none\">{children}</span>\r\n          {jsRippleElements}\r\n        </button>\r\n      </>\r\n    );\r\n  }\r\n\r\n  // Default variant\r\n  const baseClasses = \"relative border-none overflow-hidden isolate transition-all duration-200 cursor-pointer px-4 py-2 bg-blue-600 hover:opacity-90 text-white rounded-lg\";\r\n  const disabledClasses = disabled ? \"opacity-50 cursor-not-allowed\" : \"\";\r\n  const buttonClasses = `${baseClasses} ${disabledClasses} ${className}`;\r\n  return (\r\n    <>\r\n      <style dangerouslySetInnerHTML={{ __html: JS_RIPPLE_KEYFRAMES }} />\r\n      <button className={buttonClasses} onClick={handleButtonClick} disabled={disabled}>\r\n        <span className=\"relative z-[1] pointer-events-none\">{children}</span>\r\n        {jsRippleElements}\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport { RippleButton };",
      "type": "registry:component"
    }
  ]
}