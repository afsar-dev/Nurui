{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "animated-pricing",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "tailwind-merge"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/animated-pricing-demo.tsx",
      "content": "import {\n  ModernPricingPage,\n  PricingCardProps,\n} from \"@/components/nurui/modern-pricing-page\";\n\nconst myPricingPlans: PricingCardProps[] = [\n  {\n    planName: \"Basic\",\n    description: \"Perfect for personal projects and hobbyists.\",\n    price: \"0\",\n    features: [\"1 User\", \"1GB Storage\", \"Community Forum\"],\n    buttonText: \"Get Started\",\n    buttonVariant: \"secondary\",\n  },\n  {\n    planName: \"Team\",\n    description: \"Collaborate with your team on multiple projects.\",\n    price: \"49\",\n    features: [\n      \"10 Users\",\n      \"100GB Storage\",\n      \"Email Support\",\n      \"Shared Workspaces\",\n    ],\n    buttonText: \"Choose Team Plan\",\n    isPopular: true,\n    buttonVariant: \"primary\",\n  },\n  {\n    planName: \"Agency\",\n    description: \"Manage all your clients under one roof.\",\n    price: \"149\",\n    features: [\n      \"Unlimited Users\",\n      \"1TB Storage\",\n      \"Dedicated Support\",\n      \"Client Invoicing\",\n    ],\n    buttonText: \"Contact Us\",\n    buttonVariant: \"primary\",\n  },\n];\n\nconst AnimatedPricingDemo = () => {\n  return (\n    <ModernPricingPage\n      title={\n        <>\n          Find the <span className=\"text-cyan-400\">Perfect Plan</span>\n        </>\n      }\n      subtitle=\"Start for free, then grow with us. Flexible plans for projects of all sizes.\"\n      plans={myPricingPlans}\n      showAnimatedBackground={true}\n    />\n  );\n};\n\nexport { AnimatedPricingDemo };\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/modern-pricing-page.tsx",
      "content": "\"use client\"\nimport type React from \"react\"\nimport { ShaderCanvas } from \"@/components/nurui/shader-canvas\"\nimport { RippleButton } from \"@/components/nurui/multi-type-ripple-buttons\"\n\nconst CheckIcon = ({ className }: { className?: string }) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"3\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    className={className}\n  >\n    <path d=\"M20 6 9 17l-5-5\" />\n  </svg>\n)\n\nexport interface PricingCardProps {\n  planName: string\n  description: string\n  price: string\n  features: string[]\n  buttonText: string\n  isPopular?: boolean\n  buttonVariant?: \"primary\" | \"secondary\"\n}\n\nexport const AnimatedPricingCard = ({\n  planName,\n  description,\n  price,\n  features,\n  buttonText,\n  isPopular = false,\n  buttonVariant = \"primary\",\n}: PricingCardProps) => {\n  // Prevent runtime errors if `features` is undefined\n  const safeFeatures = features ?? []\n  const cardClasses = `\n  backdrop-blur-[14px] bg-white/80 dark:bg-black/20 rounded-2xl shadow-xl \n  flex-1 max-w-sm w-full px-6 py-8 flex flex-col transition-all duration-300\n  border border-gray-200/50 dark:border-white/10\n  ${isPopular ? \"scale-105 relative ring-2 ring-cyan-400/50 shadow-2xl bg-white/90 dark:bg-black/30\" : \"hover:scale-[1.02]\"}\n`\n  const buttonClasses = `\n  mt-auto w-full py-2.5 rounded-xl font-semibold text-[14px] transition font-sans\n  ${\n    buttonVariant === \"primary\"\n      ? \"bg-cyan-400 hover:bg-cyan-300 text-foreground\"\n      : \"bg-black/10 hover:bg-black/20 text-foreground border border-black/20 dark:bg-white/10 dark:hover:bg-white/20 dark:text-white dark:border-white/20\"\n  }\n`\n\n  return (\n    <div className={cardClasses.trim()}>\n      {isPopular && (\n        <div className=\"absolute -top-4 right-4 px-3 py-1 text-[12px] font-semibold rounded-full bg-cyan-400 text-foreground dark:text-black\">\n          Most Popular\n        </div>\n      )}\n      <div className=\"mb-3\">\n        <h2 className=\"text-[48px] font-extralight tracking-[-0.03em] text-foreground font-display\">{planName}</h2>\n        <p className=\"text-[16px] text-foreground/70 mt-1 font-sans\">{description}</p>\n      </div>\n      <div className=\"my-6 flex items-baseline gap-2\">\n        <span className=\"text-[48px] font-extralight text-foreground font-display\">${price}</span>\n        <span className=\"text-[14px] text-foreground/70 font-sans\">/mo</span>\n      </div>\n      <div className=\"card-divider w-full mb-5 h-px bg-[linear-gradient(90deg,transparent,rgba(0,0,0,0.1)_50%,transparent)] dark:bg-[linear-gradient(90deg,transparent,rgba(255,255,255,0.09)_20%,rgba(255,255,255,0.22)_50%,rgba(255,255,255,0.09)_80%,transparent)]\"></div>\n      {/* use safeFeatures instead of features */}\n      <ul className=\"flex flex-col gap-2 text-[14px] text-foreground/90 mb-6 font-sans\">\n        {safeFeatures.map((feature, index) => (\n          <li key={index} className=\"flex items-center gap-2\">\n            <CheckIcon className=\"text-cyan-400 w-4 h-4\" /> {feature}\n          </li>\n        ))}\n      </ul>\n      <RippleButton className={buttonClasses.trim()}>{buttonText}</RippleButton>\n    </div>\n  )\n}\n\ninterface ModernPricingPageProps {\n  title: React.ReactNode\n  subtitle: React.ReactNode\n  plans: PricingCardProps[]\n  showAnimatedBackground?: boolean\n}\n\nexport const ModernPricingPage = ({\n  title,\n  subtitle,\n  plans,\n  showAnimatedBackground = true,\n}: ModernPricingPageProps) => {\n  return (\n    <div className=\"py-10 w-full overflow-x-hidden\">\n      <main className=\"relative w-full flex flex-col items-center justify-center px-4 py-8\">\n        <div className=\"w-full max-w-5xl mx-auto text-center mb-14\">\n          <h1 className=\"text-[48px] md:text-[64px] font-extralight leading-tight tracking-[-0.03em] bg-clip-text text-transparent bg-gradient-to-r from-slate-900 via-cyan-500 to-blue-600 dark:from-white dark:via-cyan-300 dark:to-blue-400 font-display\">\n            {title}\n          </h1>\n          <p className=\"mt-3 text-[16px] md:text-[20px] text-foreground/80 max-w-2xl mx-auto font-sans\">{subtitle}</p>\n        </div>\n\n        <div className=\"relative w-full max-w-6xl\">\n          {showAnimatedBackground && (\n            <div className=\"absolute inset-0 z-0 pointer-events-none rounded-2xl overflow-hidden\">\n              <ShaderCanvas />\n            </div>\n          )}\n          <div className=\"relative z-10 flex flex-col lg:flex-row gap-6 justify-center items-stretch w-full px-4 py-10 max-w-5xl mx-auto\">\n            {plans.map((plan) => (\n              <AnimatedPricingCard key={plan.planName} {...plan} />\n            ))}\n          </div>\n        </div>\n      </main>\n    </div>\n  )\n}",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/shader-canvas.tsx",
      "content": "\"use client\";\nimport React, { useRef, useEffect } from \"react\";\n\nexport const ShaderCanvas = () => {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const glProgramRef = useRef<WebGLProgram | null>(null);\n  const glRef = useRef<WebGLRenderingContext | null>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const gl = canvas.getContext(\"webgl\", { alpha: true });\n    if (!gl) {\n      console.error(\"WebGL not supported\");\n      return;\n    }\n    glRef.current = gl;\n\n    const vertexShaderSource = `\n      attribute vec2 aPosition;\n      void main() {\n        gl_Position = vec4(aPosition, 0.0, 1.0);\n      }\n    `;\n\n    const fragmentShaderSource = `\n      precision highp float;\n      uniform float iTime;\n      uniform vec2 iResolution;\n\n      mat2 rotate2d(float angle) {\n        float c = cos(angle), s = sin(angle);\n        return mat2(c, -s, s, c);\n      }\n\n      float variation(vec2 v1, vec2 v2, float strength, float speed) {\n        return sin(dot(normalize(v1), normalize(v2)) * strength + iTime * speed) / 100.0;\n      }\n\n      vec3 paintCircle(vec2 uv, vec2 center, float rad, float width) {\n        vec2 diff = center - uv;\n        float len = length(diff);\n        len += variation(diff, vec2(0., 1.), 5., 2.);\n        len -= variation(diff, vec2(1., 0.), 5., 2.);\n        float circle = smoothstep(rad - width, rad, len) - smoothstep(rad, rad + width, len);\n        return vec3(circle);\n      }\n\n      void main() {\n        vec2 uv = gl_FragCoord.xy / iResolution.xy;\n        uv.x *= 1.5;\n        uv.x -= 0.25;\n\n        float mask = 0.0;\n        float radius = 0.35;\n        vec2 center = vec2(0.5);\n\n        mask += paintCircle(uv, center, radius, 0.035).r;\n        mask += paintCircle(uv, center, radius - 0.018, 0.01).r;\n        mask += paintCircle(uv, center, radius + 0.018, 0.005).r;\n\n        vec2 v = rotate2d(iTime) * uv;\n        vec3 foregroundColor = vec3(v.x, v.y, 0.7 - v.y * v.x);\n\n        vec3 color = foregroundColor * mask;\n        gl_FragColor = vec4(color, mask); // Transparent outside glow\n      }\n    `;\n\n    const compileShader = (type: number, source: string) => {\n      const shader = gl.createShader(type);\n      if (!shader) throw new Error(\"Could not create shader\");\n      gl.shaderSource(shader, source);\n      gl.compileShader(shader);\n      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        throw new Error(gl.getShaderInfoLog(shader) || \"Shader compilation error\");\n      }\n      return shader;\n    };\n\n    const program = gl.createProgram();\n    if (!program) throw new Error(\"Could not create program\");\n\n    const vertexShader = compileShader(gl.VERTEX_SHADER, vertexShaderSource);\n    const fragmentShader = compileShader(gl.FRAGMENT_SHADER, fragmentShaderSource);\n\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    gl.useProgram(program);\n    glProgramRef.current = program;\n\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(\n      gl.ARRAY_BUFFER,\n      new Float32Array([-1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1]),\n      gl.STATIC_DRAW\n    );\n\n    const aPosition = gl.getAttribLocation(program, \"aPosition\");\n    gl.enableVertexAttribArray(aPosition);\n    gl.vertexAttribPointer(aPosition, 2, gl.FLOAT, false, 0, 0);\n\n    const iTimeLoc = gl.getUniformLocation(program, \"iTime\");\n    const iResLoc = gl.getUniformLocation(program, \"iResolution\");\n\n    gl.clearColor(0, 0, 0, 0); // Fully transparent\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    const render = (time: number) => {\n      gl.uniform1f(iTimeLoc, time * 0.001);\n      gl.uniform2f(iResLoc, canvas.width, canvas.height);\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\n      requestAnimationFrame(render);\n    };\n\n    const handleResize = () => {\n      canvas.width = canvas.offsetWidth;\n      canvas.height = canvas.offsetHeight;\n      gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    };\n\n    handleResize();\n    window.addEventListener(\"resize\", handleResize);\n    requestAnimationFrame(render);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className=\"w-full h-full block absolute top-0 left-0 z-0 pointer-events-none\"\n    />\n  );\n};\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/multi-type-ripple-buttons.tsx",
      "content": "import React, { ReactNode, useState, useMemo, MouseEvent, CSSProperties } from 'react';\n\ninterface RippleState {\n  key: number;\n  x: number;\n  y: number;\n  size: number;\n  color: string;\n}\n\ninterface RippleButtonProps {\n  children: ReactNode;\n  onClick?: (event: MouseEvent<HTMLButtonElement>) => void;\n  className?: string;\n  disabled?: boolean;\n  variant?: 'default' | 'hover' | 'ghost' | 'hoverborder';\n  rippleColor?: string; // User override for the JS click ripple color\n  rippleDuration?: number; // Duration for the JS click ripple (all variants)\n\n  // For 'hover' variant\n  hoverBaseColor?: string;\n  hoverRippleColor?: string;\n\n  // For 'hoverborder' variant\n  hoverBorderEffectColor?: string; // Color of the visual effect forming the border\n  hoverBorderEffectThickness?: string; // Thickness of the border effect (e.g., \"0.3em\", \"2px\")\n}\n\nconst hexToRgba = (hex: string, alpha: number): string => {\n  let hexValue = hex.startsWith('#') ? hex.slice(1) : hex;\n  if (hexValue.length === 3) {\n    hexValue = hexValue.split('').map(char => char + char).join('');\n  }\n  const r = parseInt(hexValue.slice(0, 2), 16);\n  const g = parseInt(hexValue.slice(2, 4), 16);\n  const b = parseInt(hexValue.slice(4, 6), 16);\n  return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n};\n\nconst GRID_HOVER_NUM_COLS = 36;\nconst GRID_HOVER_NUM_ROWS = 12;\nconst GRID_HOVER_TOTAL_CELLS = GRID_HOVER_NUM_COLS * GRID_HOVER_NUM_ROWS;\nconst GRID_HOVER_RIPPLE_EFFECT_SIZE = \"18.973665961em\";\n\nconst JS_RIPPLE_KEYFRAMES = `\n  @keyframes js-ripple-animation {\n    0% { transform: scale(0); opacity: 1; }\n    100% { transform: scale(1); opacity: 0; }\n  }\n  .animate-js-ripple-effect {\n    animation: js-ripple-animation var(--ripple-duration) ease-out forwards;\n  }\n`;\n\nconst RippleButton: React.FC<RippleButtonProps> = ({\n  children,\n  onClick,\n  className = '',\n  disabled = false,\n  variant = 'default',\n  rippleColor: userProvidedRippleColor,\n  rippleDuration = 600,\n  hoverBaseColor = '#6996e2',\n  hoverRippleColor: customHoverRippleColor,\n  hoverBorderEffectColor = '#6996e277',\n  hoverBorderEffectThickness = '0.3em',\n}) => {\n  const [jsRipples, setJsRipples] = useState<RippleState[]>([]);\n\n  const determinedJsRippleColor = useMemo(() => {\n    if (userProvidedRippleColor) {\n      return userProvidedRippleColor;\n    }\n    return 'var(--button-ripple-color, rgba(0, 0, 0, 0.1))';\n  }, [userProvidedRippleColor]);\n\n  const dynamicGridHoverStyles = useMemo(() => {\n    let nthChildHoverRules = '';\n    const cellDim = 0.25;\n    const initialTopOffset = 0.125;\n    const initialLeftOffset = 0.1875;\n\n    // Standardized hover transition duration for width and height\n    const hoverEffectDuration = '0.9s'; // CHANGED: Standardized to 0.9s\n\n    for (let r = 0; r < GRID_HOVER_NUM_ROWS; r++) {\n      for (let c = 0; c < GRID_HOVER_NUM_COLS; c++) {\n        const childIndex = r * GRID_HOVER_NUM_COLS + c + 1;\n        const topPos = initialTopOffset + r * cellDim;\n        const leftPos = initialLeftOffset + c * cellDim;\n\n        if (variant === 'hover') {\n          nthChildHoverRules += `\n            .hover-variant-grid-cell:nth-child(${childIndex}):hover ~ .hover-variant-visual-ripple {\n              top: ${topPos}em; left: ${leftPos}em;\n              transition: width ${hoverEffectDuration} ease, height ${hoverEffectDuration} ease, top 0s linear, left 0s linear;\n            }`;\n        } else if (variant === 'hoverborder') {\n          nthChildHoverRules += `\n            .hoverborder-variant-grid-cell:nth-child(${childIndex}):hover ~ .hoverborder-variant-visual-ripple {\n              top: ${topPos}em; left: ${leftPos}em;\n              transition: width ${hoverEffectDuration} ease-out, height ${hoverEffectDuration} ease-out, top 0s linear, left 0s linear;\n            }`; // Using ease-out for hoverborder as it was before, just changed duration\n        }\n      }\n    }\n\n    if (variant === 'hover') {\n      const actualHoverRippleColor = customHoverRippleColor\n        ? customHoverRippleColor\n        : hexToRgba(hoverBaseColor, 0.466);\n      return `\n        .hover-variant-visual-ripple {\n          background-color: ${actualHoverRippleColor};\n          transition: width ${hoverEffectDuration} ease, height ${hoverEffectDuration} ease, top 99999s linear, left 99999s linear;\n        }\n        .hover-variant-grid-cell:hover ~ .hover-variant-visual-ripple {\n          width: ${GRID_HOVER_RIPPLE_EFFECT_SIZE}; height: ${GRID_HOVER_RIPPLE_EFFECT_SIZE};\n        }\n        ${nthChildHoverRules}\n      `;\n    } else if (variant === 'hoverborder') {\n      return `\n        .hoverborder-variant-ripple-container {\n          padding: ${hoverBorderEffectThickness};\n          mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n          mask-composite: exclude;\n          -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n          -webkit-mask-composite: xor;\n        }\n        .hoverborder-variant-visual-ripple {\n          background-color: ${hoverBorderEffectColor};\n          /* Ensure the base transition also uses the standardized duration for width/height */\n          transition: width ${hoverEffectDuration} ease-out, height ${hoverEffectDuration} ease-out, top 99999s linear, left 9999s linear;\n        }\n        .hoverborder-variant-grid-cell:hover ~ .hoverborder-variant-visual-ripple {\n          width: ${GRID_HOVER_RIPPLE_EFFECT_SIZE}; height: ${GRID_HOVER_RIPPLE_EFFECT_SIZE};\n        }\n        ${nthChildHoverRules}\n      `;\n    }\n    return '';\n  }, [variant, hoverBaseColor, customHoverRippleColor, hoverBorderEffectColor, hoverBorderEffectThickness]);\n\n  const createJsRipple = (event: MouseEvent<HTMLButtonElement>) => {\n    const button = event.currentTarget;\n    const rect = button.getBoundingClientRect();\n    const size = Math.max(rect.width, rect.height) * 2;\n    const x = event.clientX - rect.left - size / 2;\n    const y = event.clientY - rect.top - size / 2;\n    const newRipple: RippleState = { key: Date.now(), x, y, size, color: determinedJsRippleColor };\n    setJsRipples(prev => [...prev, newRipple]);\n    setTimeout(() => {\n      setJsRipples(currentRipples => currentRipples.filter(r => r.key !== newRipple.key));\n    }, rippleDuration);\n  };\n\n  const handleButtonClick = (event: MouseEvent<HTMLButtonElement>) => {\n    if (!disabled) {\n      createJsRipple(event);\n      if (onClick) onClick(event);\n    }\n  };\n\n  const jsRippleElements = (\n    <div className=\"absolute inset-0 pointer-events-none z-[5]\">\n      {jsRipples.map(ripple => (\n        <span\n          key={ripple.key}\n          className=\"absolute rounded-full animate-js-ripple-effect\"\n          style={{\n            left: ripple.x, top: ripple.y, width: ripple.size, height: ripple.size,\n            backgroundColor: ripple.color,\n            ['--ripple-duration' as string]: `${rippleDuration}ms`,\n          } as CSSProperties}\n        />\n      ))}\n    </div>\n  );\n\n  if (variant === 'hover') {\n    const hoverButtonFinalClassName = [\n      \"relative\", \"rounded-lg\", \"text-lg\", \"px-4\", \"py-2\",\n      \"border-none\", \"bg-transparent\", \"isolate\", \"overflow-hidden\", \"cursor-pointer\",\n      disabled ? \"opacity-50 cursor-not-allowed pointer-events-none\" : \"\",\n      className,\n    ].filter(Boolean).join(\" \");\n    return (\n      <>\n        <style dangerouslySetInnerHTML={{ __html: JS_RIPPLE_KEYFRAMES }} />\n        <style dangerouslySetInnerHTML={{ __html: dynamicGridHoverStyles }} />\n        <button className={hoverButtonFinalClassName} onClick={handleButtonClick} disabled={disabled}>\n          <span className=\"relative z-[10] pointer-events-none\">{children}</span>\n          {jsRippleElements}\n          <div\n            className=\"hover-variant-grid-container absolute inset-0 grid overflow-hidden pointer-events-none z-[0]\"\n            style={{ gridTemplateColumns: `repeat(${GRID_HOVER_NUM_COLS}, 0.25em)` }}\n          >\n            {Array.from({ length: GRID_HOVER_TOTAL_CELLS }, (_, index) => (\n              <span key={index} className=\"hover-variant-grid-cell relative flex justify-center items-center pointer-events-auto\" />\n            ))}\n            <div className=\"hover-variant-visual-ripple pointer-events-none absolute w-0 h-0 rounded-full transform -translate-x-1/2 -translate-y-1/2 top-0 left-0 z-[-1]\" />\n          </div>\n        </button>\n      </>\n    );\n  }\n\n  if (variant === 'hoverborder') {\n    const hoverBorderButtonFinalClassName = [\n      \"relative\", \"rounded-lg\", \"overflow-hidden\", \"text-lg\", \"px-4\", \"py-2\",\n      \"border-none\", \"bg-transparent\", \"isolate\", \"cursor-pointer\",\n      disabled ? \"opacity-50 cursor-not-allowed pointer-events-none\" : \"\",\n      className,\n    ].filter(Boolean).join(\" \");\n\n    return (\n      <>\n        <style dangerouslySetInnerHTML={{ __html: JS_RIPPLE_KEYFRAMES }} />\n        <style dangerouslySetInnerHTML={{ __html: dynamicGridHoverStyles }} />\n        <button\n          className={hoverBorderButtonFinalClassName}\n          onClick={handleButtonClick}\n          disabled={disabled}\n        >\n          <span className=\"relative z-[10] pointer-events-none\">{children}</span>\n          {jsRippleElements}\n          <div\n            className=\"hoverborder-variant-ripple-container absolute inset-0 grid rounded-[0.8em] overflow-hidden pointer-events-none z-[0]\"\n            style={{ gridTemplateColumns: `repeat(${GRID_HOVER_NUM_COLS}, 0.25em)` }}\n          >\n            {Array.from({ length: GRID_HOVER_TOTAL_CELLS }, (_, index) => (\n              <span\n                key={index}\n                className=\"hoverborder-variant-grid-cell relative flex justify-center items-center pointer-events-auto\"\n              />\n            ))}\n            <div className=\"hoverborder-variant-visual-ripple pointer-events-none absolute w-0 h-0 rounded-full transform -translate-x-1/2 -translate-y-1/2 top-0 left-0 z-[-1]\" />\n          </div>\n        </button>\n      </>\n    );\n  }\n\n  if (variant === 'ghost') {\n    const ghostButtonFinalClassName = [\n      \"relative\", \"border-none\", \"bg-transparent\", \"isolate\", \"overflow-hidden\", \"cursor-pointer\",\n      \"px-4\", \"py-2\", \"rounded-lg\", \"text-lg\",\n      disabled ? \"opacity-50 cursor-not-allowed pointer-events-none\" : \"\",\n      className,\n    ].filter(Boolean).join(\" \");\n    return (\n      <>\n        <style dangerouslySetInnerHTML={{ __html: JS_RIPPLE_KEYFRAMES }} />\n        <button className={ghostButtonFinalClassName} onClick={handleButtonClick} disabled={disabled}>\n          <span className=\"relative z-10 pointer-events-none\">{children}</span>\n          {jsRippleElements}\n        </button>\n      </>\n    );\n  }\n\n  // Default variant\n  const baseClasses = \"relative border-none overflow-hidden isolate transition-all duration-200 cursor-pointer px-4 py-2 bg-blue-600 hover:opacity-90 text-white rounded-lg\";\n  const disabledClasses = disabled ? \"opacity-50 cursor-not-allowed\" : \"\";\n  const buttonClasses = `${baseClasses} ${disabledClasses} ${className}`;\n  return (\n    <>\n      <style dangerouslySetInnerHTML={{ __html: JS_RIPPLE_KEYFRAMES }} />\n      <button className={buttonClasses} onClick={handleButtonClick} disabled={disabled}>\n        <span className=\"relative z-[1] pointer-events-none\">{children}</span>\n        {jsRippleElements}\n      </button>\n    </>\n  );\n};\n\nexport { RippleButton };",
      "type": "registry:component"
    }
  ]
}