{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "draw-cursor",
  "type": "registry:component",
  "dependencies": [
    "gsap"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/draw-cursor-demo.tsx",
      "content": "import DrawCursor from \"@/components/nurui/draw-cursor\";\r\n\r\nexport function DrawCursorDemo() {\r\n  return (\r\n    <>\r\n      <p className=\"text-3xl text-center pt-4 text-[#3ca2fa] font-bold\">\r\n        Move cursor to see the effect.\r\n      </p>\r\n      <DrawCursor\r\n        type=\"drawAlways\"\r\n        strokeColor=\"#80eeb4\"\r\n        strokeWidth={10}\r\n        followEffect={true}\r\n      />\r\n    </>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/draw-cursor.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useRef, useEffect } from \"react\";\r\nimport { gsap } from \"gsap\";\r\n\r\ntype DrawingType = \"drawOnHold\" | \"drawAlways\";\r\n\r\ninterface Props {\r\n  strokeColor?: string;\r\n  strokeWidth?: number;\r\n  type: DrawingType;\r\n  followEffect?: boolean;\r\n}\r\n\r\nconst DrawCursor: React.FC<Props> = ({\r\n  strokeColor = \"#FF9900\",\r\n  strokeWidth = 10,\r\n  type = \"drawAlways\",\r\n  followEffect = false,\r\n}) => {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const svgRef = useRef<SVGSVGElement | null>(null);\r\n  const isDrawing = useRef(false);\r\n  const last = useRef<{ x: number | null; y: number | null }>({\r\n    x: null,\r\n    y: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const svgNS = \"http://www.w3.org/2000/svg\";\r\n\r\n    // Create SVG\r\n    const svg = document.createElementNS(svgNS, \"svg\");\r\n    svg.style.position = \"fixed\";\r\n    svg.style.top = \"0\";\r\n    svg.style.left = \"0\";\r\n    svg.style.width = \"100vw\";\r\n    svg.style.height = \"100vh\";\r\n    svg.style.pointerEvents = \"none\";\r\n    svg.style.zIndex = \"9999\"; // high z-index to be above everything\r\n    document.body.appendChild(svg);\r\n    svgRef.current = svg;\r\n\r\n    // Resize handler to keep SVG full screen\r\n    const resizeSvg = () => {\r\n      svg.setAttribute(\"width\", window.innerWidth.toString());\r\n      svg.setAttribute(\"height\", window.innerHeight.toString());\r\n    };\r\n    resizeSvg();\r\n    window.addEventListener(\"resize\", resizeSvg);\r\n\r\n    const drawLine = (x1: number, y1: number, x2: number, y2: number) => {\r\n      const line = document.createElementNS(svgNS, \"line\");\r\n      line.setAttribute(\"x1\", `${x1}`);\r\n      line.setAttribute(\"y1\", `${y1}`);\r\n      line.setAttribute(\"x2\", `${x2}`);\r\n      line.setAttribute(\"y2\", `${y2}`);\r\n      line.setAttribute(\"stroke\", strokeColor);\r\n      line.setAttribute(\"stroke-width\", `${strokeWidth}`);\r\n      line.setAttribute(\"stroke-linecap\", \"round\");\r\n      svg.appendChild(line);\r\n\r\n      if (followEffect) {\r\n        gsap.to(line, {\r\n          opacity: 0,\r\n          duration: 0.5,\r\n          ease: \"power1.out\",\r\n          onComplete: () => line.remove(),\r\n        });\r\n      }\r\n    };\r\n\r\n    const onMouseMove = (e: MouseEvent) => {\r\n      if (type === \"drawOnHold\" && !isDrawing.current) return;\r\n\r\n      const x = e.clientX;\r\n      const y = e.clientY;\r\n\r\n      if (last.current.x != null && last.current.y != null) {\r\n        drawLine(last.current.x, last.current.y, x, y);\r\n      }\r\n\r\n      last.current = { x, y };\r\n    };\r\n\r\n    const onMouseDown = () => {\r\n      if (type === \"drawOnHold\") isDrawing.current = true;\r\n    };\r\n\r\n    const onMouseUp = () => {\r\n      if (type === \"drawOnHold\") isDrawing.current = false;\r\n      last.current = { x: null, y: null }; // reset on mouse up\r\n    };\r\n\r\n    const onMouseLeave = () => {\r\n      last.current = { x: null, y: null };\r\n      isDrawing.current = false;\r\n    };\r\n\r\n    window.addEventListener(\"mousemove\", onMouseMove);\r\n    window.addEventListener(\"mousedown\", onMouseDown);\r\n    window.addEventListener(\"mouseup\", onMouseUp);\r\n    window.addEventListener(\"mouseleave\", onMouseLeave);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"mousemove\", onMouseMove);\r\n      window.removeEventListener(\"mousedown\", onMouseDown);\r\n      window.removeEventListener(\"mouseup\", onMouseUp);\r\n      window.removeEventListener(\"mouseleave\", onMouseLeave);\r\n      window.removeEventListener(\"resize\", resizeSvg);\r\n      svg.remove();\r\n    };\r\n  }, [strokeColor, strokeWidth, type, followEffect]);\r\n\r\n  return <div ref={containerRef} className=\"relative overflow-hidden\" />;\r\n};\r\n\r\nexport default DrawCursor;\r\n",
      "type": "registry:component"
    }
  ]
}