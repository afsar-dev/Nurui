{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "draw-cursor",
  "type": "registry:component",
  "dependencies": [
    "gsap"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/draw-cursor-demo.tsx",
      "content": "import DrawCursor from \"@/components/nurui/draw-cursor\";\n\nexport function DrawCursorDemo() {\n  return (\n    <>\n      <p className=\"text-3xl text-center pt-4 text-[#3ca2fa] font-bold\">\n        Move cursor to see the effect.\n      </p>\n      <DrawCursor\n        type=\"drawAlways\"\n        strokeColor=\"#80eeb4\"\n        strokeWidth={10}\n        followEffect={true}\n      />\n    </>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/draw-cursor.tsx",
      "content": "\"use client\";\n\nimport React, { useRef, useEffect } from \"react\";\nimport { gsap } from \"gsap\";\n\ntype DrawingType = \"drawOnHold\" | \"drawAlways\";\n\ninterface Props {\n  strokeColor?: string;\n  strokeWidth?: number;\n  type: DrawingType;\n  followEffect?: boolean;\n}\n\nconst DrawCursor: React.FC<Props> = ({\n  strokeColor = \"#FF9900\",\n  strokeWidth = 10,\n  type = \"drawAlways\",\n  followEffect = false,\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const svgRef = useRef<SVGSVGElement | null>(null);\n  const isDrawing = useRef(false);\n  const last = useRef<{ x: number | null; y: number | null }>({\n    x: null,\n    y: null,\n  });\n\n  useEffect(() => {\n    const svgNS = \"http://www.w3.org/2000/svg\";\n\n    // Create SVG\n    const svg = document.createElementNS(svgNS, \"svg\");\n    svg.style.position = \"fixed\";\n    svg.style.top = \"0\";\n    svg.style.left = \"0\";\n    svg.style.width = \"100vw\";\n    svg.style.height = \"100vh\";\n    svg.style.pointerEvents = \"none\";\n    svg.style.zIndex = \"9999\"; // high z-index to be above everything\n    document.body.appendChild(svg);\n    svgRef.current = svg;\n\n    // Resize handler to keep SVG full screen\n    const resizeSvg = () => {\n      svg.setAttribute(\"width\", window.innerWidth.toString());\n      svg.setAttribute(\"height\", window.innerHeight.toString());\n    };\n    resizeSvg();\n    window.addEventListener(\"resize\", resizeSvg);\n\n    const drawLine = (x1: number, y1: number, x2: number, y2: number) => {\n      const line = document.createElementNS(svgNS, \"line\");\n      line.setAttribute(\"x1\", `${x1}`);\n      line.setAttribute(\"y1\", `${y1}`);\n      line.setAttribute(\"x2\", `${x2}`);\n      line.setAttribute(\"y2\", `${y2}`);\n      line.setAttribute(\"stroke\", strokeColor);\n      line.setAttribute(\"stroke-width\", `${strokeWidth}`);\n      line.setAttribute(\"stroke-linecap\", \"round\");\n      svg.appendChild(line);\n\n      if (followEffect) {\n        gsap.to(line, {\n          opacity: 0,\n          duration: 0.5,\n          ease: \"power1.out\",\n          onComplete: () => line.remove(),\n        });\n      }\n    };\n\n    const onMouseMove = (e: MouseEvent) => {\n      if (type === \"drawOnHold\" && !isDrawing.current) return;\n\n      const x = e.clientX;\n      const y = e.clientY;\n\n      if (last.current.x != null && last.current.y != null) {\n        drawLine(last.current.x, last.current.y, x, y);\n      }\n\n      last.current = { x, y };\n    };\n\n    const onMouseDown = () => {\n      if (type === \"drawOnHold\") isDrawing.current = true;\n    };\n\n    const onMouseUp = () => {\n      if (type === \"drawOnHold\") isDrawing.current = false;\n      last.current = { x: null, y: null }; // reset on mouse up\n    };\n\n    const onMouseLeave = () => {\n      last.current = { x: null, y: null };\n      isDrawing.current = false;\n    };\n\n    window.addEventListener(\"mousemove\", onMouseMove);\n    window.addEventListener(\"mousedown\", onMouseDown);\n    window.addEventListener(\"mouseup\", onMouseUp);\n    window.addEventListener(\"mouseleave\", onMouseLeave);\n\n    return () => {\n      window.removeEventListener(\"mousemove\", onMouseMove);\n      window.removeEventListener(\"mousedown\", onMouseDown);\n      window.removeEventListener(\"mouseup\", onMouseUp);\n      window.removeEventListener(\"mouseleave\", onMouseLeave);\n      window.removeEventListener(\"resize\", resizeSvg);\n      svg.remove();\n    };\n  }, [strokeColor, strokeWidth, type, followEffect]);\n\n  return <div ref={containerRef} className=\"relative overflow-hidden\" />;\n};\n\nexport default DrawCursor;\n",
      "type": "registry:component"
    }
  ]
}