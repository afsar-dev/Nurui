{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "project-showcase",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "tailwind-merge",
    "framer-motion",
    ""
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/project-showcase-demo.tsx",
      "content": "\"use client\";\r\nimport React from \"react\";\r\nimport { ProjectShowCase } from \"@/components/nurui/project-showcase\";\r\n\r\nconst ProjectShowCaseDemo = () => {\r\n  function openInNewTab(link: string) {\r\n    window.open(link, \"_blank\", \"noopener,noreferrer\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-20 rounded-lg min-h-[300px] flex flex-wrap gap-6 items-center justify-center relative\">\r\n      <div\r\n        className=\"items-center justify-center relative flex\"\r\n        style={{ maxWidth: \"1536px\" }}\r\n      >\r\n        <ProjectShowCase\r\n          testimonials={[\r\n            {\r\n              name: \"Nurui\",\r\n              quote:\r\n                'Nurui is a modern, cross-framework UI component library with CLI support for integrating responsive components.',\r\n              designation: \"Next.js Project\",\r\n              src: \"https://res.cloudinary.com/dz1fy2tof/image/upload/v1751865129/og-image_sg2pmi.png\",\r\n              link: \"https://nurui.vercel.app\",\r\n            },\r\n            {\r\n              name: \"Libra\",\r\n              quote:\r\n                \"Libra is a minimal Library Management System built with React, TypeScript, and Redux Toolkit Query, allowing users to view, create, edit, delete, and borrow books without authentication or complex setup.\",\r\n              designation: \"React.js Project\",\r\n              src: \"https://res.cloudinary.com/dz1fy2tof/image/upload/v1751865496/Libra_lwshuz.png\",\r\n              link: \"https://minimal-library-management-client.vercel.app\",\r\n            },\r\n            {\r\n              name: \"Bookify\",\r\n              quote:\r\n                \"It is a book exchange web app that allows users to easily exchange single or multiple books with others.\",\r\n              designation: \"Next.js Project\",\r\n              src: \"https://res.cloudinary.com/dz1fy2tof/image/upload/v1751865698/bookify_fh6bfi.png\",\r\n              link: \"https://bookify06.vercel.app/\",\r\n            },\r\n          ]}\r\n          colors={{\r\n            name: \"#3ca2fa\",\r\n          }}\r\n          fontSizes={{\r\n            name: \"25px\",\r\n          }}\r\n          spacing={{\r\n            nameTop: \"8\",\r\n            nameBottom: \"2\",\r\n            lineHeight: \"2\",\r\n          }}\r\n          halomotButtonBackground=\"#3ca2fa33\"\r\n          halomotButtonTextColor=\"#000\"\r\n          halomotButtonOuterBorderRadius=\"10px\"\r\n          halomotButtonInnerBorderRadius=\"10px\"\r\n          halomotButtonHoverTextColor=\"#fff\"\r\n          onItemClick={openInNewTab}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectShowCaseDemo;\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/project-showcase.tsx",
      "content": "\"use client\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport Image from \"next/image\";\r\nimport { useEffect, useState, useCallback, useRef } from \"react\";\r\nimport { HalomotButton } from \"@/components/nurui/halomot-button\";\r\n\r\ntype Testimonial = {\r\n  quote: string;\r\n  name: string;\r\n  designation: string;\r\n  src: string;\r\n  link?: string;\r\n};\r\n\r\ntype ProjectShowcaseProps = {\r\n  testimonials: Testimonial[];\r\n  autoplay?: boolean;\r\n  colors?: { name?: string; position?: string; testimony?: string };\r\n  fontSizes?: { name?: string; position?: string; testimony?: string };\r\n  spacing?: {\r\n    top?: string;\r\n    bottom?: string;\r\n    lineHeight?: string;\r\n    nameTop?: string;\r\n    nameBottom?: string;\r\n    positionTop?: string;\r\n    positionBottom?: string;\r\n    testimonyTop?: string;\r\n    testimonyBottom?: string;\r\n  };\r\n  desktopVersionBottomThreshold?: number;\r\n  maxImageWidth?: number;\r\n  imageWidthPercentage?: number;\r\n  mobile?: {\r\n    fontSizes?: { name?: string; position?: string; testimony?: string };\r\n    spacing?: {\r\n      top?: string;\r\n      bottom?: string;\r\n      lineHeight?: string;\r\n      nameTop?: string;\r\n      nameBottom?: string;\r\n      positionTop?: string;\r\n      positionBottom?: string;\r\n      testimonyTop?: string;\r\n      testimonyBottom?: string;\r\n    };\r\n  };\r\n  imageAspectRatio?: number;\r\n  isRTL?: boolean;\r\n  onItemClick?: (link: string) => void;\r\n  outerRounding?: string;\r\n  innerRounding?: string;\r\n  outlineColor?: string;\r\n  hoverOutlineColor?: string;\r\n  buttonInscriptions?: {\r\n    previousButton: string;\r\n    nextButton: string;\r\n    openWebAppButton: string;\r\n  };\r\n  halomotButtonGradient?: string;\r\n  halomotButtonBackground?: string;\r\n  halomotButtonTextColor?: string;\r\n  halomotButtonOuterBorderRadius?: string;\r\n  halomotButtonInnerBorderRadius?: string;\r\n  halomotButtonHoverTextColor?: string;\r\n};\r\n\r\nexport const ProjectShowCase = ({\r\n  testimonials,\r\n  autoplay = false,\r\n  colors = { name: \"#fff\", position: \"gray-500\", testimony: \"gray-500\" },\r\n  fontSizes = { name: \"2xl\", position: \"sm\", testimony: \"lg\" },\r\n  spacing = {\r\n    top: \"20\",\r\n    bottom: \"20\",\r\n    lineHeight: \"1.5\",\r\n    nameTop: \"0\",\r\n    nameBottom: \"0.5em\",\r\n    positionTop: \"0\",\r\n    positionBottom: \"0.25em\",\r\n    testimonyTop: \"1em\",\r\n    testimonyBottom: \"1em\"\r\n  },\r\n  desktopVersionBottomThreshold = 1024,\r\n  mobile = {},\r\n  imageAspectRatio = 1.37,\r\n  isRTL = false,\r\n  onItemClick,\r\n  outerRounding = \"18.2px\",\r\n  innerRounding = \"18px\",\r\n  outlineColor = \"#33313d\",\r\n  hoverOutlineColor = \"#403d4d\",\r\n  buttonInscriptions = {\r\n    previousButton: \"Previous\",\r\n    nextButton: \"Next\",\r\n    openWebAppButton: \"Open Web App\"\r\n  },\r\n  halomotButtonGradient = \"linear-gradient(to right, #a123f4, #603dec)\",\r\n  halomotButtonBackground = \"#111014\",\r\n  halomotButtonTextColor = \"#fff\",\r\n  halomotButtonOuterBorderRadius = \"6.34px\",\r\n  halomotButtonInnerBorderRadius = \"6px\",\r\n  halomotButtonHoverTextColor\r\n}: ProjectShowcaseProps) => {\r\n  const [active, setActive] = useState(0);\r\n  const [isMobileView, setIsMobileView] = useState(false);\r\n  const [componentWidth, setComponentWidth] = useState(0);\r\n  const componentRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Use Mobile Config (with defaults)\r\n  const currentFontSizes =\r\n    isMobileView && mobile.fontSizes ? mobile.fontSizes : fontSizes;\r\n  const currentSpacing = {\r\n    ...spacing,\r\n    ...(isMobileView && mobile.spacing ? mobile.spacing : {})\r\n  };\r\n\r\n  const handleNext = useCallback(() => {\r\n    setActive((prev) => (prev + 1) % testimonials.length);\r\n  }, [testimonials.length]);\r\n\r\n  const handlePrev = () => {\r\n    setActive((prev) => (prev - 1 + testimonials.length) % testimonials.length);\r\n  };\r\n\r\n  const isActive = (index: number) => {\r\n    return index === active;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (autoplay) {\r\n      const interval = setInterval(handleNext, 5000);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [autoplay, handleNext]);\r\n\r\n  const handleResize = useCallback(() => {\r\n    if (componentRef.current) {\r\n      setComponentWidth(componentRef.current.offsetWidth);\r\n      setIsMobileView(\r\n        componentRef.current.offsetWidth < desktopVersionBottomThreshold\r\n      );\r\n    }\r\n  }, [desktopVersionBottomThreshold]);\r\n\r\n  useEffect(() => {\r\n    const node = componentRef.current;\r\n    const resizeObserver = new ResizeObserver(handleResize);\r\n    if (node) {\r\n      resizeObserver.observe(node);\r\n    }\r\n    handleResize(); // Initial check\r\n    return () => {\r\n      if (node) {\r\n        resizeObserver.unobserve(node);\r\n      }\r\n    };\r\n  }, [handleResize]);\r\n\r\n  const randomRotateY = () => {\r\n    return Math.floor(Math.random() * 21) - 10;\r\n  };\r\n\r\n  const calculateGap = (width: number) => {\r\n    const minWidth = 1024;\r\n    const maxWidth = 1456;\r\n    const minGap = 60;\r\n    const maxGap = 86;\r\n    if (width <= minWidth) return minGap;\r\n    if (width >= maxWidth)\r\n      return Math.max(minGap, maxGap + 0.06018 * (width - maxWidth));\r\n    return (\r\n      minGap + (maxGap - minGap) * ((width - minWidth) / (maxWidth - minWidth))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={componentRef}\r\n      className={`w-full mx-auto antialiased font-sans py-${currentSpacing.top} pb-${currentSpacing.bottom}`}\r\n      style={{\r\n        lineHeight: currentSpacing.lineHeight,\r\n        backgroundColor: \"transparent\",\r\n        direction: isRTL ? \"rtl\" : \"ltr\"\r\n      }}\r\n    >\r\n      <div\r\n        className=\"relative\"\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateColumns: isMobileView\r\n            ? \"1fr\"\r\n            : isRTL\r\n            ? \"1fr 1fr\"\r\n            : \"1fr 1fr\",\r\n          gap: `${calculateGap(componentWidth)}px`\r\n        }}\r\n      >\r\n        {isRTL && !isMobileView ? (\r\n          <>\r\n            <div className=\"w-full\">\r\n              <div\r\n                className=\"relative\"\r\n                style={{ paddingTop: `${(1 / imageAspectRatio) * 100}%` }}\r\n              >\r\n                <AnimatePresence>\r\n                  {testimonials.map((testimonial, index) => (\r\n                    <motion.div\r\n                      key={testimonial.src}\r\n                      initial={{\r\n                        opacity: 0,\r\n                        scale: 0.9,\r\n                        z: -100,\r\n                        rotate: randomRotateY()\r\n                      }}\r\n                      animate={{\r\n                        opacity: isActive(index) ? 1 : 0.7,\r\n                        scale: isActive(index) ? 1 : 0.95,\r\n                        z: isActive(index) ? 0 : -100,\r\n                        rotate: isActive(index) ? 0 : randomRotateY(),\r\n                        zIndex: isActive(index)\r\n                          ? 999\r\n                          : testimonials.length + 2 - index,\r\n                        y: isActive(index) ? [0, -80, 0] : 0\r\n                      }}\r\n                      exit={{\r\n                        opacity: 0,\r\n                        scale: 0.9,\r\n                        z: 100,\r\n                        rotate: randomRotateY()\r\n                      }}\r\n                      transition={{ duration: 0.4, ease: \"easeInOut\" }}\r\n                      className=\"absolute inset-0 origin-bottom\"\r\n                    >\r\n                      <ImageContainer\r\n                        src={testimonial.src}\r\n                        alt={testimonial.name}\r\n                        outerRounding={outerRounding}\r\n                        innerRounding={innerRounding}\r\n                        outlineColor={outlineColor}\r\n                        hoverOutlineColor={hoverOutlineColor}\r\n                      />\r\n                    </motion.div>\r\n                  ))}\r\n                </AnimatePresence>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex justify-between flex-col py-4 w-full\">\r\n              <motion.div\r\n                key={active}\r\n                initial={{ y: 20, opacity: 0 }}\r\n                animate={{ y: 0, opacity: 1 }}\r\n                exit={{ y: -20, opacity: 0 }}\r\n                transition={{ duration: 0.2, ease: \"easeInOut\" }}\r\n              >\r\n                <h3\r\n                  className={`font-bold`}\r\n                  style={{\r\n                    fontSize: currentFontSizes.name,\r\n                    color: colors.name,\r\n                    marginTop: currentSpacing.nameTop,\r\n                    marginBottom: currentSpacing.nameBottom,\r\n                    textAlign: \"right\"\r\n                  }}\r\n                >\r\n                  {testimonials[active].name}\r\n                </h3>\r\n                <p\r\n                  style={{\r\n                    fontSize: currentFontSizes.position,\r\n                    color: colors.position,\r\n                    marginTop: currentSpacing.positionTop,\r\n                    marginBottom: currentSpacing.positionBottom,\r\n                    textAlign: \"right\"\r\n                  }}\r\n                >\r\n                  {testimonials[active].designation}\r\n                </p>\r\n                <motion.p\r\n                  style={{\r\n                    fontSize: currentFontSizes.testimony,\r\n                    color: colors.testimony,\r\n                    marginTop: currentSpacing.testimonyTop,\r\n                    marginBottom: currentSpacing.testimonyBottom,\r\n                    textAlign: \"right\"\r\n                  }}\r\n                >\r\n                  {testimonials[active].quote.split(\" \").map((word, index) => (\r\n                    <motion.span\r\n                      key={index}\r\n                      initial={{ filter: \"blur(10px)\", opacity: 0, y: 5 }}\r\n                      animate={{\r\n                        filter: \"blur(0px)\",\r\n                        opacity: 1,\r\n                        y: 0\r\n                      }}\r\n                      transition={{\r\n                        duration: 0.2,\r\n                        ease: \"easeInOut\",\r\n                        delay: 0.02 * index\r\n                      }}\r\n                      className=\"inline-block\"\r\n                    >\r\n                      {word}&nbsp;\r\n                    </motion.span>\r\n                  ))}\r\n                </motion.p>\r\n              </motion.div>\r\n              <div\r\n                className={`flex gap-4 ${\r\n                  isMobileView ? \"pt-12\" : \"md:pt-0\"\r\n                } w-full`}\r\n                style={{ justifyContent: \"flex-start\" }}\r\n              >\r\n                <HalomotButton\r\n                  inscription={buttonInscriptions.previousButton}\r\n                  onClick={handlePrev}\r\n                  fixedWidth=\"172px\"\r\n                  gradient={halomotButtonGradient}\r\n                  backgroundColor={halomotButtonBackground}\r\n                  textColor={halomotButtonTextColor}\r\n                  innerBorderRadius={halomotButtonInnerBorderRadius}\r\n                  outerBorderRadius={halomotButtonOuterBorderRadius}\r\n                  {...(halomotButtonHoverTextColor\r\n                    ? { hoverTextColor: halomotButtonHoverTextColor }\r\n                    : {})}\r\n                />\r\n                <HalomotButton\r\n                  inscription={buttonInscriptions.nextButton}\r\n                  onClick={handleNext}\r\n                  fixedWidth=\"172px\"\r\n                  gradient={halomotButtonGradient}\r\n                  backgroundColor={halomotButtonBackground}\r\n                  textColor={halomotButtonTextColor}\r\n                  innerBorderRadius={halomotButtonInnerBorderRadius}\r\n                  outerBorderRadius={halomotButtonOuterBorderRadius}\r\n                  {...(halomotButtonHoverTextColor\r\n                    ? { hoverTextColor: halomotButtonHoverTextColor }\r\n                    : {})}\r\n                />\r\n                <HalomotButton\r\n                  inscription={buttonInscriptions.openWebAppButton}\r\n                  onClick={() =>\r\n                    onItemClick && onItemClick(testimonials[active].link || \"\")\r\n                  }\r\n                  fillWidth\r\n                  gradient={halomotButtonGradient}\r\n                  backgroundColor={halomotButtonBackground}\r\n                  textColor={halomotButtonTextColor}\r\n                  innerBorderRadius={halomotButtonInnerBorderRadius}\r\n                  outerBorderRadius={halomotButtonOuterBorderRadius}\r\n                  {...(halomotButtonHoverTextColor\r\n                    ? { hoverTextColor: halomotButtonHoverTextColor }\r\n                    : {})}\r\n                  href={testimonials[active].link}\r\n                />\r\n              </div>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className=\"w-full\">\r\n              <div\r\n                className=\"relative\"\r\n                style={{ paddingTop: `${(1 / imageAspectRatio) * 100}%` }}\r\n              >\r\n                <AnimatePresence>\r\n                  {testimonials.map((testimonial, index) => (\r\n                    <motion.div\r\n                      key={testimonial.src}\r\n                      initial={{\r\n                        opacity: 0,\r\n                        scale: 0.9,\r\n                        z: -100,\r\n                        rotate: randomRotateY()\r\n                      }}\r\n                      animate={{\r\n                        opacity: isActive(index) ? 1 : 0.7,\r\n                        scale: isActive(index) ? 1 : 0.95,\r\n                        z: isActive(index) ? 0 : -100,\r\n                        rotate: isActive(index) ? 0 : randomRotateY(),\r\n                        zIndex: isActive(index)\r\n                          ? 999\r\n                          : testimonials.length + 2 - index,\r\n                        y: isActive(index) ? [0, -80, 0] : 0\r\n                      }}\r\n                      exit={{\r\n                        opacity: 0,\r\n                        scale: 0.9,\r\n                        z: 100,\r\n                        rotate: randomRotateY()\r\n                      }}\r\n                      transition={{ duration: 0.4, ease: \"easeInOut\" }}\r\n                      className=\"absolute inset-0 origin-bottom\"\r\n                    >\r\n                      <ImageContainer\r\n                        src={testimonial.src}\r\n                        alt={testimonial.name}\r\n                        outerRounding={outerRounding}\r\n                        innerRounding={innerRounding}\r\n                        outlineColor={outlineColor}\r\n                        hoverOutlineColor={hoverOutlineColor}\r\n                      />\r\n                    </motion.div>\r\n                  ))}\r\n                </AnimatePresence>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex justify-between flex-col py-4 w-full\">\r\n              <motion.div\r\n                key={active}\r\n                initial={{ y: 20, opacity: 0 }}\r\n                animate={{ y: 0, opacity: 1 }}\r\n                exit={{ y: -20, opacity: 0 }}\r\n                transition={{ duration: 0.2, ease: \"easeInOut\" }}\r\n              >\r\n                <h3\r\n                  className={`font-bold`}\r\n                  style={{\r\n                    fontSize: currentFontSizes.name,\r\n                    color: colors.name,\r\n                    marginTop: currentSpacing.nameTop,\r\n                    marginBottom: currentSpacing.nameBottom\r\n                  }}\r\n                >\r\n                  {testimonials[active].name}\r\n                </h3>\r\n                <p\r\n                  style={{\r\n                    fontSize: currentFontSizes.position,\r\n                    color: colors.position,\r\n                    marginTop: currentSpacing.positionTop,\r\n                    marginBottom: currentSpacing.positionBottom\r\n                  }}\r\n                >\r\n                  {testimonials[active].designation}\r\n                </p>\r\n                <motion.p\r\n                  style={{\r\n                    fontSize: currentFontSizes.testimony,\r\n                    color: colors.testimony,\r\n                    marginTop: currentSpacing.testimonyTop,\r\n                    marginBottom: currentSpacing.testimonyBottom\r\n                  }}\r\n                >\r\n                  {testimonials[active].quote.split(\" \").map((word, index) => (\r\n                    <motion.span\r\n                      key={index}\r\n                      initial={{ filter: \"blur(10px)\", opacity: 0, y: 5 }}\r\n                      animate={{\r\n                        filter: \"blur(0px)\",\r\n                        opacity: 1,\r\n                        y: 0\r\n                      }}\r\n                      transition={{\r\n                        duration: 0.2,\r\n                        ease: \"easeInOut\",\r\n                        delay: 0.02 * index\r\n                      }}\r\n                      className=\"inline-block\"\r\n                    >\r\n                      {word}&nbsp;\r\n                    </motion.span>\r\n                  ))}\r\n                </motion.p>\r\n              </motion.div>\r\n              <div\r\n                className={`flex gap-4 ${\r\n                  isMobileView ? \"pt-12\" : \"md:pt-0\"\r\n                } w-full`}\r\n              >\r\n                <HalomotButton\r\n                  inscription={buttonInscriptions.previousButton}\r\n                  onClick={handlePrev}\r\n                  fixedWidth=\"172px\"\r\n                  gradient={halomotButtonGradient}\r\n                  backgroundColor={halomotButtonBackground}\r\n                  textColor={halomotButtonTextColor}\r\n                  innerBorderRadius={halomotButtonInnerBorderRadius}\r\n                  outerBorderRadius={halomotButtonOuterBorderRadius}\r\n                  {...(halomotButtonHoverTextColor\r\n                    ? { hoverTextColor: halomotButtonHoverTextColor }\r\n                    : {})}\r\n                />\r\n                <HalomotButton\r\n                  inscription={buttonInscriptions.nextButton}\r\n                  onClick={handleNext}\r\n                  fixedWidth=\"172px\"\r\n                  gradient={halomotButtonGradient}\r\n                  backgroundColor={halomotButtonBackground}\r\n                  textColor={halomotButtonTextColor}\r\n                  innerBorderRadius={halomotButtonInnerBorderRadius}\r\n                  outerBorderRadius={halomotButtonOuterBorderRadius}\r\n                  {...(halomotButtonHoverTextColor\r\n                    ? { hoverTextColor: halomotButtonHoverTextColor }\r\n                    : {})}\r\n                />\r\n                <HalomotButton\r\n                  inscription={buttonInscriptions.openWebAppButton}\r\n                  onClick={() =>\r\n                    onItemClick && onItemClick(testimonials[active].link || \"\")\r\n                  }\r\n                  fillWidth\r\n                  gradient={halomotButtonGradient}\r\n                  backgroundColor={halomotButtonBackground}\r\n                  textColor={halomotButtonTextColor}\r\n                  innerBorderRadius={halomotButtonInnerBorderRadius}\r\n                  outerBorderRadius={halomotButtonOuterBorderRadius}\r\n                  {...(halomotButtonHoverTextColor\r\n                    ? { hoverTextColor: halomotButtonHoverTextColor }\r\n                    : {})}\r\n                  href={testimonials[active].link}\r\n                />\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype ImageContainerProps = {\r\n  src: string;\r\n  alt: string;\r\n  outerRounding: string;\r\n  innerRounding: string;\r\n  outlineColor: string;\r\n  hoverOutlineColor: string;\r\n};\r\n\r\nconst ImageContainer = ({\r\n  src,\r\n  alt,\r\n  outerRounding,\r\n  innerRounding,\r\n  outlineColor,\r\n  hoverOutlineColor\r\n}: ImageContainerProps) => (\r\n  <div\r\n    className=\"relative h-full w-full project-showcase-image-container\"\r\n    style={{\r\n      borderRadius: outerRounding,\r\n      padding: \"1px\",\r\n      backgroundColor: outlineColor,\r\n      transition: \"background-color 0.3s ease-in-out\"\r\n    }}\r\n  >\r\n    <div\r\n      className=\"relative h-full w-full overflow-hidden\"\r\n      style={{\r\n        borderRadius: innerRounding\r\n      }}\r\n    >\r\n      <Image\r\n        src={src}\r\n        alt={alt}\r\n        layout=\"fill\"\r\n        draggable={false}\r\n        className=\"h-full w-full object-fill object-center\"\r\n        unoptimized\r\n      />\r\n    </div>\r\n    <style jsx>{`\r\n      .project-showcase-image-container:hover {\r\n        background-color: ${hoverOutlineColor} !important;\r\n      }\r\n    `}</style>\r\n  </div>\r\n);\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/halomot-button.tsx",
      "content": "\"use client\";\r\nimport React, { useState } from \"react\";\r\n\r\ninterface HalomotButtonProps {\r\n  gradient?: string; // Gradient for the button border/background\r\n  inscription: string; // Button text\r\n  onClick: () => void;\r\n  fillWidth?: boolean;\r\n  fixedWidth?: string;\r\n  href?: string;\r\n  backgroundColor?: string; // Solid color for the inner button (not gradient)\r\n  icon?: React.ReactElement<React.HTMLAttributes<HTMLElement>>;\r\n  borderWidth?: string; // Controls the padding (thickness of the gradient border)\r\n  padding?: string; // Custom padding for the inner button, e.g., \"1rem 4rem\"\r\n  outerBorderRadius?: string; // Border radius for the gradient outer border\r\n  innerBorderRadius?: string; // Border radius for the inner button\r\n  textColor?: string; // Text color for the button, default #fff\r\n  hoverTextColor?: string;\r\n}\r\n\r\nexport const HalomotButton: React.FC<HalomotButtonProps> = ({\r\n  gradient = \"linear-gradient(135deg, #4776cb, #a19fe5, #6cc606)\",\r\n  inscription,\r\n  onClick,\r\n  fillWidth = false,\r\n  fixedWidth,\r\n  href,\r\n  backgroundColor = \"#fff\",\r\n  icon,\r\n  borderWidth = \"1px\",\r\n  padding,\r\n  outerBorderRadius = \"6.34px\",\r\n  innerBorderRadius = \"6px\",\r\n  textColor = \"#000\",\r\n  hoverTextColor,\r\n}) => {\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const [delayedColor, setDelayedColor] = useState<string | undefined>(\r\n    undefined,\r\n  );\r\n\r\n  // Container style for fixed width\r\n  const containerStyle: React.CSSProperties = fixedWidth\r\n    ? { width: fixedWidth, display: \"inline-block\" }\r\n    : {};\r\n\r\n  // Outer button style (gradient border)\r\n  const buttonStyle: React.CSSProperties = {\r\n    margin: fillWidth || fixedWidth ? \"0\" : \"auto\",\r\n    padding: borderWidth,\r\n    background: gradient,\r\n    border: \"0\",\r\n    borderRadius: outerBorderRadius,\r\n    color: textColor,\r\n    fontWeight: \"bold\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    textDecoration: \"none\",\r\n    userSelect: \"none\",\r\n    WebkitUserSelect: \"none\",\r\n    whiteSpace: \"nowrap\",\r\n    transition: \"all .3s\",\r\n    width: fillWidth || fixedWidth ? \"100%\" : \"fit-content\",\r\n    flexDirection: \"row\",\r\n    boxSizing: \"border-box\",\r\n  };\r\n\r\n  // Inner span style (actual clickable area)\r\n  const spanStyle: React.CSSProperties = {\r\n    background: isHovered ? \"none\" : backgroundColor,\r\n    padding: padding ?? (fillWidth || fixedWidth ? \"1rem 0\" : \"1rem 4rem\"),\r\n    border: \"0\",\r\n    borderRadius: innerBorderRadius,\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    transition: hoverTextColor\r\n      ? \"color 0.3s, background 300ms\"\r\n      : \"background 300ms\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    fontWeight: \"bold\",\r\n    color: delayedColor ? delayedColor : textColor,\r\n    whiteSpace: \"nowrap\",\r\n    fontFamily: \"inherit\",\r\n    fontSize: \"1rem\",\r\n    gap: icon ? \"0.5em\" : 0,\r\n    flexDirection: \"row\",\r\n    boxSizing: \"border-box\",\r\n    cursor: \"pointer\",\r\n  };\r\n\r\n  // Icon style\r\n  const iconStyle: React.CSSProperties = {\r\n    display: \"inline-flex\",\r\n    alignItems: \"center\",\r\n    height: \"1em\",\r\n    width: \"1em\",\r\n    fontSize: \"1.1em\",\r\n    verticalAlign: \"middle\",\r\n    flexShrink: 0,\r\n  };\r\n\r\n  // No delay, just set color immediately\r\n  const handleMouseEnter = () => {\r\n    setIsHovered(true);\r\n    if (hoverTextColor) {\r\n      setDelayedColor(hoverTextColor);\r\n    }\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setIsHovered(false);\r\n    setDelayedColor(undefined);\r\n  };\r\n\r\n  const handleClick = (\r\n    e: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement, MouseEvent>,\r\n  ) => {\r\n    e.preventDefault();\r\n    onClick();\r\n  };\r\n\r\n  const ButtonContent = (\r\n    <span\r\n      style={spanStyle}\r\n      onMouseEnter={handleMouseEnter}\r\n      onMouseLeave={handleMouseLeave}\r\n    >\r\n      {icon && React.cloneElement(icon, { style: iconStyle })}\r\n      {inscription}\r\n    </span>\r\n  );\r\n\r\n  const ButtonElement = href ? (\r\n    <a href={href} style={buttonStyle} onClick={handleClick}>\r\n      {ButtonContent}\r\n    </a>\r\n  ) : (\r\n    <button type=\"button\" style={buttonStyle} onClick={handleClick}>\r\n      {ButtonContent}\r\n    </button>\r\n  );\r\n\r\n  return fixedWidth ? (\r\n    <div style={containerStyle}>{ButtonElement}</div>\r\n  ) : (\r\n    ButtonElement\r\n  );\r\n};\r\n",
      "type": "registry:component"
    }
  ]
}