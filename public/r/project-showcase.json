{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "project-showcase",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "tailwind-merge",
    "framer-motion",
    ""
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/project-showcase-demo.tsx",
      "content": "\"use client\";\nimport React from \"react\";\nimport { ProjectShowCase } from \"@/components/nurui/project-showcase\";\n\nconst ProjectShowCaseDemo = () => {\n  function openInNewTab(link: string) {\n    window.open(link, \"_blank\", \"noopener,noreferrer\");\n  }\n\n  return (\n    <div className=\"p-20 rounded-lg min-h-[300px] flex flex-wrap gap-6 items-center justify-center relative\">\n      <div\n        className=\"items-center justify-center relative flex\"\n        style={{ maxWidth: \"1536px\" }}\n      >\n        <ProjectShowCase\n          testimonials={[\n            {\n              name: \"Nurui\",\n              quote:\n                'Nurui is a modern, cross-framework UI component library with CLI support for integrating responsive components.',\n              designation: \"Next.js Project\",\n              src: \"https://res.cloudinary.com/dz1fy2tof/image/upload/v1751865129/og-image_sg2pmi.png\",\n              link: \"https://nurui.vercel.app\",\n            },\n            {\n              name: \"Libra\",\n              quote:\n                \"Libra is a minimal Library Management System built with React, TypeScript, and Redux Toolkit Query, allowing users to view, create, edit, delete, and borrow books without authentication or complex setup.\",\n              designation: \"React.js Project\",\n              src: \"https://res.cloudinary.com/dz1fy2tof/image/upload/v1751865496/Libra_lwshuz.png\",\n              link: \"https://minimal-library-management-client.vercel.app\",\n            },\n            {\n              name: \"Bookify\",\n              quote:\n                \"It is a book exchange web app that allows users to easily exchange single or multiple books with others.\",\n              designation: \"Next.js Project\",\n              src: \"https://res.cloudinary.com/dz1fy2tof/image/upload/v1751865698/bookify_fh6bfi.png\",\n              link: \"https://bookify06.vercel.app/\",\n            },\n          ]}\n          colors={{\n            name: \"#3ca2fa\",\n          }}\n          fontSizes={{\n            name: \"25px\",\n          }}\n          spacing={{\n            nameTop: \"8\",\n            nameBottom: \"2\",\n            lineHeight: \"2\",\n          }}\n          halomotButtonBackground=\"#3ca2fa33\"\n          halomotButtonTextColor=\"#000\"\n          halomotButtonOuterBorderRadius=\"10px\"\n          halomotButtonInnerBorderRadius=\"10px\"\n          halomotButtonHoverTextColor=\"#fff\"\n          onItemClick={openInNewTab}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectShowCaseDemo;\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/project-showcase.tsx",
      "content": "\"use client\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport Image from \"next/image\";\nimport { useEffect, useState, useCallback, useRef } from \"react\";\nimport { HalomotButton } from \"@/components/nurui/halomot-button\";\n\ntype Testimonial = {\n  quote: string;\n  name: string;\n  designation: string;\n  src: string;\n  link?: string;\n};\n\ntype ProjectShowcaseProps = {\n  testimonials: Testimonial[];\n  autoplay?: boolean;\n  colors?: { name?: string; position?: string; testimony?: string };\n  fontSizes?: { name?: string; position?: string; testimony?: string };\n  spacing?: {\n    top?: string;\n    bottom?: string;\n    lineHeight?: string;\n    nameTop?: string;\n    nameBottom?: string;\n    positionTop?: string;\n    positionBottom?: string;\n    testimonyTop?: string;\n    testimonyBottom?: string;\n  };\n  desktopVersionBottomThreshold?: number;\n  maxImageWidth?: number;\n  imageWidthPercentage?: number;\n  mobile?: {\n    fontSizes?: { name?: string; position?: string; testimony?: string };\n    spacing?: {\n      top?: string;\n      bottom?: string;\n      lineHeight?: string;\n      nameTop?: string;\n      nameBottom?: string;\n      positionTop?: string;\n      positionBottom?: string;\n      testimonyTop?: string;\n      testimonyBottom?: string;\n    };\n  };\n  imageAspectRatio?: number;\n  isRTL?: boolean;\n  onItemClick?: (link: string) => void;\n  outerRounding?: string;\n  innerRounding?: string;\n  outlineColor?: string;\n  hoverOutlineColor?: string;\n  buttonInscriptions?: {\n    previousButton: string;\n    nextButton: string;\n    openWebAppButton: string;\n  };\n  halomotButtonGradient?: string;\n  halomotButtonBackground?: string;\n  halomotButtonTextColor?: string;\n  halomotButtonOuterBorderRadius?: string;\n  halomotButtonInnerBorderRadius?: string;\n  halomotButtonHoverTextColor?: string;\n};\n\nexport const ProjectShowCase = ({\n  testimonials,\n  autoplay = false,\n  colors = { name: \"#fff\", position: \"gray-500\", testimony: \"gray-500\" },\n  fontSizes = { name: \"2xl\", position: \"sm\", testimony: \"lg\" },\n  spacing = {\n    top: \"20\",\n    bottom: \"20\",\n    lineHeight: \"1.5\",\n    nameTop: \"0\",\n    nameBottom: \"0.5em\",\n    positionTop: \"0\",\n    positionBottom: \"0.25em\",\n    testimonyTop: \"1em\",\n    testimonyBottom: \"1em\"\n  },\n  desktopVersionBottomThreshold = 1024,\n  mobile = {},\n  imageAspectRatio = 1.37,\n  isRTL = false,\n  onItemClick,\n  outerRounding = \"18.2px\",\n  innerRounding = \"18px\",\n  outlineColor = \"#33313d\",\n  hoverOutlineColor = \"#403d4d\",\n  buttonInscriptions = {\n    previousButton: \"Previous\",\n    nextButton: \"Next\",\n    openWebAppButton: \"Open Web App\"\n  },\n  halomotButtonGradient = \"linear-gradient(to right, #a123f4, #603dec)\",\n  halomotButtonBackground = \"#111014\",\n  halomotButtonTextColor = \"#fff\",\n  halomotButtonOuterBorderRadius = \"6.34px\",\n  halomotButtonInnerBorderRadius = \"6px\",\n  halomotButtonHoverTextColor\n}: ProjectShowcaseProps) => {\n  const [active, setActive] = useState(0);\n  const [isMobileView, setIsMobileView] = useState(false);\n  const [componentWidth, setComponentWidth] = useState(0);\n  const componentRef = useRef<HTMLDivElement>(null);\n\n  // Use Mobile Config (with defaults)\n  const currentFontSizes =\n    isMobileView && mobile.fontSizes ? mobile.fontSizes : fontSizes;\n  const currentSpacing = {\n    ...spacing,\n    ...(isMobileView && mobile.spacing ? mobile.spacing : {})\n  };\n\n  const handleNext = useCallback(() => {\n    setActive((prev) => (prev + 1) % testimonials.length);\n  }, [testimonials.length]);\n\n  const handlePrev = () => {\n    setActive((prev) => (prev - 1 + testimonials.length) % testimonials.length);\n  };\n\n  const isActive = (index: number) => {\n    return index === active;\n  };\n\n  useEffect(() => {\n    if (autoplay) {\n      const interval = setInterval(handleNext, 5000);\n      return () => clearInterval(interval);\n    }\n  }, [autoplay, handleNext]);\n\n  const handleResize = useCallback(() => {\n    if (componentRef.current) {\n      setComponentWidth(componentRef.current.offsetWidth);\n      setIsMobileView(\n        componentRef.current.offsetWidth < desktopVersionBottomThreshold\n      );\n    }\n  }, [desktopVersionBottomThreshold]);\n\n  useEffect(() => {\n    const node = componentRef.current;\n    const resizeObserver = new ResizeObserver(handleResize);\n    if (node) {\n      resizeObserver.observe(node);\n    }\n    handleResize(); // Initial check\n    return () => {\n      if (node) {\n        resizeObserver.unobserve(node);\n      }\n    };\n  }, [handleResize]);\n\n  const randomRotateY = () => {\n    return Math.floor(Math.random() * 21) - 10;\n  };\n\n  const calculateGap = (width: number) => {\n    const minWidth = 1024;\n    const maxWidth = 1456;\n    const minGap = 60;\n    const maxGap = 86;\n    if (width <= minWidth) return minGap;\n    if (width >= maxWidth)\n      return Math.max(minGap, maxGap + 0.06018 * (width - maxWidth));\n    return (\n      minGap + (maxGap - minGap) * ((width - minWidth) / (maxWidth - minWidth))\n    );\n  };\n\n  return (\n    <div\n      ref={componentRef}\n      className={`w-full mx-auto antialiased font-sans py-${currentSpacing.top} pb-${currentSpacing.bottom}`}\n      style={{\n        lineHeight: currentSpacing.lineHeight,\n        backgroundColor: \"transparent\",\n        direction: isRTL ? \"rtl\" : \"ltr\"\n      }}\n    >\n      <div\n        className=\"relative\"\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: isMobileView\n            ? \"1fr\"\n            : isRTL\n            ? \"1fr 1fr\"\n            : \"1fr 1fr\",\n          gap: `${calculateGap(componentWidth)}px`\n        }}\n      >\n        {isRTL && !isMobileView ? (\n          <>\n            <div className=\"w-full\">\n              <div\n                className=\"relative\"\n                style={{ paddingTop: `${(1 / imageAspectRatio) * 100}%` }}\n              >\n                <AnimatePresence>\n                  {testimonials.map((testimonial, index) => (\n                    <motion.div\n                      key={testimonial.src}\n                      initial={{\n                        opacity: 0,\n                        scale: 0.9,\n                        z: -100,\n                        rotate: randomRotateY()\n                      }}\n                      animate={{\n                        opacity: isActive(index) ? 1 : 0.7,\n                        scale: isActive(index) ? 1 : 0.95,\n                        z: isActive(index) ? 0 : -100,\n                        rotate: isActive(index) ? 0 : randomRotateY(),\n                        zIndex: isActive(index)\n                          ? 999\n                          : testimonials.length + 2 - index,\n                        y: isActive(index) ? [0, -80, 0] : 0\n                      }}\n                      exit={{\n                        opacity: 0,\n                        scale: 0.9,\n                        z: 100,\n                        rotate: randomRotateY()\n                      }}\n                      transition={{ duration: 0.4, ease: \"easeInOut\" }}\n                      className=\"absolute inset-0 origin-bottom\"\n                    >\n                      <ImageContainer\n                        src={testimonial.src}\n                        alt={testimonial.name}\n                        outerRounding={outerRounding}\n                        innerRounding={innerRounding}\n                        outlineColor={outlineColor}\n                        hoverOutlineColor={hoverOutlineColor}\n                      />\n                    </motion.div>\n                  ))}\n                </AnimatePresence>\n              </div>\n            </div>\n            <div className=\"flex justify-between flex-col py-4 w-full\">\n              <motion.div\n                key={active}\n                initial={{ y: 20, opacity: 0 }}\n                animate={{ y: 0, opacity: 1 }}\n                exit={{ y: -20, opacity: 0 }}\n                transition={{ duration: 0.2, ease: \"easeInOut\" }}\n              >\n                <h3\n                  className={`font-bold`}\n                  style={{\n                    fontSize: currentFontSizes.name,\n                    color: colors.name,\n                    marginTop: currentSpacing.nameTop,\n                    marginBottom: currentSpacing.nameBottom,\n                    textAlign: \"right\"\n                  }}\n                >\n                  {testimonials[active].name}\n                </h3>\n                <p\n                  style={{\n                    fontSize: currentFontSizes.position,\n                    color: colors.position,\n                    marginTop: currentSpacing.positionTop,\n                    marginBottom: currentSpacing.positionBottom,\n                    textAlign: \"right\"\n                  }}\n                >\n                  {testimonials[active].designation}\n                </p>\n                <motion.p\n                  style={{\n                    fontSize: currentFontSizes.testimony,\n                    color: colors.testimony,\n                    marginTop: currentSpacing.testimonyTop,\n                    marginBottom: currentSpacing.testimonyBottom,\n                    textAlign: \"right\"\n                  }}\n                >\n                  {testimonials[active].quote.split(\" \").map((word, index) => (\n                    <motion.span\n                      key={index}\n                      initial={{ filter: \"blur(10px)\", opacity: 0, y: 5 }}\n                      animate={{\n                        filter: \"blur(0px)\",\n                        opacity: 1,\n                        y: 0\n                      }}\n                      transition={{\n                        duration: 0.2,\n                        ease: \"easeInOut\",\n                        delay: 0.02 * index\n                      }}\n                      className=\"inline-block\"\n                    >\n                      {word}&nbsp;\n                    </motion.span>\n                  ))}\n                </motion.p>\n              </motion.div>\n              <div\n                className={`flex gap-4 ${\n                  isMobileView ? \"pt-12\" : \"md:pt-0\"\n                } w-full`}\n                style={{ justifyContent: \"flex-start\" }}\n              >\n                <HalomotButton\n                  inscription={buttonInscriptions.previousButton}\n                  onClick={handlePrev}\n                  fixedWidth=\"172px\"\n                  gradient={halomotButtonGradient}\n                  backgroundColor={halomotButtonBackground}\n                  textColor={halomotButtonTextColor}\n                  innerBorderRadius={halomotButtonInnerBorderRadius}\n                  outerBorderRadius={halomotButtonOuterBorderRadius}\n                  {...(halomotButtonHoverTextColor\n                    ? { hoverTextColor: halomotButtonHoverTextColor }\n                    : {})}\n                />\n                <HalomotButton\n                  inscription={buttonInscriptions.nextButton}\n                  onClick={handleNext}\n                  fixedWidth=\"172px\"\n                  gradient={halomotButtonGradient}\n                  backgroundColor={halomotButtonBackground}\n                  textColor={halomotButtonTextColor}\n                  innerBorderRadius={halomotButtonInnerBorderRadius}\n                  outerBorderRadius={halomotButtonOuterBorderRadius}\n                  {...(halomotButtonHoverTextColor\n                    ? { hoverTextColor: halomotButtonHoverTextColor }\n                    : {})}\n                />\n                <HalomotButton\n                  inscription={buttonInscriptions.openWebAppButton}\n                  onClick={() =>\n                    onItemClick && onItemClick(testimonials[active].link || \"\")\n                  }\n                  fillWidth\n                  gradient={halomotButtonGradient}\n                  backgroundColor={halomotButtonBackground}\n                  textColor={halomotButtonTextColor}\n                  innerBorderRadius={halomotButtonInnerBorderRadius}\n                  outerBorderRadius={halomotButtonOuterBorderRadius}\n                  {...(halomotButtonHoverTextColor\n                    ? { hoverTextColor: halomotButtonHoverTextColor }\n                    : {})}\n                  href={testimonials[active].link}\n                />\n              </div>\n            </div>\n          </>\n        ) : (\n          <>\n            <div className=\"w-full\">\n              <div\n                className=\"relative\"\n                style={{ paddingTop: `${(1 / imageAspectRatio) * 100}%` }}\n              >\n                <AnimatePresence>\n                  {testimonials.map((testimonial, index) => (\n                    <motion.div\n                      key={testimonial.src}\n                      initial={{\n                        opacity: 0,\n                        scale: 0.9,\n                        z: -100,\n                        rotate: randomRotateY()\n                      }}\n                      animate={{\n                        opacity: isActive(index) ? 1 : 0.7,\n                        scale: isActive(index) ? 1 : 0.95,\n                        z: isActive(index) ? 0 : -100,\n                        rotate: isActive(index) ? 0 : randomRotateY(),\n                        zIndex: isActive(index)\n                          ? 999\n                          : testimonials.length + 2 - index,\n                        y: isActive(index) ? [0, -80, 0] : 0\n                      }}\n                      exit={{\n                        opacity: 0,\n                        scale: 0.9,\n                        z: 100,\n                        rotate: randomRotateY()\n                      }}\n                      transition={{ duration: 0.4, ease: \"easeInOut\" }}\n                      className=\"absolute inset-0 origin-bottom\"\n                    >\n                      <ImageContainer\n                        src={testimonial.src}\n                        alt={testimonial.name}\n                        outerRounding={outerRounding}\n                        innerRounding={innerRounding}\n                        outlineColor={outlineColor}\n                        hoverOutlineColor={hoverOutlineColor}\n                      />\n                    </motion.div>\n                  ))}\n                </AnimatePresence>\n              </div>\n            </div>\n            <div className=\"flex justify-between flex-col py-4 w-full\">\n              <motion.div\n                key={active}\n                initial={{ y: 20, opacity: 0 }}\n                animate={{ y: 0, opacity: 1 }}\n                exit={{ y: -20, opacity: 0 }}\n                transition={{ duration: 0.2, ease: \"easeInOut\" }}\n              >\n                <h3\n                  className={`font-bold`}\n                  style={{\n                    fontSize: currentFontSizes.name,\n                    color: colors.name,\n                    marginTop: currentSpacing.nameTop,\n                    marginBottom: currentSpacing.nameBottom\n                  }}\n                >\n                  {testimonials[active].name}\n                </h3>\n                <p\n                  style={{\n                    fontSize: currentFontSizes.position,\n                    color: colors.position,\n                    marginTop: currentSpacing.positionTop,\n                    marginBottom: currentSpacing.positionBottom\n                  }}\n                >\n                  {testimonials[active].designation}\n                </p>\n                <motion.p\n                  style={{\n                    fontSize: currentFontSizes.testimony,\n                    color: colors.testimony,\n                    marginTop: currentSpacing.testimonyTop,\n                    marginBottom: currentSpacing.testimonyBottom\n                  }}\n                >\n                  {testimonials[active].quote.split(\" \").map((word, index) => (\n                    <motion.span\n                      key={index}\n                      initial={{ filter: \"blur(10px)\", opacity: 0, y: 5 }}\n                      animate={{\n                        filter: \"blur(0px)\",\n                        opacity: 1,\n                        y: 0\n                      }}\n                      transition={{\n                        duration: 0.2,\n                        ease: \"easeInOut\",\n                        delay: 0.02 * index\n                      }}\n                      className=\"inline-block\"\n                    >\n                      {word}&nbsp;\n                    </motion.span>\n                  ))}\n                </motion.p>\n              </motion.div>\n              <div\n                className={`flex gap-4 ${\n                  isMobileView ? \"pt-12\" : \"md:pt-0\"\n                } w-full`}\n              >\n                <HalomotButton\n                  inscription={buttonInscriptions.previousButton}\n                  onClick={handlePrev}\n                  fixedWidth=\"172px\"\n                  gradient={halomotButtonGradient}\n                  backgroundColor={halomotButtonBackground}\n                  textColor={halomotButtonTextColor}\n                  innerBorderRadius={halomotButtonInnerBorderRadius}\n                  outerBorderRadius={halomotButtonOuterBorderRadius}\n                  {...(halomotButtonHoverTextColor\n                    ? { hoverTextColor: halomotButtonHoverTextColor }\n                    : {})}\n                />\n                <HalomotButton\n                  inscription={buttonInscriptions.nextButton}\n                  onClick={handleNext}\n                  fixedWidth=\"172px\"\n                  gradient={halomotButtonGradient}\n                  backgroundColor={halomotButtonBackground}\n                  textColor={halomotButtonTextColor}\n                  innerBorderRadius={halomotButtonInnerBorderRadius}\n                  outerBorderRadius={halomotButtonOuterBorderRadius}\n                  {...(halomotButtonHoverTextColor\n                    ? { hoverTextColor: halomotButtonHoverTextColor }\n                    : {})}\n                />\n                <HalomotButton\n                  inscription={buttonInscriptions.openWebAppButton}\n                  onClick={() =>\n                    onItemClick && onItemClick(testimonials[active].link || \"\")\n                  }\n                  fillWidth\n                  gradient={halomotButtonGradient}\n                  backgroundColor={halomotButtonBackground}\n                  textColor={halomotButtonTextColor}\n                  innerBorderRadius={halomotButtonInnerBorderRadius}\n                  outerBorderRadius={halomotButtonOuterBorderRadius}\n                  {...(halomotButtonHoverTextColor\n                    ? { hoverTextColor: halomotButtonHoverTextColor }\n                    : {})}\n                  href={testimonials[active].link}\n                />\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\ntype ImageContainerProps = {\n  src: string;\n  alt: string;\n  outerRounding: string;\n  innerRounding: string;\n  outlineColor: string;\n  hoverOutlineColor: string;\n};\n\nconst ImageContainer = ({\n  src,\n  alt,\n  outerRounding,\n  innerRounding,\n  outlineColor,\n  hoverOutlineColor\n}: ImageContainerProps) => (\n  <div\n    className=\"relative h-full w-full project-showcase-image-container\"\n    style={{\n      borderRadius: outerRounding,\n      padding: \"1px\",\n      backgroundColor: outlineColor,\n      transition: \"background-color 0.3s ease-in-out\"\n    }}\n  >\n    <div\n      className=\"relative h-full w-full overflow-hidden\"\n      style={{\n        borderRadius: innerRounding\n      }}\n    >\n      <Image\n        src={src}\n        alt={alt}\n        layout=\"fill\"\n        draggable={false}\n        className=\"h-full w-full object-fill object-center\"\n        unoptimized\n      />\n    </div>\n    <style jsx>{`\n      .project-showcase-image-container:hover {\n        background-color: ${hoverOutlineColor} !important;\n      }\n    `}</style>\n  </div>\n);\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/halomot-button.tsx",
      "content": "\"use client\";\nimport React, { useState } from \"react\";\n\ninterface HalomotButtonProps {\n  gradient?: string; // Gradient for the button border/background\n  inscription: string; // Button text\n  onClick: () => void;\n  fillWidth?: boolean;\n  fixedWidth?: string;\n  href?: string;\n  backgroundColor?: string; // Solid color for the inner button (not gradient)\n  icon?: React.ReactElement<React.HTMLAttributes<HTMLElement>>;\n  borderWidth?: string; // Controls the padding (thickness of the gradient border)\n  padding?: string; // Custom padding for the inner button, e.g., \"1rem 4rem\"\n  outerBorderRadius?: string; // Border radius for the gradient outer border\n  innerBorderRadius?: string; // Border radius for the inner button\n  textColor?: string; // Text color for the button, default #fff\n  hoverTextColor?: string;\n}\n\nexport const HalomotButton: React.FC<HalomotButtonProps> = ({\n  gradient = \"linear-gradient(135deg, #4776cb, #a19fe5, #6cc606)\",\n  inscription,\n  onClick,\n  fillWidth = false,\n  fixedWidth,\n  href,\n  backgroundColor = \"#fff\",\n  icon,\n  borderWidth = \"1px\",\n  padding,\n  outerBorderRadius = \"6.34px\",\n  innerBorderRadius = \"6px\",\n  textColor = \"#000\",\n  hoverTextColor,\n}) => {\n  const [isHovered, setIsHovered] = useState(false);\n  const [delayedColor, setDelayedColor] = useState<string | undefined>(\n    undefined,\n  );\n\n  // Container style for fixed width\n  const containerStyle: React.CSSProperties = fixedWidth\n    ? { width: fixedWidth, display: \"inline-block\" }\n    : {};\n\n  // Outer button style (gradient border)\n  const buttonStyle: React.CSSProperties = {\n    margin: fillWidth || fixedWidth ? \"0\" : \"auto\",\n    padding: borderWidth,\n    background: gradient,\n    border: \"0\",\n    borderRadius: outerBorderRadius,\n    color: textColor,\n    fontWeight: \"bold\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    textDecoration: \"none\",\n    userSelect: \"none\",\n    WebkitUserSelect: \"none\",\n    whiteSpace: \"nowrap\",\n    transition: \"all .3s\",\n    width: fillWidth || fixedWidth ? \"100%\" : \"fit-content\",\n    flexDirection: \"row\",\n    boxSizing: \"border-box\",\n  };\n\n  // Inner span style (actual clickable area)\n  const spanStyle: React.CSSProperties = {\n    background: isHovered ? \"none\" : backgroundColor,\n    padding: padding ?? (fillWidth || fixedWidth ? \"1rem 0\" : \"1rem 4rem\"),\n    border: \"0\",\n    borderRadius: innerBorderRadius,\n    width: \"100%\",\n    height: \"100%\",\n    transition: hoverTextColor\n      ? \"color 0.3s, background 300ms\"\n      : \"background 300ms\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    fontWeight: \"bold\",\n    color: delayedColor ? delayedColor : textColor,\n    whiteSpace: \"nowrap\",\n    fontFamily: \"inherit\",\n    fontSize: \"1rem\",\n    gap: icon ? \"0.5em\" : 0,\n    flexDirection: \"row\",\n    boxSizing: \"border-box\",\n    cursor: \"pointer\",\n  };\n\n  // Icon style\n  const iconStyle: React.CSSProperties = {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    height: \"1em\",\n    width: \"1em\",\n    fontSize: \"1.1em\",\n    verticalAlign: \"middle\",\n    flexShrink: 0,\n  };\n\n  // No delay, just set color immediately\n  const handleMouseEnter = () => {\n    setIsHovered(true);\n    if (hoverTextColor) {\n      setDelayedColor(hoverTextColor);\n    }\n  };\n\n  const handleMouseLeave = () => {\n    setIsHovered(false);\n    setDelayedColor(undefined);\n  };\n\n  const handleClick = (\n    e: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement, MouseEvent>,\n  ) => {\n    e.preventDefault();\n    onClick();\n  };\n\n  const ButtonContent = (\n    <span\n      style={spanStyle}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      {icon && React.cloneElement(icon, { style: iconStyle })}\n      {inscription}\n    </span>\n  );\n\n  const ButtonElement = href ? (\n    <a href={href} style={buttonStyle} onClick={handleClick}>\n      {ButtonContent}\n    </a>\n  ) : (\n    <button type=\"button\" style={buttonStyle} onClick={handleClick}>\n      {ButtonContent}\n    </button>\n  );\n\n  return fixedWidth ? (\n    <div style={containerStyle}>{ButtonElement}</div>\n  ) : (\n    ButtonElement\n  );\n};\n",
      "type": "registry:component"
    }
  ]
}