{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "neobrutalism-faq",
  "type": "registry:component",
  "dependencies": [
    "react-icons"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/glassy-faq-demo.tsx",
      "content": "import React from \"react\";\nimport GlassyFaq from \"@/components/nurui/glassy-faq\";\n\nconst GlassyFaqDemo = () => {\n  return (\n    <div className=\"py-16 px-10\">\n      <GlassyFaq></GlassyFaq>\n    </div>\n  );\n};\n\nexport default GlassyFaqDemo;\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/glassy-faq.tsx",
      "content": "\"use client\";\nimport QuestionAnswer from \"@/components/nurui/question-answer\";\nimport { useState } from \"react\";\n\nconst GlassyFaq = () => {\n  const [openKey, setOpenKey] = useState<number>(1);\n  const [activeCategoryKey, setActiveCategoryKey] = useState<number>(1);\n\n  const roundedButton = (id: number, category: string) => (\n    <button\n      key={id}\n      className={`${\n        activeCategoryKey === id\n          ? \"bg-[var(--glass-color-3)] text-[var(--white-color)] border border-[var(--glass-color-3)]\"\n          : \"border border-[var(--border-color)]\"\n      } font-semibold cursor-pointer rounded-full px-3.5 py-2.5 capitalize text-xl`}\n      onClick={() => setActiveCategoryKey(id)}\n    >\n      {category}\n    </button>\n  );\n\n  return (\n    <section className=\"container flex flex-col xl:flex-row gap-10 xl:gap-20\">\n      {/* title and action's button */}\n      <div className=\"xl:w-1/3 space-y-5 text-center xl:text-start\">\n        <h3 className=\"text-4xl xl:text-5xl font-bold\">FAQs</h3>\n        <p className=\"text-xl\">\n          Everything you need to know about features, membership, and\n          troubleshooting.\n        </p>\n        <div className=\"flex flex-wrap justify-center xl:justify-start gap-x-4 gap-y-5 pt-1\">\n          {faqsData.map((data) => roundedButton(data?.id, data?.category))}\n        </div>\n      </div>\n      {/* question and answer */}\n      <div className=\"xl:w-2/3 space-y-5\">\n        {faqsData?.[activeCategoryKey - 1]?.questions?.map((faqData, i) => (\n          <QuestionAnswer\n            key={i}\n            questionNumber={faqData?.number}\n            question={faqData?.question}\n            answer={faqData?.answer}\n            openKey={openKey}\n            setOpenKey={() =>\n              setOpenKey(faqData?.number === openKey ? 0 : faqData?.number)\n            }\n          />\n        ))}\n      </div>\n    </section>\n  );\n};\n\nexport default GlassyFaq;\n\nconst faqsData = [\n  {\n    category: \"Getting Started\",\n    id: 1,\n    questions: [\n      {\n        number: 1,\n        question: \"What is NurUI?\",\n        answer:\n          \"NurUI is a modern, developer-focused UI component library for React and Next.js. It provides reusable, customizable components designed to speed up your development workflow.\",\n      },\n      {\n        number: 2,\n        question: \"How do I install NurUI?\",\n        answer:\n          \"You can install components directly using our CLI with `npx nurui add <component-name>`. This will generate the component in your project folder.\",\n      },\n      {\n        number: 3,\n        question: \"Do I need to configure anything after installation?\",\n        answer:\n          \"Minimal setup may be required, such as Tailwind configuration or importing global styles. Check the documentation for exact steps.\",\n      },\n      {\n        number: 4,\n        question: \"Is NurUI free to use?\",\n        answer:\n          \"Yes, all core components of NurUI are completely free and open-source. A Pro version with additional templates and tools is planned.\",\n      },\n      {\n        number: 5,\n        question: \"Which frameworks are supported?\",\n        answer:\n          \"NurUI is optimized for React and Next.js. Support for additional frameworks is under consideration.\",\n      },\n    ],\n  },\n  {\n    category: \"Integration\",\n    id: 2,\n    questions: [\n      {\n        number: 1,\n        question: \"Can I use NurUI with Tailwind CSS?\",\n        answer:\n          \"Yes. NurUI is built to work perfectly with Tailwind CSS. All components use utility-first classes for easy customization.\",\n      },\n      {\n        number: 2,\n        question: \"Is NurUI compatible with design tools like Figma?\",\n        answer:\n          \"Figma kits are in development to help bridge the gap between design and code. Stay tuned for updates.\",\n      },\n      {\n        number: 3,\n        question: \"Does NurUI support TypeScript?\",\n        answer:\n          \"Yes. NurUI components are fully typed and provide excellent support for TypeScript with type safety and autocomplete.\",\n      },\n      {\n        number: 4,\n        question: \"How customizable are the components?\",\n        answer:\n          \"NurUI components are fully customizable. You can use props, Tailwind utility classes, or directly modify the generated component code.\",\n      },\n      {\n        number: 5,\n        question: \"Can I use NurUI with server-side rendering?\",\n        answer:\n          \"Absolutely. NurUI is SSR-friendly and integrates smoothly with frameworks like Next.js.\",\n      },\n    ],\n  },\n  {\n    category: \"Components\",\n    id: 3,\n    questions: [\n      {\n        number: 1,\n        question: \"What components are available in NurUI?\",\n        answer:\n          \"NurUI includes a wide range of components such as buttons, modals, cards, inputs, tabs, accordions, and animation elements â€” with more added regularly.\",\n      },\n      {\n        number: 2,\n        question: \"Are components mobile-friendly?\",\n        answer:\n          \"Yes, every component in NurUI is responsive by default and follows a mobile-first approach.\",\n      },\n      {\n        number: 3,\n        question: \"Can I animate components?\",\n        answer:\n          \"Yes. Many components include animations out of the box, and NurUI supports integration with libraries like Framer Motion for advanced animation needs.\",\n      },\n      {\n        number: 4,\n        question: \"Can I create or extend custom components?\",\n        answer:\n          \"Definitely. NurUI encourages you to extend and create your own components using our base structure and design tokens.\",\n      },\n      {\n        number: 5,\n        question: \"Is accessibility supported?\",\n        answer:\n          \"Yes. NurUI follows accessibility best practices, including ARIA roles and keyboard navigation where appropriate.\",\n      },\n    ],\n  },\n  {\n    category: \"Documentation\",\n    id: 4,\n    questions: [\n      {\n        number: 1,\n        question: \"Where can I find NurUI documentation?\",\n        answer:\n          \"The full documentation, including setup guides and examples, is available on the NurUI website.\",\n      },\n      {\n        number: 2,\n        question: \"Is there support available?\",\n        answer:\n          \"Yes. You can get community support on GitHub and Discord. Premium support will be available with NurUI Pro.\",\n      },\n      {\n        number: 3,\n        question: \"Do you maintain a changelog?\",\n        answer:\n          \"Yes. Every update is tracked in a public changelog available on GitHub.\",\n      },\n      {\n        number: 4,\n        question: \"Can I contribute to NurUI?\",\n        answer:\n          \"Yes, contributions are welcome! Fork the repo, make your changes, and open a pull request.\",\n      },\n      {\n        number: 5,\n        question: \"Are there starter templates or previews?\",\n        answer:\n          \"Yes. NurUI includes starter templates and v0 live previews to help you quickly build and test UI ideas.\",\n      },\n    ],\n  },\n  {\n    category: \"CLI & Licensing\",\n    id: 5,\n    questions: [\n      {\n        number: 1,\n        question: \"Does NurUI have a CLI?\",\n        answer:\n          \"Yes! NurUI comes with a powerful CLI. You can scaffold components into your project with commands like `npx nurui add button`.\",\n      },\n      {\n        number: 2,\n        question: \"Does the CLI support TS to JS conversion?\",\n        answer:\n          \"Yes. The CLI detects your project type and generates components in either TypeScript or JavaScript based on your setup.\",\n      },\n      {\n        number: 3,\n        question: \"Is NurUI open-source?\",\n        answer:\n          \"Yes. NurUI is open-source and MIT-licensed, which means you can use it freely in personal and commercial projects.\",\n      },\n      {\n        number: 4,\n        question: \"Will there be a Pro version?\",\n        answer:\n          \"Yes. A Pro version with premium templates, animations, and design resources is planned for the near future.\",\n      },\n      {\n        number: 5,\n        question: \"Can I use NurUI in client and commercial projects?\",\n        answer:\n          \"Yes, you can use both the free and Pro versions of NurUI in client, SaaS, and commercial applications.\",\n      },\n    ],\n  },\n];\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/question-answer.tsx",
      "content": "import { FC } from \"react\";\nimport { SlArrowDown, SlArrowUp } from \"react-icons/sl\";\n\ninterface PropsType {\n  question: string;\n  answer: string;\n  questionNumber: number;\n  setOpenKey: () => void;\n  openKey: number;\n}\n\nconst QuestionAnswer: FC<PropsType> = ({\n  question,\n  answer,\n  questionNumber,\n  openKey,\n  setOpenKey,\n}) => {\n  return (\n    <div className=\"bg-[var(--primary-color-2)] dark:bg-[var(--primary-color-4)] rounded-xl \">\n      <div\n        className=\"flex items-center justify-between gap-1 pl-2 lg:pl-6 pr-4 py-6 border border-[var(--primary-color)] rounded-xl cursor-pointer\"\n        onClick={() => setOpenKey()}\n      >\n        <h6 className=\"lg:text-lg font-semibold\">\n          <span>{questionNumber}</span>. <span>{question}</span>\n        </h6>\n        <button>\n          {openKey === questionNumber ? (\n            <SlArrowDown className=\"cursor-pointer text-[var(--primary-color)]\" />\n          ) : (\n            <SlArrowUp className=\"cursor-pointer text-[var(--primary-color)]\" />\n          )}\n        </button>\n      </div>\n      {openKey === questionNumber && (\n        <p className=\"p-2 lg:p-5 text-[17px] leading-relaxed text-[var(--opacity-text-color)] text-balance lg:text-pretty\">\n          {answer}\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default QuestionAnswer;\n",
      "type": "registry:component"
    }
  ]
}