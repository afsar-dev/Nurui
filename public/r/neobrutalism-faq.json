{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "neobrutalism-faq",
  "type": "registry:component",
  "dependencies": [
    "react-icons"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/glassy-faq-demo.tsx",
      "content": "import React from \"react\";\r\nimport GlassyFaq from \"@/components/nurui/glassy-faq\";\r\n\r\nconst GlassyFaqDemo = () => {\r\n  return (\r\n    <div className=\"py-16 px-10\">\r\n      <GlassyFaq></GlassyFaq>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GlassyFaqDemo;\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/glassy-faq.tsx",
      "content": "\"use client\";\r\nimport QuestionAnswer from \"@/components/nurui/question-answer\";\r\nimport { useState } from \"react\";\r\n\r\nconst GlassyFaq = () => {\r\n  const [openKey, setOpenKey] = useState<number>(1);\r\n  const [activeCategoryKey, setActiveCategoryKey] = useState<number>(1);\r\n\r\n  const roundedButton = (id: number, category: string) => (\r\n    <button\r\n      key={id}\r\n      className={`${\r\n        activeCategoryKey === id\r\n          ? \"bg-[var(--glass-color-3)] text-[var(--white-color)] border border-[var(--glass-color-3)]\"\r\n          : \"border border-[var(--border-color)]\"\r\n      } font-semibold cursor-pointer rounded-full px-3.5 py-2.5 capitalize text-xl`}\r\n      onClick={() => setActiveCategoryKey(id)}\r\n    >\r\n      {category}\r\n    </button>\r\n  );\r\n\r\n  return (\r\n    <section className=\"container flex flex-col xl:flex-row gap-10 xl:gap-20\">\r\n      {/* title and action's button */}\r\n      <div className=\"xl:w-1/3 space-y-5 text-center xl:text-start\">\r\n        <h3 className=\"text-4xl xl:text-5xl font-bold\">FAQs</h3>\r\n        <p className=\"text-xl\">\r\n          Everything you need to know about features, membership, and\r\n          troubleshooting.\r\n        </p>\r\n        <div className=\"flex flex-wrap justify-center xl:justify-start gap-x-4 gap-y-5 pt-1\">\r\n          {faqsData.map((data) => roundedButton(data?.id, data?.category))}\r\n        </div>\r\n      </div>\r\n      {/* question and answer */}\r\n      <div className=\"xl:w-2/3 space-y-5\">\r\n        {faqsData?.[activeCategoryKey - 1]?.questions?.map((faqData, i) => (\r\n          <QuestionAnswer\r\n            key={i}\r\n            questionNumber={faqData?.number}\r\n            question={faqData?.question}\r\n            answer={faqData?.answer}\r\n            openKey={openKey}\r\n            setOpenKey={() =>\r\n              setOpenKey(faqData?.number === openKey ? 0 : faqData?.number)\r\n            }\r\n          />\r\n        ))}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default GlassyFaq;\r\n\r\nconst faqsData = [\r\n  {\r\n    category: \"Getting Started\",\r\n    id: 1,\r\n    questions: [\r\n      {\r\n        number: 1,\r\n        question: \"What is NurUI?\",\r\n        answer:\r\n          \"NurUI is a modern, developer-focused UI component library for React and Next.js. It provides reusable, customizable components designed to speed up your development workflow.\",\r\n      },\r\n      {\r\n        number: 2,\r\n        question: \"How do I install NurUI?\",\r\n        answer:\r\n          \"You can install components directly using our CLI with `npx nurui add <component-name>`. This will generate the component in your project folder.\",\r\n      },\r\n      {\r\n        number: 3,\r\n        question: \"Do I need to configure anything after installation?\",\r\n        answer:\r\n          \"Minimal setup may be required, such as Tailwind configuration or importing global styles. Check the documentation for exact steps.\",\r\n      },\r\n      {\r\n        number: 4,\r\n        question: \"Is NurUI free to use?\",\r\n        answer:\r\n          \"Yes, all core components of NurUI are completely free and open-source. A Pro version with additional templates and tools is planned.\",\r\n      },\r\n      {\r\n        number: 5,\r\n        question: \"Which frameworks are supported?\",\r\n        answer:\r\n          \"NurUI is optimized for React and Next.js. Support for additional frameworks is under consideration.\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    category: \"Integration\",\r\n    id: 2,\r\n    questions: [\r\n      {\r\n        number: 1,\r\n        question: \"Can I use NurUI with Tailwind CSS?\",\r\n        answer:\r\n          \"Yes. NurUI is built to work perfectly with Tailwind CSS. All components use utility-first classes for easy customization.\",\r\n      },\r\n      {\r\n        number: 2,\r\n        question: \"Is NurUI compatible with design tools like Figma?\",\r\n        answer:\r\n          \"Figma kits are in development to help bridge the gap between design and code. Stay tuned for updates.\",\r\n      },\r\n      {\r\n        number: 3,\r\n        question: \"Does NurUI support TypeScript?\",\r\n        answer:\r\n          \"Yes. NurUI components are fully typed and provide excellent support for TypeScript with type safety and autocomplete.\",\r\n      },\r\n      {\r\n        number: 4,\r\n        question: \"How customizable are the components?\",\r\n        answer:\r\n          \"NurUI components are fully customizable. You can use props, Tailwind utility classes, or directly modify the generated component code.\",\r\n      },\r\n      {\r\n        number: 5,\r\n        question: \"Can I use NurUI with server-side rendering?\",\r\n        answer:\r\n          \"Absolutely. NurUI is SSR-friendly and integrates smoothly with frameworks like Next.js.\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    category: \"Components\",\r\n    id: 3,\r\n    questions: [\r\n      {\r\n        number: 1,\r\n        question: \"What components are available in NurUI?\",\r\n        answer:\r\n          \"NurUI includes a wide range of components such as buttons, modals, cards, inputs, tabs, accordions, and animation elements â€” with more added regularly.\",\r\n      },\r\n      {\r\n        number: 2,\r\n        question: \"Are components mobile-friendly?\",\r\n        answer:\r\n          \"Yes, every component in NurUI is responsive by default and follows a mobile-first approach.\",\r\n      },\r\n      {\r\n        number: 3,\r\n        question: \"Can I animate components?\",\r\n        answer:\r\n          \"Yes. Many components include animations out of the box, and NurUI supports integration with libraries like Framer Motion for advanced animation needs.\",\r\n      },\r\n      {\r\n        number: 4,\r\n        question: \"Can I create or extend custom components?\",\r\n        answer:\r\n          \"Definitely. NurUI encourages you to extend and create your own components using our base structure and design tokens.\",\r\n      },\r\n      {\r\n        number: 5,\r\n        question: \"Is accessibility supported?\",\r\n        answer:\r\n          \"Yes. NurUI follows accessibility best practices, including ARIA roles and keyboard navigation where appropriate.\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    category: \"Documentation\",\r\n    id: 4,\r\n    questions: [\r\n      {\r\n        number: 1,\r\n        question: \"Where can I find NurUI documentation?\",\r\n        answer:\r\n          \"The full documentation, including setup guides and examples, is available on the NurUI website.\",\r\n      },\r\n      {\r\n        number: 2,\r\n        question: \"Is there support available?\",\r\n        answer:\r\n          \"Yes. You can get community support on GitHub and Discord. Premium support will be available with NurUI Pro.\",\r\n      },\r\n      {\r\n        number: 3,\r\n        question: \"Do you maintain a changelog?\",\r\n        answer:\r\n          \"Yes. Every update is tracked in a public changelog available on GitHub.\",\r\n      },\r\n      {\r\n        number: 4,\r\n        question: \"Can I contribute to NurUI?\",\r\n        answer:\r\n          \"Yes, contributions are welcome! Fork the repo, make your changes, and open a pull request.\",\r\n      },\r\n      {\r\n        number: 5,\r\n        question: \"Are there starter templates or previews?\",\r\n        answer:\r\n          \"Yes. NurUI includes starter templates and v0 live previews to help you quickly build and test UI ideas.\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    category: \"CLI & Licensing\",\r\n    id: 5,\r\n    questions: [\r\n      {\r\n        number: 1,\r\n        question: \"Does NurUI have a CLI?\",\r\n        answer:\r\n          \"Yes! NurUI comes with a powerful CLI. You can scaffold components into your project with commands like `npx nurui add button`.\",\r\n      },\r\n      {\r\n        number: 2,\r\n        question: \"Does the CLI support TS to JS conversion?\",\r\n        answer:\r\n          \"Yes. The CLI detects your project type and generates components in either TypeScript or JavaScript based on your setup.\",\r\n      },\r\n      {\r\n        number: 3,\r\n        question: \"Is NurUI open-source?\",\r\n        answer:\r\n          \"Yes. NurUI is open-source and MIT-licensed, which means you can use it freely in personal and commercial projects.\",\r\n      },\r\n      {\r\n        number: 4,\r\n        question: \"Will there be a Pro version?\",\r\n        answer:\r\n          \"Yes. A Pro version with premium templates, animations, and design resources is planned for the near future.\",\r\n      },\r\n      {\r\n        number: 5,\r\n        question: \"Can I use NurUI in client and commercial projects?\",\r\n        answer:\r\n          \"Yes, you can use both the free and Pro versions of NurUI in client, SaaS, and commercial applications.\",\r\n      },\r\n    ],\r\n  },\r\n];\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/question-answer.tsx",

      "content": "import { FC } from \"react\";\r\nimport { SlArrowDown, SlArrowUp } from \"react-icons/sl\";\r\n\r\ninterface PropsType {\r\n  question: string;\r\n  answer: string;\r\n  questionNumber: number;\r\n  setOpenKey: () => void;\r\n  openKey: number;\r\n}\r\n\r\nconst QuestionAnswer: FC<PropsType> = ({\r\n  question,\r\n  answer,\r\n  questionNumber,\r\n  openKey,\r\n  setOpenKey,\r\n}) => {\r\n  return (\r\n    <div className=\"bg-[var(--primary-color-2)] dark:bg-[var(--primary-color-4)] rounded-xl \">\r\n      <div\r\n        className=\"flex items-center justify-between gap-1 pl-2 lg:pl-6 pr-4 py-6 border border-[var(--primary-color)] rounded-xl cursor-pointer\"\r\n        onClick={() => setOpenKey()}\r\n      >\r\n        <h6 className=\"lg:text-lg font-semibold\">\r\n          <span>{questionNumber}</span>. <span>{question}</span>\r\n        </h6>\r\n        <button>\r\n          {openKey === questionNumber ? (\r\n            <SlArrowDown className=\"cursor-pointer text-[var(--primary-color)]\" />\r\n          ) : (\r\n            <SlArrowUp className=\"cursor-pointer text-[var(--primary-color)]\" />\r\n          )}\r\n        </button>\r\n      </div>\r\n      {openKey === questionNumber && (\r\n        <p className=\"p-2 lg:p-5 text-[17px] leading-relaxed text-[var(--opacity-text-color)] text-balance lg:text-pretty\">\r\n          {answer}\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionAnswer;\r\n",

      "type": "registry:component"
    }
  ]
}