{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "text-button",
  "type": "registry:component",
  "dependencies": [
    "gsap",
    "@gsap/react",
    "clsx",
    "tailwind-merge"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/text-button-demo.tsx",
      "content": "import { TextFallButton } from \"@/components/nurui/text-button\";\n\nexport const TextButtonDemo = () => {\n  return (\n    <div className=\"flex items-center justify-center min-h-[30rem]\">\n      <TextFallButton className=\"bg-blue-500 text-primary-foreground cursor-pointer rounded px-6 py-2.5 text-lg font-medium\">\n        Text Fall Button\n      </TextFallButton>\n    </div>\n  );\n};\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/text-button.tsx",
      "content": "\"use client\";\nimport { ComponentProps, MouseEvent, useEffect, useRef } from \"react\";\nimport { useGSAP } from \"@gsap/react\";\nimport gsap from \"gsap\";\nimport { SplitText } from \"gsap/SplitText\";\nimport { cn } from \"@/lib/utils\";\n\ngsap.registerPlugin(SplitText);\n\ntype TextFallButtonProps = {\n  effectOnHover?: boolean;\n  effectOnLoad?: boolean;\n} & ComponentProps<\"button\">;\n\nexport const TextFallButton = ({\n  className,\n  children,\n  effectOnHover = true,\n  effectOnLoad = true,\n  ...props\n}: TextFallButtonProps) => {\n  const buttonRef = useRef<HTMLButtonElement | null>(null);\n  const textRef = useRef<HTMLSpanElement | null>(null);\n  const splitTextRef = useRef<SplitText | null>(null);\n  const timelineRef = useRef<gsap.core.Timeline | null>(null);\n\n  const { contextSafe } = useGSAP();\n\n  const triggerTextFallEffect = contextSafe(() => {\n    const element = buttonRef.current;\n    const splitText = splitTextRef.current;\n    if (!element || !splitText) return;\n\n    timelineRef.current?.kill();\n\n    timelineRef.current = gsap.timeline();\n    gsap.to(splitText.chars, {\n      duration: 0,\n      y: -60,\n    });\n    timelineRef.current\n      .add(\"start\")\n      .to(element, {\n        scale: 0.95,\n        y: 4,\n        duration: 0.1,\n      })\n      .to(element, {\n        scale: 1,\n        y: 0,\n        duration: 0.2,\n      })\n      .to(\n        splitText.chars,\n        {\n          duration: 1,\n          y: 0,\n          stagger: 0.05,\n          ease: \"elastic.out(0.75, 0.25)\",\n        },\n        \"start\",\n      );\n  });\n\n  useEffect(() => {\n    if (textRef.current)\n      splitTextRef.current = new SplitText(textRef.current, {\n        type: \"chars\",\n      });\n    if (effectOnLoad) {\n      triggerTextFallEffect();\n    }\n    return () => {\n      splitTextRef.current?.revert();\n      splitTextRef.current = null;\n    };\n  }, [effectOnLoad, triggerTextFallEffect]);\n\n  const onClick = (e: MouseEvent<HTMLButtonElement>) => {\n    triggerTextFallEffect();\n    props.onClick?.(e);\n  };\n\n  return (\n    <button\n      {...props}\n      ref={buttonRef}\n      onMouseEnter={() => effectOnHover && triggerTextFallEffect()}\n      onClick={onClick}\n      className={cn(\"\", className)}\n    >\n      <span ref={textRef} className=\"absolute\">\n        {children}\n      </span>\n      <span className=\"opacity-0\">{children}</span>\n    </button>\n  );\n};\n",
      "type": "registry:component"
    }
  ]
}