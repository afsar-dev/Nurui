{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "text-button",
  "type": "registry:component",
  "dependencies": [
    "gsap",
    "@gsap/react",
    "clsx",
    "tailwind-merge"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/text-button-demo.tsx",
      "content": "import { TextFallButton } from \"@/components/nurui/text-button\";\r\n\r\nexport const TextButtonDemo = () => {\r\n  return (\r\n    <div className=\"flex items-center justify-center min-h-[30rem]\">\r\n      <TextFallButton className=\"bg-blue-500 text-primary-foreground cursor-pointer rounded px-6 py-2.5 text-lg font-medium\">\r\n        Text Fall Button\r\n      </TextFallButton>\r\n    </div>\r\n  );\r\n};\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/text-button.tsx",
      "content": "\"use client\";\r\nimport { ComponentProps, MouseEvent, useEffect, useRef } from \"react\";\r\nimport { useGSAP } from \"@gsap/react\";\r\nimport gsap from \"gsap\";\r\nimport { SplitText } from \"gsap/SplitText\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ngsap.registerPlugin(SplitText);\r\n\r\ntype TextFallButtonProps = {\r\n  effectOnHover?: boolean;\r\n  effectOnLoad?: boolean;\r\n} & ComponentProps<\"button\">;\r\n\r\nexport const TextFallButton = ({\r\n  className,\r\n  children,\r\n  effectOnHover = true,\r\n  effectOnLoad = true,\r\n  ...props\r\n}: TextFallButtonProps) => {\r\n  const buttonRef = useRef<HTMLButtonElement | null>(null);\r\n  const textRef = useRef<HTMLSpanElement | null>(null);\r\n  const splitTextRef = useRef<SplitText | null>(null);\r\n  const timelineRef = useRef<gsap.core.Timeline | null>(null);\r\n\r\n  const { contextSafe } = useGSAP();\r\n\r\n  const triggerTextFallEffect = contextSafe(() => {\r\n    const element = buttonRef.current;\r\n    const splitText = splitTextRef.current;\r\n    if (!element || !splitText) return;\r\n\r\n    timelineRef.current?.kill();\r\n\r\n    timelineRef.current = gsap.timeline();\r\n    gsap.to(splitText.chars, {\r\n      duration: 0,\r\n      y: -60,\r\n    });\r\n    timelineRef.current\r\n      .add(\"start\")\r\n      .to(element, {\r\n        scale: 0.95,\r\n        y: 4,\r\n        duration: 0.1,\r\n      })\r\n      .to(element, {\r\n        scale: 1,\r\n        y: 0,\r\n        duration: 0.2,\r\n      })\r\n      .to(\r\n        splitText.chars,\r\n        {\r\n          duration: 1,\r\n          y: 0,\r\n          stagger: 0.05,\r\n          ease: \"elastic.out(0.75, 0.25)\",\r\n        },\r\n        \"start\",\r\n      );\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (textRef.current)\r\n      splitTextRef.current = new SplitText(textRef.current, {\r\n        type: \"chars\",\r\n      });\r\n    if (effectOnLoad) {\r\n      triggerTextFallEffect();\r\n    }\r\n    return () => {\r\n      splitTextRef.current?.revert();\r\n      splitTextRef.current = null;\r\n    };\r\n  }, [effectOnLoad, triggerTextFallEffect]);\r\n\r\n  const onClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n    triggerTextFallEffect();\r\n    props.onClick?.(e);\r\n  };\r\n\r\n  return (\r\n    <button\r\n      {...props}\r\n      ref={buttonRef}\r\n      onMouseEnter={() => effectOnHover && triggerTextFallEffect()}\r\n      onClick={onClick}\r\n      className={cn(\"\", className)}\r\n    >\r\n      <span ref={textRef} className=\"absolute\">\r\n        {children}\r\n      </span>\r\n      <span className=\"opacity-0\">{children}</span>\r\n    </button>\r\n  );\r\n};\r\n",
      "type": "registry:component"
    }
  ]
}