{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "spotlight-card",
  "type": "registry:component",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/spotlight-card-demo.tsx",
      "content": "import { GlowCard } from \"@/components/nurui/spotlight-card\";\r\n\r\nexport function SpotLightCardDemo() {\r\n  return (\r\n    <div className=\"flex flex-row items-center justify-center gap-10 custom-cursor py-20\">\r\n      <GlowCard />\r\n      <GlowCard />\r\n      <GlowCard />\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/spotlight-card.tsx",
      "content": "'use client';\r\nimport React, { useEffect, useRef, ReactNode } from \"react\";\r\n\r\ninterface GlowCardProps {\r\n  children?: ReactNode;\r\n  className?: string;\r\n  glowColor?: \"blue\" | \"purple\" | \"green\" | \"red\" | \"orange\";\r\n  size?: \"sm\" | \"md\" | \"lg\";\r\n  width?: string | number;\r\n  height?: string | number;\r\n  customSize?: boolean; // When true, ignores size prop and uses width/height or className\r\n}\r\n\r\nconst glowColorMap = {\r\n  blue: { base: 220, spread: 200 },\r\n  purple: { base: 280, spread: 300 },\r\n  green: { base: 120, spread: 200 },\r\n  red: { base: 0, spread: 200 },\r\n  orange: { base: 30, spread: 200 },\r\n};\r\n\r\nconst sizeMap = {\r\n  sm: \"w-48 h-64\",\r\n  md: \"w-64 h-80\",\r\n  lg: \"w-80 h-96\",\r\n};\r\n\r\nconst GlowCard: React.FC<GlowCardProps> = ({\r\n  children,\r\n  className = \"\",\r\n  glowColor = \"blue\",\r\n  size = \"md\",\r\n  width,\r\n  height,\r\n  customSize = false,\r\n}) => {\r\n  const cardRef = useRef<HTMLDivElement>(null);\r\n  const innerRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    const syncPointer = (e: PointerEvent) => {\r\n      const { clientX: x, clientY: y } = e;\r\n\r\n      if (cardRef.current) {\r\n        cardRef.current.style.setProperty(\"--x\", x.toFixed(2));\r\n        cardRef.current.style.setProperty(\r\n          \"--xp\",\r\n          (x / window.innerWidth).toFixed(2),\r\n        );\r\n        cardRef.current.style.setProperty(\"--y\", y.toFixed(2));\r\n        cardRef.current.style.setProperty(\r\n          \"--yp\",\r\n          (y / window.innerHeight).toFixed(2),\r\n        );\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"pointermove\", syncPointer);\r\n    return () => document.removeEventListener(\"pointermove\", syncPointer);\r\n  }, []);\r\n\r\n  const { base, spread } = glowColorMap[glowColor];\r\n\r\n  // Determine sizing\r\n  const getSizeClasses = () => {\r\n    if (customSize) {\r\n      return \"\"; // Let className or inline styles handle sizing\r\n    }\r\n    return sizeMap[size];\r\n  };\r\n\r\n  const getInlineStyles = (): React.CSSProperties => {\r\n    const baseStyles: React.CSSProperties & {\r\n      [key: string]: string | number | undefined;\r\n    } = {\r\n      \"--base\": base,\r\n      \"--spread\": spread,\r\n      \"--radius\": \"14\",\r\n      \"--border\": \"3\",\r\n      \"--backdrop\": \"hsl(0 0% 60% / 0.12)\",\r\n      \"--backup-border\": \"var(--backdrop)\",\r\n      \"--size\": \"200\",\r\n      \"--outer\": \"1\",\r\n      \"--border-size\": \"calc(var(--border, 2) * 1px)\",\r\n      \"--spotlight-size\": \"calc(var(--size, 150) * 1px)\",\r\n      \"--hue\": \"calc(var(--base) + (var(--xp, 0) * var(--spread, 0)))\",\r\n      backgroundImage: `radial-gradient(\r\n        var(--spotlight-size) var(--spotlight-size) at\r\n        calc(var(--x, 0) * 1px)\r\n        calc(var(--y, 0) * 1px),\r\n        hsl(var(--hue, 210) calc(var(--saturation, 100) * 1%) calc(var(--lightness, 70) * 1%) / var(--bg-spot-opacity, 0.1)), transparent\r\n      )`,\r\n      backgroundColor: \"var(--backdrop, transparent)\",\r\n      backgroundSize:\r\n        \"calc(100% + (2 * var(--border-size))) calc(100% + (2 * var(--border-size)))\",\r\n      backgroundPosition: \"50% 50%\",\r\n      backgroundAttachment: \"fixed\",\r\n      border: \"var(--border-size) solid var(--backup-border)\",\r\n      position: \"relative\",\r\n      touchAction: \"none\",\r\n    };\r\n\r\n    // Add width and height if provided\r\n    if (width !== undefined) {\r\n      baseStyles.width = typeof width === \"number\" ? `${width}px` : width;\r\n    }\r\n    if (height !== undefined) {\r\n      baseStyles.height = typeof height === \"number\" ? `${height}px` : height;\r\n    }\r\n\r\n    return baseStyles;\r\n  };\r\n\r\n  const beforeAfterStyles = `\r\n    [data-glow]::before,\r\n    [data-glow]::after {\r\n      pointer-events: none;\r\n      content: \"\";\r\n      position: absolute;\r\n      inset: calc(var(--border-size) * -1);\r\n      border: var(--border-size) solid transparent;\r\n      border-radius: calc(var(--radius) * 1px);\r\n      background-attachment: fixed;\r\n      background-size: calc(100% + (2 * var(--border-size))) calc(100% + (2 * var(--border-size)));\r\n      background-repeat: no-repeat;\r\n      background-position: 50% 50%;\r\n      mask: linear-gradient(transparent, transparent), linear-gradient(white, white);\r\n      mask-clip: padding-box, border-box;\r\n      mask-composite: intersect;\r\n    }\r\n    \r\n    [data-glow]::before {\r\n      background-image: radial-gradient(\r\n        calc(var(--spotlight-size) * 0.75) calc(var(--spotlight-size) * 0.75) at\r\n        calc(var(--x, 0) * 1px)\r\n        calc(var(--y, 0) * 1px),\r\n        hsl(var(--hue, 210) calc(var(--saturation, 100) * 1%) calc(var(--lightness, 50) * 1%) / var(--border-spot-opacity, 1)), transparent 100%\r\n      );\r\n      filter: brightness(2);\r\n    }\r\n    \r\n    [data-glow]::after {\r\n      background-image: radial-gradient(\r\n        calc(var(--spotlight-size) * 0.5) calc(var(--spotlight-size) * 0.5) at\r\n        calc(var(--x, 0) * 1px)\r\n        calc(var(--y, 0) * 1px),\r\n        hsl(0 100% 100% / var(--border-light-opacity, 1)), transparent 100%\r\n      );\r\n    }\r\n    \r\n    [data-glow] [data-glow] {\r\n      position: absolute;\r\n      inset: 0;\r\n      will-change: filter;\r\n      opacity: var(--outer, 1);\r\n      border-radius: calc(var(--radius) * 1px);\r\n      border-width: calc(var(--border-size) * 20);\r\n      filter: blur(calc(var(--border-size) * 10));\r\n      background: none;\r\n      pointer-events: none;\r\n      border: none;\r\n    }\r\n    \r\n    [data-glow] > [data-glow]::before {\r\n      inset: -10px;\r\n      border-width: 10px;\r\n    }\r\n  `;\r\n\r\n  return (\r\n    <>\r\n      <style dangerouslySetInnerHTML={{ __html: beforeAfterStyles }} />\r\n      <div\r\n        ref={cardRef}\r\n        data-glow\r\n        style={getInlineStyles()}\r\n        className={`\r\n          ${getSizeClasses()}\r\n          ${!customSize ? \"aspect-[3/4]\" : \"\"}\r\n          rounded-2xl \r\n          relative \r\n          grid \r\n          grid-rows-[1fr_auto] \r\n          shadow-[0_1rem_2rem_-1rem_black] \r\n          p-4 \r\n          gap-4 \r\n          backdrop-blur-[5px]\r\n          ${className}\r\n        `}\r\n      >\r\n        <div ref={innerRef} data-glow></div>\r\n        {children}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport { GlowCard };\r\n",
      "type": "registry:component"
    }
  ]
}