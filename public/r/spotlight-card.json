{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "spotlight-card",
  "type": "registry:component",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/spotlight-card-demo.tsx",
      "content": "import { GlowCard } from \"@/components/nurui/spotlight-card\";\n\nexport function SpotLightCardDemo() {\n  return (\n    <div className=\"flex flex-row items-center justify-center gap-10 custom-cursor py-20\">\n      <GlowCard />\n      <GlowCard />\n      <GlowCard />\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/spotlight-card.tsx",
      "content": "'use client';\nimport React, { useEffect, useRef, ReactNode } from \"react\";\n\ninterface GlowCardProps {\n  children?: ReactNode;\n  className?: string;\n  glowColor?: \"blue\" | \"purple\" | \"green\" | \"red\" | \"orange\";\n  size?: \"sm\" | \"md\" | \"lg\";\n  width?: string | number;\n  height?: string | number;\n  customSize?: boolean; // When true, ignores size prop and uses width/height or className\n}\n\nconst glowColorMap = {\n  blue: { base: 220, spread: 200 },\n  purple: { base: 280, spread: 300 },\n  green: { base: 120, spread: 200 },\n  red: { base: 0, spread: 200 },\n  orange: { base: 30, spread: 200 },\n};\n\nconst sizeMap = {\n  sm: \"w-48 h-64\",\n  md: \"w-64 h-80\",\n  lg: \"w-80 h-96\",\n};\n\nconst GlowCard: React.FC<GlowCardProps> = ({\n  children,\n  className = \"\",\n  glowColor = \"blue\",\n  size = \"md\",\n  width,\n  height,\n  customSize = false,\n}) => {\n  const cardRef = useRef<HTMLDivElement>(null);\n  const innerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const syncPointer = (e: PointerEvent) => {\n      const { clientX: x, clientY: y } = e;\n\n      if (cardRef.current) {\n        cardRef.current.style.setProperty(\"--x\", x.toFixed(2));\n        cardRef.current.style.setProperty(\n          \"--xp\",\n          (x / window.innerWidth).toFixed(2),\n        );\n        cardRef.current.style.setProperty(\"--y\", y.toFixed(2));\n        cardRef.current.style.setProperty(\n          \"--yp\",\n          (y / window.innerHeight).toFixed(2),\n        );\n      }\n    };\n\n    document.addEventListener(\"pointermove\", syncPointer);\n    return () => document.removeEventListener(\"pointermove\", syncPointer);\n  }, []);\n\n  const { base, spread } = glowColorMap[glowColor];\n\n  // Determine sizing\n  const getSizeClasses = () => {\n    if (customSize) {\n      return \"\"; // Let className or inline styles handle sizing\n    }\n    return sizeMap[size];\n  };\n\n  const getInlineStyles = (): React.CSSProperties => {\n    const baseStyles: React.CSSProperties & {\n      [key: string]: string | number | undefined;\n    } = {\n      \"--base\": base,\n      \"--spread\": spread,\n      \"--radius\": \"14\",\n      \"--border\": \"3\",\n      \"--backdrop\": \"hsl(0 0% 60% / 0.12)\",\n      \"--backup-border\": \"var(--backdrop)\",\n      \"--size\": \"200\",\n      \"--outer\": \"1\",\n      \"--border-size\": \"calc(var(--border, 2) * 1px)\",\n      \"--spotlight-size\": \"calc(var(--size, 150) * 1px)\",\n      \"--hue\": \"calc(var(--base) + (var(--xp, 0) * var(--spread, 0)))\",\n      backgroundImage: `radial-gradient(\n        var(--spotlight-size) var(--spotlight-size) at\n        calc(var(--x, 0) * 1px)\n        calc(var(--y, 0) * 1px),\n        hsl(var(--hue, 210) calc(var(--saturation, 100) * 1%) calc(var(--lightness, 70) * 1%) / var(--bg-spot-opacity, 0.1)), transparent\n      )`,\n      backgroundColor: \"var(--backdrop, transparent)\",\n      backgroundSize:\n        \"calc(100% + (2 * var(--border-size))) calc(100% + (2 * var(--border-size)))\",\n      backgroundPosition: \"50% 50%\",\n      backgroundAttachment: \"fixed\",\n      border: \"var(--border-size) solid var(--backup-border)\",\n      position: \"relative\",\n      touchAction: \"none\",\n    };\n\n    // Add width and height if provided\n    if (width !== undefined) {\n      baseStyles.width = typeof width === \"number\" ? `${width}px` : width;\n    }\n    if (height !== undefined) {\n      baseStyles.height = typeof height === \"number\" ? `${height}px` : height;\n    }\n\n    return baseStyles;\n  };\n\n  const beforeAfterStyles = `\n    [data-glow]::before,\n    [data-glow]::after {\n      pointer-events: none;\n      content: \"\";\n      position: absolute;\n      inset: calc(var(--border-size) * -1);\n      border: var(--border-size) solid transparent;\n      border-radius: calc(var(--radius) * 1px);\n      background-attachment: fixed;\n      background-size: calc(100% + (2 * var(--border-size))) calc(100% + (2 * var(--border-size)));\n      background-repeat: no-repeat;\n      background-position: 50% 50%;\n      mask: linear-gradient(transparent, transparent), linear-gradient(white, white);\n      mask-clip: padding-box, border-box;\n      mask-composite: intersect;\n    }\n    \n    [data-glow]::before {\n      background-image: radial-gradient(\n        calc(var(--spotlight-size) * 0.75) calc(var(--spotlight-size) * 0.75) at\n        calc(var(--x, 0) * 1px)\n        calc(var(--y, 0) * 1px),\n        hsl(var(--hue, 210) calc(var(--saturation, 100) * 1%) calc(var(--lightness, 50) * 1%) / var(--border-spot-opacity, 1)), transparent 100%\n      );\n      filter: brightness(2);\n    }\n    \n    [data-glow]::after {\n      background-image: radial-gradient(\n        calc(var(--spotlight-size) * 0.5) calc(var(--spotlight-size) * 0.5) at\n        calc(var(--x, 0) * 1px)\n        calc(var(--y, 0) * 1px),\n        hsl(0 100% 100% / var(--border-light-opacity, 1)), transparent 100%\n      );\n    }\n    \n    [data-glow] [data-glow] {\n      position: absolute;\n      inset: 0;\n      will-change: filter;\n      opacity: var(--outer, 1);\n      border-radius: calc(var(--radius) * 1px);\n      border-width: calc(var(--border-size) * 20);\n      filter: blur(calc(var(--border-size) * 10));\n      background: none;\n      pointer-events: none;\n      border: none;\n    }\n    \n    [data-glow] > [data-glow]::before {\n      inset: -10px;\n      border-width: 10px;\n    }\n  `;\n\n  return (\n    <>\n      <style dangerouslySetInnerHTML={{ __html: beforeAfterStyles }} />\n      <div\n        ref={cardRef}\n        data-glow\n        style={getInlineStyles()}\n        className={`\n          ${getSizeClasses()}\n          ${!customSize ? \"aspect-[3/4]\" : \"\"}\n          rounded-2xl \n          relative \n          grid \n          grid-rows-[1fr_auto] \n          shadow-[0_1rem_2rem_-1rem_black] \n          p-4 \n          gap-4 \n          backdrop-blur-[5px]\n          ${className}\n        `}\n      >\n        <div ref={innerRef} data-glow></div>\n        {children}\n      </div>\n    </>\n  );\n};\n\nexport { GlowCard };\n",
      "type": "registry:component"
    }
  ]
}