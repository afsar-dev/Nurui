{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "gradient-hero",
  "type": "registry:component",
  "dependencies": [
    "class-variance-authority",
    "framer-motion",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-slot",
    "lucide-react"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/gradient-hero.tsx",
      "content": "import React from \"react\";\nimport { Button } from \"@/components/nurui/button\";\nimport { ArrowRight, Github, Linkedin, Mail } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { GradientGridHero } from \"@/components/nurui/gradient-grid-hero\";\n\nconst GradientHero = () => {\n  return (\n    <section className=\"relative min-h-screen flex items-center justify-center overflow-hidden p-6\">\n      <div className=\"absolute inset-0 z-0\">\n        <div className=\"absolute top-20 left-10 w-72 h-72 bg-purple-500 rounded-full mix-blend-multiply filter blur-3xl opacity-20 animate-blob\"></div>\n        <div className=\"absolute top-40 right-10 w-72 h-72 bg-yellow-500 rounded-full mix-blend-multiply filter blur-3xl opacity-20 animate-blob animation-delay-2000\"></div>\n        <div className=\"absolute bottom-20 left-1/3 w-72 h-72 bg-pink-500 rounded-full mix-blend-multiply filter blur-3xl opacity-20 animate-blob animation-delay-4000\"></div>\n      </div>\n\n      <div className=\"container relative z-10 grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n        <div className=\"space-y-6\">\n          <div className=\"inline-block\">\n            <div className=\"relative px-3 py-1 text-sm font-medium rounded-full bg-white/10 backdrop-blur-sm border border-white/20 mb-4 mt-4\">\n              <span className=\"relative z-10\">\n                Software Engineer & Creative Developer\n              </span>\n              <span className=\"absolute inset-0 rounded-full bg-gradient-to-r from-purple-500/20 to-pink-500/20 animate-pulse\"></span>\n            </div>\n          </div>\n          <h1 className=\"text-5xl md:text-7xl font-bold tracking-tight\">\n            <span className=\"block\">Hi, I&apos;m</span>\n            <span className=\"bg-clip-text text-transparent bg-gradient-to-r from-purple-400 to-pink-600\">\n              Afsar Mahmud\n            </span>\n          </h1>\n          <p className=\"text-xl text-zinc-400 max-w-[600px]\">\n            I craft exceptional digital experiences with code, creativity, and a\n            passion for innovation.\n          </p>\n          <div className=\"flex flex-wrap gap-4 pt-4\">\n            <Button className=\"relative overflow-hidden group bg-gradient-to-r from-purple-500 to-pink-500 border-0\">\n              <span className=\"relative z-10 flex items-center\">\n                View Projects{\" \"}\n                <ArrowRight className=\"ml-2 h-4 w-4 transition-transform group-hover:translate-x-1\" />\n              </span>\n              <span className=\"absolute inset-0 bg-gradient-to-r from-pink-500 to-purple-500 opacity-0 group-hover:opacity-100 transition-opacity\"></span>\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"border-zinc-700 text-pink-500 hover:text-pink-700 hover:border-zinc-500\"\n            >\n              Contact Me\n            </Button>\n          </div>\n          <div className=\"flex gap-4 pt-4\">\n            <Link\n              href=\"https://github.com/afsar-dev\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"rounded-full bg-zinc-800/50 hover:bg-zinc-800 text-zinc-400 hover:text-white\"\n              >\n                <Github className=\"h-5 w-5\" />\n                <span className=\"sr-only\">GitHub</span>\n              </Button>\n            </Link>\n            <Link\n              href=\"https://www.linkedin.com/in/md-afsar-mahmud\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"rounded-full bg-zinc-800/50 hover:bg-zinc-800 text-zinc-400 hover:text-white\"\n              >\n                <Linkedin className=\"h-5 w-5\" />\n                <span className=\"sr-only\">LinkedIn</span>\n              </Button>\n            </Link>\n            <Link href=\"mailto:mdafsar.dev@gmail.com\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"rounded-full bg-zinc-800/50 hover:bg-zinc-800 text-zinc-400 hover:text-white\"\n              >\n                <Mail className=\"h-5 w-5\" />\n                <span className=\"sr-only\">Email</span>\n              </Button>\n            </Link>\n          </div>\n        </div>\n        <div className=\"flex justify-center\">\n          <GradientGridHero />\n        </div>\n      </div>\n\n      <div className=\"absolute bottom-10 left-1/2 -translate-x-1/2 animate-bounce\">\n        <div className=\"w-6 h-10 rounded-full border-2 border-white/20 flex justify-center items-start p-1\">\n          <div className=\"w-1.5 h-1.5 rounded-full bg-white/60 animate-pulse\"></div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default GradientHero;",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/gradient-grid-hero.tsx",
      "content": "\"use client\"\n\nimport { useEffect, useRef } from \"react\"\nimport { motion } from \"framer-motion\"\n\nexport function GradientGridHero() {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n\n  useEffect(() => {\n    const canvas = canvasRef.current\n    if (!canvas) return\n\n    const ctx = canvas.getContext(\"2d\")\n    if (!ctx) return\n\n    let devicePixelRatio: number\n\n    // Set canvas dimensions\n    const setCanvasDimensions = () => {\n      devicePixelRatio = window.devicePixelRatio || 1\n      const rect = canvas.getBoundingClientRect()\n\n      canvas.width = rect.width * devicePixelRatio\n      canvas.height = rect.height * devicePixelRatio\n\n      ctx.scale(devicePixelRatio, devicePixelRatio)\n    }\n\n    setCanvasDimensions()\n    window.addEventListener(\"resize\", setCanvasDimensions)\n\n    // Mouse position\n    let mouseX = 0\n    let mouseY = 0\n    let targetX = 0\n    let targetY = 0\n\n    window.addEventListener(\"mousemove\", (e) => {\n      const rect = canvas.getBoundingClientRect()\n      targetX = e.clientX - rect.left\n      targetY = e.clientY - rect.top\n    })\n\n    // Particle class\n    class Particle {\n      x: number\n      y: number\n      size: number\n      baseX: number\n      baseY: number\n      density: number\n      color: string\n      distance: number\n\n      constructor(x: number, y: number) {\n        this.x = x\n        this.y = y\n        this.baseX = x\n        this.baseY = y\n        this.size = Math.random() * 5 + 2\n        this.density = Math.random() * 30 + 1\n        this.distance = 0\n\n        // Create a gradient from purple to pink\n        const hue = Math.random() * 60 + 270 // 270-330 range for purples and pinks\n        this.color = `hsl(${hue}, 70%, 60%)`\n      }\n\n      update() {\n        // Calculate distance between mouse and particle\n        const dx = mouseX - this.x\n        const dy = mouseY - this.y\n        this.distance = Math.sqrt(dx * dx + dy * dy)\n\n        const forceDirectionX = dx / this.distance\n        const forceDirectionY = dy / this.distance\n\n        const maxDistance = 100\n        const force = (maxDistance - this.distance) / maxDistance\n\n        if (this.distance < maxDistance) {\n          const directionX = forceDirectionX * force * this.density\n          const directionY = forceDirectionY * force * this.density\n\n          this.x -= directionX\n          this.y -= directionY\n        } else {\n          if (this.x !== this.baseX) {\n            const dx = this.x - this.baseX\n            this.x -= dx / 10\n          }\n          if (this.y !== this.baseY) {\n            const dy = this.y - this.baseY\n            this.y -= dy / 10\n          }\n        }\n      }\n\n      draw(ctx: CanvasRenderingContext2D | null) {\n        if (!ctx) return\n        ctx.fillStyle = this.color\n        ctx.beginPath()\n        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2)\n        ctx.closePath()\n        ctx.fill()\n      }\n    }\n\n    // Create particle grid\n    const particlesArray: Particle[] = []\n    const gridSize = 30\n\n    function init() {\n      particlesArray.length = 0\n\n      if (!canvas) return;\n\n      const canvasWidth = canvas.width / devicePixelRatio\n      const canvasHeight = canvas.height / devicePixelRatio\n\n      const numX = Math.floor(canvasWidth / gridSize)\n      const numY = Math.floor(canvasHeight / gridSize)\n\n      for (let y = 0; y < numY; y++) {\n        for (let x = 0; x < numX; x++) {\n          const posX = x * gridSize + gridSize / 2\n          const posY = y * gridSize + gridSize / 2\n          particlesArray.push(new Particle(posX, posY))\n        }\n      }\n    }\n\n    init()\n\n    // Animation loop\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height)\n\n      // Smooth mouse following\n      mouseX += (targetX - mouseX) * 0.1\n      mouseY += (targetY - mouseY) * 0.1\n\n      // Draw connections\n      for (let i = 0; i < particlesArray.length; i++) {\n        particlesArray[i].update()\n        particlesArray[i].draw(ctx)\n\n        // Draw connections\n        for (let j = i; j < particlesArray.length; j++) {\n          const dx = particlesArray[i].x - particlesArray[j].x\n          const dy = particlesArray[i].y - particlesArray[j].y\n          const distance = Math.sqrt(dx * dx + dy * dy)\n\n          if (distance < 30) {\n            ctx.beginPath()\n            ctx.strokeStyle = `rgba(180, 120, 255, ${0.2 - distance / 150})`\n            ctx.lineWidth = 0.5\n            ctx.moveTo(particlesArray[i].x, particlesArray[i].y)\n            ctx.lineTo(particlesArray[j].x, particlesArray[j].y)\n            ctx.stroke()\n          }\n        }\n      }\n\n      requestAnimationFrame(animate)\n    }\n\n    animate()\n\n    // Handle window resize\n    window.addEventListener(\"resize\", init)\n\n    return () => {\n      window.removeEventListener(\"resize\", setCanvasDimensions)\n      window.removeEventListener(\"resize\", init)\n    }\n  }, [])\n\n  return (\n    <motion.div\n      className=\"w-full h-[400px] md:h-[500px] relative\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 1 }}\n    >\n      <canvas ref={canvasRef} className=\"w-full h-full\" style={{ display: \"block\" }} />\n    </motion.div>\n  )\n}",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n",
      "type": "registry:component"
    }
  ]
}