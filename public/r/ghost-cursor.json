{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ghost-cursor",
  "type": "registry:component",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/ghost-cursor-demo.tsx",
      "content": "import React from \"react\";\r\nimport GhostTrailCursor from \"@/components/nurui/ghost-cursor\";\r\n\r\nconst GhostCursorDemo = () => {\r\n  return (\r\n    <>\r\n      <p className=\"text-3xl text-center pt-4 text-[#3ca2fa] font-bold\">\r\n        Move cursor to see the effect.\r\n      </p>\r\n      <GhostTrailCursor />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GhostCursorDemo;\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/ghost-cursor.tsx",
      "content": "\"use client\";\r\nimport React, { useRef, useEffect } from \"react\";\r\n\r\nconst GhostTrailCursor = () => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  // Define a Particle type to avoid using 'any'\r\n  type ParticleType = {\r\n    x: number;\r\n    y: number;\r\n    radius: number;\r\n    alpha: number;\r\n    color: string;\r\n    draw: () => void;\r\n    update: () => void;\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Move particles array inside useEffect to avoid dependency warning\r\n    const particles: ParticleType[] = [];\r\n\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    if (!ctx) return;\r\n\r\n    const resize = () => {\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n    };\r\n\r\n    resize();\r\n    window.addEventListener(\"resize\", resize);\r\n\r\n    class Particle {\r\n      x: number;\r\n      y: number;\r\n      radius: number;\r\n      alpha: number;\r\n      color: string;\r\n\r\n      constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.radius = Math.random() * 6 + 2;\r\n        this.alpha = 1;\r\n        this.color = \"255, 255, 255\";\r\n      }\r\n\r\n      draw() {\r\n        if (!ctx) return;\r\n        ctx.beginPath();\r\n        ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\r\n        ctx.fillStyle = `rgba(${this.color}, ${this.alpha})`;\r\n        ctx.fill();\r\n      }\r\n\r\n      update() {\r\n        this.alpha -= 0.02;\r\n      }\r\n    }\r\n\r\n    const animate = () => {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      particles.forEach((p, index) => {\r\n        p.update();\r\n        p.draw();\r\n        if (p.alpha <= 0) particles.splice(index, 1);\r\n      });\r\n      requestAnimationFrame(animate);\r\n    };\r\n    animate();\r\n\r\n    const onMove = (e: MouseEvent) => {\r\n      particles.push(new Particle(e.clientX, e.clientY));\r\n    };\r\n\r\n    window.addEventListener(\"mousemove\", onMove);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"mousemove\", onMove);\r\n      window.removeEventListener(\"resize\", resize);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      className=\"fixed top-0 left-0 w-full h-full pointer-events-none z-50\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default GhostTrailCursor;\r\n",
      "type": "registry:component"
    }
  ]
}