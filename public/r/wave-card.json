{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "wave-card",
  "type": "registry:component",
  "dependencies": [
    "tw-animate-css"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/wave-card-demo.tsx",
      "content": "import WaveCard from \"@/components/nurui/wave-card\";\r\n\r\nconst WaveCardDemo = () => {\r\n  return (\r\n    <WaveCard\r\n      tags=\"Database\"\r\n      title=\"Schema Management\"\r\n      description=\"Design, optimize and maintain your database structure with powerful schema tools.\"\r\n      buttonText=\"Manage\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default WaveCardDemo;\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/wave-card.tsx",
      "content": "\"use client\";\r\nimport React, { useEffect, useRef } from \"react\";\r\nimport \"@/components/nurui/styles/wave-card.css\";\r\n\r\ninterface IProps {\r\n  tags: string;\r\n  title: string;\r\n  description: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport default function WaveCard({\r\n  tags,\r\n  title,\r\n  description,\r\n  buttonText,\r\n}: IProps) {\r\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    let time = 0;\r\n\r\n    const waveData = Array.from({ length: 8 }).map(() => ({\r\n      value: Math.random() * 0.5 + 0.1,\r\n      targetValue: Math.random() * 0.5 + 0.1,\r\n      speed: Math.random() * 0.02 + 0.01,\r\n    }));\r\n\r\n    function resizeCanvas() {\r\n      if (!canvas) return;\r\n      const container = canvas.parentElement;\r\n      if (container) {\r\n        canvas.width = container.clientWidth;\r\n        canvas.height = container.clientHeight;\r\n      }\r\n    }\r\n\r\n    function updateWaveData() {\r\n      waveData.forEach((data) => {\r\n        if (Math.random() < 0.01) data.targetValue = Math.random() * 0.7 + 0.1;\r\n        const diff = data.targetValue - data.value;\r\n        data.value += diff * data.speed;\r\n      });\r\n    }\r\n\r\n    function draw() {\r\n      if (!canvas || !ctx) return;\r\n\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height); // Removed background color\r\n\r\n      waveData.forEach((data, i) => {\r\n        const freq = data.value * 7;\r\n        ctx.beginPath();\r\n        for (let x = 0; x < canvas.width; x++) {\r\n          const nx = (x / canvas.width) * 2 - 1;\r\n          const px = nx + i * 0.04 + freq * 0.03;\r\n          const py =\r\n            Math.sin(px * 10 + time) *\r\n            Math.cos(px * 2) *\r\n            freq *\r\n            0.1 *\r\n            ((i + 1) / 8);\r\n          const y = ((py + 1) * canvas.height) / 2;\r\n          if (x === 0) {\r\n            ctx.moveTo(x, y);\r\n          } else {\r\n            ctx.lineTo(x, y);\r\n          }\r\n        }\r\n        const intensity = Math.min(1, freq * 0.3);\r\n        const r = 79 + intensity * 100;\r\n        const g = 70 + intensity * 130;\r\n        const b = 229;\r\n        ctx.lineWidth = 1 + i * 0.3;\r\n        ctx.strokeStyle = `rgba(${r},${g},${b},0.6)`;\r\n        ctx.shadowColor = `rgba(${r},${g},${b},0.5)`;\r\n        ctx.shadowBlur = 5;\r\n        ctx.stroke();\r\n        ctx.shadowBlur = 0;\r\n      });\r\n    }\r\n\r\n    function animate() {\r\n      time += 0.02;\r\n      updateWaveData();\r\n      draw();\r\n      requestAnimationFrame(animate);\r\n    }\r\n\r\n    window.addEventListener(\"resize\", resizeCanvas);\r\n    resizeCanvas();\r\n    animate();\r\n\r\n    return () => window.removeEventListener(\"resize\", resizeCanvas);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"relative w-full h-full overflow-hidden\">\r\n      {/* Constrained Canvas */}\r\n      <canvas\r\n        ref={canvasRef}\r\n        className=\"absolute top-0 left-0 w-full h-full z-0\"\r\n        style={{ background: \"transparent\" }}\r\n      />\r\n\r\n      {/* Card Content */}\r\n      <div className=\"relative z-10 w-full h-full flex flex-col justify-center items-center p-4\">\r\n        <div className=\"w-full max-w-xs\">\r\n          <div className=\"relative border border-[#3C397A] overflow-hidden rounded-2xl flex flex-col animate-float bg-[#201A50]/30 backdrop-blur-lg\">\r\n            <div className=\"p-4 flex justify-center relative\">\r\n              <div className=\"w-full h-48 rounded-xl border border-[#2F5BB8] inner-glow overflow-hidden relative\">\r\n                <div className=\"absolute inset-0 opacity-10\">\r\n                  <div\r\n                    className=\"w-full h-full animate-pulse\"\r\n                    style={{\r\n                      backgroundImage:\r\n                        \"linear-gradient(90deg, rgba(255,255,255,0.3) 1px, transparent 1px), linear-gradient(rgba(255,255,255,0.3) 1px, transparent 1px)\",\r\n                      backgroundSize: \"15px 15px\",\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"w-full h-px bg-gradient-to-r from-transparent via-white/30 to-transparent\" />\r\n            <div className=\"p-4\">\r\n              <span className=\"inline-block px-3 py-1 glass text-indigo-300 rounded-full text-xs font-medium mb-3 border border-indigo-400/30\">\r\n                {tags}\r\n              </span>\r\n              <h3 className=\"text-lg font-medium text-white mb-2\">{title}</h3>\r\n              <p className=\"text-white/70 mb-4 leading-relaxed text-xs\">\r\n                {description}\r\n              </p>\r\n              <div className=\"flex justify-between items-center\">\r\n                <a\r\n                  href=\"#\"\r\n                  className=\"text-indigo-400 hover:text-indigo-300 transition flex items-center text-xs font-medium glass px-3 py-1.5 rounded-lg border border-indigo-400/30\"\r\n                >\r\n                  {buttonText}\r\n                  <svg className=\"w-3 h-3 ml-1\" viewBox=\"0 0 24 24\" fill=\"none\">\r\n                    <path\r\n                      d=\"M5 12H19M19 12L12 5M19 12L12 19\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth={2}\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    />\r\n                  </svg>\r\n                </a>\r\n                <span className=\"text-white/50 text-xs glass px-2 py-1 rounded-full border border-white/10\">\r\n                  Live\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/styles/wave-card.css",
      "content": "@import \"tw-animate-css\";\r\n\r\n@keyframes float {\r\n  0%, 100% {\r\n    transform: translateY(0);\r\n  }\r\n  50% {\r\n    transform: translateY(-10px);\r\n  }\r\n}\r\n\r\n@keyframes dataStream {\r\n  0% {\r\n    stroke-dashoffset: 20;\r\n  }\r\n  100% {\r\n    stroke-dashoffset: 0;\r\n  }\r\n}\r\n\r\n@keyframes schemaPulse {\r\n  0%, 100% {\r\n    transform: scale(1);\r\n    opacity: 0.8;\r\n  }\r\n  50% {\r\n    transform: scale(1.02);\r\n    opacity: 1;\r\n  }\r\n}",
      "type": "registry:component"
    }
  ]
}