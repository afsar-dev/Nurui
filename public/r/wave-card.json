{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "wave-card",
  "type": "registry:component",
  "dependencies": [
    "tw-animate-css"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/wave-card-demo.tsx",
      "content": "import WaveCard from \"@/components/nurui/wave-card\";\n\nconst WaveCardDemo = () => {\n  return (\n    <WaveCard\n      tags=\"Database\"\n      title=\"Schema Management\"\n      description=\"Design, optimize and maintain your database structure with powerful schema tools.\"\n      buttonText=\"Manage\"\n    />\n  );\n};\n\nexport default WaveCardDemo;\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/wave-card.tsx",
      "content": "\"use client\";\nimport React, { useEffect, useRef } from \"react\";\nimport \"@/components/nurui/styles/wave-card.css\";\n\ninterface IProps {\n  tags: string;\n  title: string;\n  description: string;\n  buttonText: string;\n}\n\nexport default function WaveCard({\n  tags,\n  title,\n  description,\n  buttonText,\n}: IProps) {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\");\n    let time = 0;\n\n    const waveData = Array.from({ length: 8 }).map(() => ({\n      value: Math.random() * 0.5 + 0.1,\n      targetValue: Math.random() * 0.5 + 0.1,\n      speed: Math.random() * 0.02 + 0.01,\n    }));\n\n    function resizeCanvas() {\n      if (!canvas) return;\n      const container = canvas.parentElement;\n      if (container) {\n        canvas.width = container.clientWidth;\n        canvas.height = container.clientHeight;\n      }\n    }\n\n    function updateWaveData() {\n      waveData.forEach((data) => {\n        if (Math.random() < 0.01) data.targetValue = Math.random() * 0.7 + 0.1;\n        const diff = data.targetValue - data.value;\n        data.value += diff * data.speed;\n      });\n    }\n\n    function draw() {\n      if (!canvas || !ctx) return;\n\n      ctx.clearRect(0, 0, canvas.width, canvas.height); // Removed background color\n\n      waveData.forEach((data, i) => {\n        const freq = data.value * 7;\n        ctx.beginPath();\n        for (let x = 0; x < canvas.width; x++) {\n          const nx = (x / canvas.width) * 2 - 1;\n          const px = nx + i * 0.04 + freq * 0.03;\n          const py =\n            Math.sin(px * 10 + time) *\n            Math.cos(px * 2) *\n            freq *\n            0.1 *\n            ((i + 1) / 8);\n          const y = ((py + 1) * canvas.height) / 2;\n          if (x === 0) {\n            ctx.moveTo(x, y);\n          } else {\n            ctx.lineTo(x, y);\n          }\n        }\n        const intensity = Math.min(1, freq * 0.3);\n        const r = 79 + intensity * 100;\n        const g = 70 + intensity * 130;\n        const b = 229;\n        ctx.lineWidth = 1 + i * 0.3;\n        ctx.strokeStyle = `rgba(${r},${g},${b},0.6)`;\n        ctx.shadowColor = `rgba(${r},${g},${b},0.5)`;\n        ctx.shadowBlur = 5;\n        ctx.stroke();\n        ctx.shadowBlur = 0;\n      });\n    }\n\n    function animate() {\n      time += 0.02;\n      updateWaveData();\n      draw();\n      requestAnimationFrame(animate);\n    }\n\n    window.addEventListener(\"resize\", resizeCanvas);\n    resizeCanvas();\n    animate();\n\n    return () => window.removeEventListener(\"resize\", resizeCanvas);\n  }, []);\n\n  return (\n    <div className=\"relative w-full h-full overflow-hidden\">\n      {/* Constrained Canvas */}\n      <canvas\n        ref={canvasRef}\n        className=\"absolute top-0 left-0 w-full h-full z-0\"\n        style={{ background: \"transparent\" }}\n      />\n\n      {/* Card Content */}\n      <div className=\"relative z-10 w-full h-full flex flex-col justify-center items-center p-4\">\n        <div className=\"w-full max-w-xs\">\n          <div className=\"relative border border-[#3C397A] overflow-hidden rounded-2xl flex flex-col animate-float bg-[#201A50]/30 backdrop-blur-lg\">\n            <div className=\"p-4 flex justify-center relative\">\n              <div className=\"w-full h-48 rounded-xl border border-[#2F5BB8] inner-glow overflow-hidden relative\">\n                <div className=\"absolute inset-0 opacity-10\">\n                  <div\n                    className=\"w-full h-full animate-pulse\"\n                    style={{\n                      backgroundImage:\n                        \"linear-gradient(90deg, rgba(255,255,255,0.3) 1px, transparent 1px), linear-gradient(rgba(255,255,255,0.3) 1px, transparent 1px)\",\n                      backgroundSize: \"15px 15px\",\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\"w-full h-px bg-gradient-to-r from-transparent via-white/30 to-transparent\" />\n            <div className=\"p-4\">\n              <span className=\"inline-block px-3 py-1 glass text-indigo-300 rounded-full text-xs font-medium mb-3 border border-indigo-400/30\">\n                {tags}\n              </span>\n              <h3 className=\"text-lg font-medium text-white mb-2\">{title}</h3>\n              <p className=\"text-white/70 mb-4 leading-relaxed text-xs\">\n                {description}\n              </p>\n              <div className=\"flex justify-between items-center\">\n                <a\n                  href=\"#\"\n                  className=\"text-indigo-400 hover:text-indigo-300 transition flex items-center text-xs font-medium glass px-3 py-1.5 rounded-lg border border-indigo-400/30\"\n                >\n                  {buttonText}\n                  <svg className=\"w-3 h-3 ml-1\" viewBox=\"0 0 24 24\" fill=\"none\">\n                    <path\n                      d=\"M5 12H19M19 12L12 5M19 12L12 19\"\n                      stroke=\"currentColor\"\n                      strokeWidth={2}\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                    />\n                  </svg>\n                </a>\n                <span className=\"text-white/50 text-xs glass px-2 py-1 rounded-full border border-white/10\">\n                  Live\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/styles/wave-card.css",
      "content": "@import \"tw-animate-css\";\n\n@keyframes float {\n  0%, 100% {\n    transform: translateY(0);\n  }\n  50% {\n    transform: translateY(-10px);\n  }\n}\n\n@keyframes dataStream {\n  0% {\n    stroke-dashoffset: 20;\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n}\n\n@keyframes schemaPulse {\n  0%, 100% {\n    transform: scale(1);\n    opacity: 0.8;\n  }\n  50% {\n    transform: scale(1.02);\n    opacity: 1;\n  }\n}",
      "type": "registry:component"
    }
  ]
}