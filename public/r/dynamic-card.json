{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dynamic-card",
  "type": "registry:component",
  "dependencies": [
    "tw-animate-css"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/dynamic-card-demo.tsx",
      "content": "import DynamicCard from \"@/components/nurui/dynamic-card\";\n\nconst DynamicCardDemo = () => {\n  return (\n    <div className=\"py-20\">\n      <DynamicCard\n        normalTitle=\"Dynamic Border\"\n        colorfulTitle=\"Animations\"\n        buttonText=\"Explore More\"\n        description=\"This card features animated border elements that continuously move around the perimeter, creating a dynamic visual effect using React and Tailwind CSS.\"\n      />\n    </div>\n  );\n};\n\nexport { DynamicCardDemo };\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/dynamic-card.tsx",
      "content": "\"use client\";\nimport React, { FC, useEffect, useRef } from \"react\";\nimport \"./styles/dynamic-card.css\";\n\ninterface IProps {\n  normalTitle: string;\n  colorfulTitle: string;\n  description: string;\n  buttonText: string;\n}\n\nconst DynamicCard: FC<IProps> = ({\n  normalTitle,\n  colorfulTitle,\n  description,\n  buttonText,\n}) => {\n  const topRef = useRef<HTMLDivElement>(null);\n  const rightRef = useRef<HTMLDivElement>(null);\n  const bottomRef = useRef<HTMLDivElement>(null);\n  const leftRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const animateBorder = () => {\n      const now = Date.now() / 1000;\n      const speed = 0.5; // Animation speed\n\n      // Calculate positions based on time\n      const topX = Math.sin(now * speed) * 100;\n      const rightY = Math.cos(now * speed) * 100;\n      const bottomX = Math.sin(now * speed + Math.PI) * 100;\n      const leftY = Math.cos(now * speed + Math.PI) * 100;\n\n      // Apply positions to elements\n      if (topRef.current)\n        topRef.current.style.transform = `translateX(${topX}%)`;\n      if (rightRef.current)\n        rightRef.current.style.transform = `translateY(${rightY}%)`;\n      if (bottomRef.current)\n        bottomRef.current.style.transform = `translateX(${bottomX}%)`;\n      if (leftRef.current)\n        leftRef.current.style.transform = `translateY(${leftY}%)`;\n\n      requestAnimationFrame(animateBorder);\n    };\n\n    const animationId = requestAnimationFrame(animateBorder);\n    return () => cancelAnimationFrame(animationId);\n  }, []);\n\n  return (\n    <div className=\"relative w-full max-w-2xl bg-white/5 backdrop-blur-md border border-gray-800 rounded-2xl p-8 md:p-12 overflow-hidden shadow-2xl\">\n      {/* Animated border elements */}\n      <div className=\"absolute top-0 left-0 w-full h-0.5 overflow-hidden\">\n        <div\n          ref={topRef}\n          className=\"absolute top-0 left-0 w-full h-full bg-gradient-to-r from-transparent via-orange-500/50 to-transparent\"\n        ></div>\n      </div>\n\n      <div className=\"absolute top-0 right-0 w-0.5 h-full overflow-hidden\">\n        <div\n          ref={rightRef}\n          className=\"absolute top-0 left-0 w-full h-full bg-gradient-to-b from-transparent via-purple-500/50 to-transparent\"\n        ></div>\n      </div>\n\n      <div className=\"absolute bottom-0 left-0 w-full h-0.5 overflow-hidden\">\n        <div\n          ref={bottomRef}\n          className=\"absolute top-0 left-0 w-full h-full bg-gradient-to-r from-transparent via-orange-500/50 to-transparent\"\n        ></div>\n      </div>\n\n      <div className=\"absolute top-0 left-0 w-0.5 h-full overflow-hidden\">\n        <div\n          ref={leftRef}\n          className=\"absolute top-0 left-0 w-full h-full bg-gradient-to-b from-transparent via-purple-500/50 to-transparent\"\n        ></div>\n      </div>\n\n      {/* Content */}\n      <div className=\"relative z-10 text-center\">\n        <h1 className=\"text-3xl md:text-4xl font-bold mb-6\">\n          <span className=\"text-white\">{normalTitle}</span>{\" \"}\n          <span className=\"bg-gradient-to-r from-orange-400 to-purple-500 text-transparent bg-clip-text\">\n            {colorfulTitle}\n          </span>\n        </h1>\n\n        <p className=\"text-gray-400 max-w-xl mx-auto mb-8\">{description}</p>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {[1, 2, 3, 4].map((item) => (\n            <div\n              key={item}\n              className=\"bg-gray-800/50 backdrop-blur-sm rounded-xl p-4 border border-gray-700 hover:border-orange-500/30 transition-all\"\n            >\n              <div className=\"flex items-center\">\n                <div className=\"w-10 h-10 rounded-full bg-gradient-to-r from-orange-500/20 to-purple-500/20 flex items-center justify-center mr-3\">\n                  <span className=\"text-orange-400\">{item}</span>\n                </div>\n                <div>\n                  <h3 className=\"font-medium text-white\">Feature {item}</h3>\n                  <p className=\"text-sm text-gray-400\">\n                    Description of feature\n                  </p>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <button className=\"mt-8 bg-gradient-to-r from-orange-600 to-purple-600 hover:from-orange-500 hover:to-purple-500 text-white font-medium py-3 px-8 rounded-xl transition-all transform hover:-translate-y-1\">\n          {buttonText}\n        </button>\n      </div>\n\n      {/* Decorative elements */}\n      <div className=\"absolute top-4 right-4 w-3 h-3 rounded-full bg-orange-500 animate-pulse\"></div>\n      <div className=\"absolute bottom-4 left-4 w-3 h-3 rounded-full bg-purple-500 animate-pulse\"></div>\n      <div className=\"absolute -top-20 -right-20 w-40 h-40 rounded-full bg-orange-500/10 blur-xl\"></div>\n      <div className=\"absolute -bottom-20 -left-20 w-40 h-40 rounded-full bg-purple-500/10 blur-xl\"></div>\n    </div>\n  );\n};\n\nexport default DynamicCard;\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/styles/dynamic-card.css",
      "content": "/* @import \"tailwindcss\"; */\n@import \"tw-animate-css\";\n\n@keyframes float {\n  0% {\n    transform: translateY(0px);\n  }\n  50% {\n    transform: translateY(-10px);\n  }\n  100% {\n    transform: translateY(0px);\n  }\n}",
      "type": "registry:component"
    }
  ]
}