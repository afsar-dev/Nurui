{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "hacker-background",
  "type": "registry:component",
  "dependencies": [
    ""
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/hacker-background-demo.tsx",
      "content": "import HackerBackground from \"./hacker-background\";\r\n\r\nexport function HackerBackgroundDemo() {\r\n  return (\r\n    <div className=\"relative z-10 h-[500px] w-full overflow-hidden rounded-lg\">\r\n      <HackerBackground />\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/hacker-background.tsx",
      "content": "\"use client\";\r\nimport React, { useEffect, useRef } from \"react\";\r\n\r\ninterface HackerBackgroundProps {\r\n  color?: string;\r\n  fontSize?: number;\r\n  className?: string;\r\n  speed?: number;\r\n}\r\n\r\nconst HackerBackground: React.FC<HackerBackgroundProps> = ({\r\n  color = \"#3ca2fa\",\r\n  fontSize = 15,\r\n  className = \"\",\r\n  speed = 1,\r\n}) => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    if (!ctx) return;\r\n\r\n    const resizeCanvas = () => {\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n    };\r\n\r\n    resizeCanvas();\r\n    window.addEventListener(\"resize\", resizeCanvas);\r\n\r\n    let animationFrameId: number;\r\n\r\n    const columns = Math.floor(canvas.width / fontSize);\r\n    const drops: number[] = new Array(columns).fill(1);\r\n\r\n    const chars =\r\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%^&*()_+\";\r\n\r\n    let lastTime = 0;\r\n    const interval = 33; // ~30 fps\r\n\r\n    const draw = (currentTime: number) => {\r\n      animationFrameId = requestAnimationFrame(draw);\r\n\r\n      if (currentTime - lastTime < interval) return;\r\n      lastTime = currentTime;\r\n\r\n      ctx.fillStyle = \"rgba(0, 0, 0, 0.05)\";\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n      ctx.fillStyle = color;\r\n      ctx.font = `${fontSize}px monospace`;\r\n\r\n      for (let i = 0; i < drops.length; i++) {\r\n        const text = chars[Math.floor(Math.random() * chars.length)];\r\n        ctx.fillText(text, i * fontSize, drops[i] * fontSize);\r\n\r\n        if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) {\r\n          drops[i] = 0;\r\n        }\r\n        drops[i] += speed; // Use the speed prop to control fall rate\r\n      }\r\n    };\r\n\r\n    animationFrameId = requestAnimationFrame(draw);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", resizeCanvas);\r\n      cancelAnimationFrame(animationFrameId);\r\n    };\r\n  }, [color, fontSize, speed]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      className={`pointer-events-none ${className}`}\r\n      style={{\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default HackerBackground;\r\n",
      "type": "registry:component"
    }
  ]
}