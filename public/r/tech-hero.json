{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tech-hero",
  "type": "registry:component",
  "dependencies": [
    "class-variance-authority",
    "framer-motion",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-slot",
    "lucide-react"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/tech-hero-demo.tsx",
      "content": "import TechHero from \"@/components/nurui/tech-hero\";\n\nconst TechHeroDemo = () => {\n  return <TechHero />;\n};\n\nexport default TechHeroDemo;\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/tech-hero.tsx",
      "content": "\"use client\";\nimport React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Button } from \"@/components/nurui/button\";\nimport { ArrowRight } from \"lucide-react\";\nimport ParticleBackground from \"@/components/nurui/particle-background\";\n\nconst TechHero = () => {\n  return (\n    <section className=\"p-6 rounded-2xl relative overflow-hidden min-h-[90vh] flex items-center\">\n      <ParticleBackground />\n      <div className=\"absolute inset-0 bg-gradient-radial from-gray-800/50 to-transparent opacity-30\"></div>\n      <div className=\"container mx-auto px-4 md:px-6 relative z-10\">\n        <div className=\"grid gap-12 lg:grid-cols-2 items-center\">\n          <motion.div\n            className=\"space-y-6\"\n            initial={{ opacity: 0, y: 50 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.3 }}\n          >\n            <motion.h1\n              className=\"text-5xl font-bold tracking-tight sm:text-6xl md:text-7xl\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5, delay: 0.5 }}\n            >\n              <motion.span\n                className=\"text-amber-500 inline-block\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ duration: 0.5, delay: 0.7 }}\n              >\n                Chiloane\n              </motion.span>{\" \"}\n              Holdings\n            </motion.h1>\n            <motion.p\n              className=\"text-xl md:text-2xl text-gray-300\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ duration: 0.5, delay: 0.9 }}\n            >\n              Empowering the Digital, Financial & Creative Economy of Africa\n            </motion.p>\n            <motion.div\n              className=\"flex flex-col sm:flex-row gap-4 pt-4\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5, delay: 1.1 }}\n            >\n              <motion.div\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Button className=\"bg-amber-500 hover:bg-amber-600 text-black relative overflow-hidden group\">\n                  <span className=\"relative z-10\">Explore Our Divisions</span>\n                  <span className=\"absolute inset-0 bg-gradient-to-r from-amber-600 to-amber-400 opacity-0 group-hover:opacity-100 transition-all duration-300 transform group-hover:scale-110\"></span>\n                </Button>\n              </motion.div>\n              <motion.div\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Button\n                  variant=\"outline\"\n                  className=\"border-amber-500 text-amber-500 hover:bg-amber-500/10 group\"\n                >\n                  <span>Contact Us</span>\n                  <motion.div\n                    initial={{ x: 0 }}\n                    whileHover={{ x: 5 }}\n                    transition={{ type: \"spring\", stiffness: 400, damping: 10 }}\n                  >\n                    <ArrowRight className=\"ml-2 h-4 w-4 group-hover:text-amber-400\" />\n                  </motion.div>\n                </Button>\n              </motion.div>\n            </motion.div>\n          </motion.div>\n          <motion.div\n            className=\"flex justify-center\"\n            initial={{ opacity: 0, scale: 0.8 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ duration: 0.8, delay: 0.5, type: \"spring\" }}\n          >\n            <div className=\"relative h-[350px] w-[350px] md:h-[450px] md:w-[450px]\">\n              <div className=\"absolute inset-0 rounded-full bg-gradient-to-br from-amber-500/20 to-amber-700/10 backdrop-blur-sm flex items-center justify-center animate-pulse-slow\"></div>\n              <motion.div\n                className=\"absolute inset-4 rounded-full bg-gradient-to-br from-amber-500/10 to-amber-700/5 backdrop-blur-md\"\n                animate={{\n                  boxShadow: [\n                    \"0 0 20px 0px rgba(245, 158, 11, 0.3)\",\n                    \"0 0 60px 10px rgba(245, 158, 11, 0.2)\",\n                    \"0 0 20px 0px rgba(245, 158, 11, 0.3)\",\n                  ],\n                }}\n                transition={{\n                  duration: 4,\n                  repeat: Number.POSITIVE_INFINITY,\n                  repeatType: \"reverse\",\n                }}\n              ></motion.div>\n              <motion.div\n                className=\"absolute inset-0 flex items-center justify-center\"\n                initial={{ opacity: 0, scale: 0.5 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ duration: 0.5, delay: 0.8 }}\n              >\n                <div className=\"relative w-48 h-48\">\n                  {/* Abstract Logo */}\n                  <svg viewBox=\"0 0 200 200\" className=\"w-full h-full\">\n                    <motion.path\n                      d=\"M100,20 L160,50 L160,150 L100,180 L40,150 L40,50 Z\"\n                      fill=\"none\"\n                      stroke=\"rgba(245, 158, 11, 0.8)\"\n                      strokeWidth=\"2\"\n                      initial={{ pathLength: 0, opacity: 0 }}\n                      animate={{ pathLength: 1, opacity: 1 }}\n                      transition={{ duration: 2, delay: 1 }}\n                    />\n                    <motion.path\n                      d=\"M100,40 L140,60 L140,140 L100,160 L60,140 L60,60 Z\"\n                      fill=\"none\"\n                      stroke=\"rgba(245, 158, 11, 0.6)\"\n                      strokeWidth=\"2\"\n                      initial={{ pathLength: 0, opacity: 0 }}\n                      animate={{ pathLength: 1, opacity: 1 }}\n                      transition={{ duration: 2, delay: 1.3 }}\n                    />\n                    <motion.path\n                      d=\"M100,60 L120,70 L120,130 L100,140 L80,130 L80,70 Z\"\n                      fill=\"rgba(245, 158, 11, 0.3)\"\n                      initial={{ scale: 0, opacity: 0 }}\n                      animate={{ scale: 1, opacity: 1 }}\n                      transition={{ duration: 1, delay: 1.6 }}\n                    />\n                    <motion.circle\n                      cx=\"100\"\n                      cy=\"100\"\n                      r=\"10\"\n                      fill=\"rgba(245, 158, 11, 1)\"\n                      initial={{ scale: 0 }}\n                      animate={{ scale: 1 }}\n                      transition={{ duration: 0.5, delay: 2 }}\n                    />\n                    <motion.path\n                      d=\"M40,50 L100,100 L160,50\"\n                      fill=\"none\"\n                      stroke=\"rgba(245, 158, 11, 0.4)\"\n                      strokeWidth=\"1\"\n                      initial={{ pathLength: 0, opacity: 0 }}\n                      animate={{ pathLength: 1, opacity: 1 }}\n                      transition={{ duration: 1.5, delay: 2.2 }}\n                    />\n                    <motion.path\n                      d=\"M40,150 L100,100 L160,150\"\n                      fill=\"none\"\n                      stroke=\"rgba(245, 158, 11, 0.4)\"\n                      strokeWidth=\"1\"\n                      initial={{ pathLength: 0, opacity: 0 }}\n                      animate={{ pathLength: 1, opacity: 1 }}\n                      transition={{ duration: 1.5, delay: 2.4 }}\n                    />\n                  </svg>\n                </div>\n              </motion.div>\n            </div>\n          </motion.div>\n        </div>\n      </div>\n      <div className=\"absolute bottom-0 left-0 right-0 h-20 bg-gradient-to-t from-[#121212] to-transparent\"></div>\n    </section>\n  );\n};\n\nexport default TechHero;\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/particle-background.tsx",
      "content": "\"use client\";\n\nimport { useEffect, useRef } from \"react\";\nimport { motion } from \"framer-motion\";\n\nconst ParticleBackground = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    // Set canvas dimensions\n    const setCanvasDimensions = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n\n    setCanvasDimensions();\n    window.addEventListener(\"resize\", setCanvasDimensions);\n\n    // Particle class\n    class Particle {\n      x: number;\n      y: number;\n      size: number;\n      speedX: number;\n      speedY: number;\n      color: string;\n\n      constructor() {\n        this.x = Math.random() * (canvas?.width ?? window.innerWidth);\n        this.y = Math.random() * (canvas?.height ?? window.innerHeight);\n        this.size = Math.random() * 3 + 0.5;\n        this.speedX = Math.random() * 0.5 - 0.25;\n        this.speedY = Math.random() * 0.5 - 0.25;\n        this.color = `rgba(245, 158, 11, ${Math.random() * 0.5})`;\n      }\n\n      update() {\n        this.x += this.speedX;\n        this.y += this.speedY;\n\n        if (canvas) {\n          if (this.x > canvas.width) this.x = 0;\n          else if (this.x < 0) this.x = canvas.width;\n\n          if (this.y > canvas.height) this.y = 0;\n          else if (this.y < 0) this.y = canvas.height;\n        }\n      }\n\n      draw() {\n        if (!ctx) return;\n        ctx.fillStyle = this.color;\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n        ctx.fill();\n      }\n    }\n\n    // Create particles\n    const particleCount = Math.min(\n      100,\n      Math.floor((window.innerWidth * window.innerHeight) / 10000),\n    );\n    const particles: Particle[] = [];\n\n    for (let i = 0; i < particleCount; i++) {\n      particles.push(new Particle());\n    }\n\n    // Animation loop\n    const animate = () => {\n      if (!ctx) return;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Draw connections\n      ctx.strokeStyle = \"rgba(245, 158, 11, 0.05)\";\n      ctx.lineWidth = 0.5;\n\n      for (let i = 0; i < particles.length; i++) {\n        for (let j = i; j < particles.length; j++) {\n          const dx = particles[i].x - particles[j].x;\n          const dy = particles[i].y - particles[j].y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n\n          if (distance < 100) {\n            ctx.beginPath();\n            ctx.moveTo(particles[i].x, particles[i].y);\n            ctx.lineTo(particles[j].x, particles[j].y);\n            ctx.stroke();\n          }\n        }\n      }\n\n      // Update and draw particles\n      particles.forEach((particle) => {\n        particle.update();\n        particle.draw();\n      });\n\n      requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    return () => {\n      window.removeEventListener(\"resize\", setCanvasDimensions);\n    };\n  }, []);\n\n  return (\n    <motion.canvas\n      ref={canvasRef}\n      className=\"absolute inset-0 z-0\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 1 }}\n    />\n  );\n};\n\nexport default ParticleBackground;\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n",
      "type": "registry:component"
    }
  ]
}