{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tech-hero",
  "type": "registry:component",
  "dependencies": [
    "class-variance-authority",
    "framer-motion",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-slot",
    "lucide-react"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/tech-hero-demo.tsx",
      "content": "import TechHero from \"@/components/nurui/tech-hero\";\r\n\r\nconst TechHeroDemo = () => {\r\n  return <TechHero />;\r\n};\r\n\r\nexport default TechHeroDemo;\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/tech-hero.tsx",
      "content": "\"use client\";\r\nimport React from \"react\";\r\nimport { motion } from \"framer-motion\";\r\nimport { Button } from \"@/components/nurui/button\";\r\nimport { ArrowRight } from \"lucide-react\";\r\nimport ParticleBackground from \"@/components/nurui/particle-background\";\r\n\r\nconst TechHero = () => {\r\n  return (\r\n    <section className=\"p-6 rounded-2xl relative overflow-hidden min-h-[90vh] flex items-center\">\r\n      <ParticleBackground />\r\n      <div className=\"absolute inset-0 bg-gradient-radial from-gray-800/50 to-transparent opacity-30\"></div>\r\n      <div className=\"container mx-auto px-4 md:px-6 relative z-10\">\r\n        <div className=\"grid gap-12 lg:grid-cols-2 items-center\">\r\n          <motion.div\r\n            className=\"space-y-6\"\r\n            initial={{ opacity: 0, y: 50 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            transition={{ duration: 0.8, delay: 0.3 }}\r\n          >\r\n            <motion.h1\r\n              className=\"text-5xl font-bold tracking-tight sm:text-6xl md:text-7xl\"\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              transition={{ duration: 0.5, delay: 0.5 }}\r\n            >\r\n              <motion.span\r\n                className=\"text-amber-500 inline-block\"\r\n                initial={{ opacity: 0, scale: 0.8 }}\r\n                animate={{ opacity: 1, scale: 1 }}\r\n                transition={{ duration: 0.5, delay: 0.7 }}\r\n              >\r\n                Chiloane\r\n              </motion.span>{\" \"}\r\n              Holdings\r\n            </motion.h1>\r\n            <motion.p\r\n              className=\"text-xl md:text-2xl text-gray-300\"\r\n              initial={{ opacity: 0 }}\r\n              animate={{ opacity: 1 }}\r\n              transition={{ duration: 0.5, delay: 0.9 }}\r\n            >\r\n              Empowering the Digital, Financial & Creative Economy of Africa\r\n            </motion.p>\r\n            <motion.div\r\n              className=\"flex flex-col sm:flex-row gap-4 pt-4\"\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              transition={{ duration: 0.5, delay: 1.1 }}\r\n            >\r\n              <motion.div\r\n                whileHover={{ scale: 1.05 }}\r\n                whileTap={{ scale: 0.95 }}\r\n              >\r\n                <Button className=\"bg-amber-500 hover:bg-amber-600 text-black relative overflow-hidden group\">\r\n                  <span className=\"relative z-10\">Explore Our Divisions</span>\r\n                  <span className=\"absolute inset-0 bg-gradient-to-r from-amber-600 to-amber-400 opacity-0 group-hover:opacity-100 transition-all duration-300 transform group-hover:scale-110\"></span>\r\n                </Button>\r\n              </motion.div>\r\n              <motion.div\r\n                whileHover={{ scale: 1.05 }}\r\n                whileTap={{ scale: 0.95 }}\r\n              >\r\n                <Button\r\n                  variant=\"outline\"\r\n                  className=\"border-amber-500 text-amber-500 hover:bg-amber-500/10 group\"\r\n                >\r\n                  <span>Contact Us</span>\r\n                  <motion.div\r\n                    initial={{ x: 0 }}\r\n                    whileHover={{ x: 5 }}\r\n                    transition={{ type: \"spring\", stiffness: 400, damping: 10 }}\r\n                  >\r\n                    <ArrowRight className=\"ml-2 h-4 w-4 group-hover:text-amber-400\" />\r\n                  </motion.div>\r\n                </Button>\r\n              </motion.div>\r\n            </motion.div>\r\n          </motion.div>\r\n          <motion.div\r\n            className=\"flex justify-center\"\r\n            initial={{ opacity: 0, scale: 0.8 }}\r\n            animate={{ opacity: 1, scale: 1 }}\r\n            transition={{ duration: 0.8, delay: 0.5, type: \"spring\" }}\r\n          >\r\n            <div className=\"relative h-[350px] w-[350px] md:h-[450px] md:w-[450px]\">\r\n              <div className=\"absolute inset-0 rounded-full bg-gradient-to-br from-amber-500/20 to-amber-700/10 backdrop-blur-sm flex items-center justify-center animate-pulse-slow\"></div>\r\n              <motion.div\r\n                className=\"absolute inset-4 rounded-full bg-gradient-to-br from-amber-500/10 to-amber-700/5 backdrop-blur-md\"\r\n                animate={{\r\n                  boxShadow: [\r\n                    \"0 0 20px 0px rgba(245, 158, 11, 0.3)\",\r\n                    \"0 0 60px 10px rgba(245, 158, 11, 0.2)\",\r\n                    \"0 0 20px 0px rgba(245, 158, 11, 0.3)\",\r\n                  ],\r\n                }}\r\n                transition={{\r\n                  duration: 4,\r\n                  repeat: Number.POSITIVE_INFINITY,\r\n                  repeatType: \"reverse\",\r\n                }}\r\n              ></motion.div>\r\n              <motion.div\r\n                className=\"absolute inset-0 flex items-center justify-center\"\r\n                initial={{ opacity: 0, scale: 0.5 }}\r\n                animate={{ opacity: 1, scale: 1 }}\r\n                transition={{ duration: 0.5, delay: 0.8 }}\r\n              >\r\n                <div className=\"relative w-48 h-48\">\r\n                  {/* Abstract Logo */}\r\n                  <svg viewBox=\"0 0 200 200\" className=\"w-full h-full\">\r\n                    <motion.path\r\n                      d=\"M100,20 L160,50 L160,150 L100,180 L40,150 L40,50 Z\"\r\n                      fill=\"none\"\r\n                      stroke=\"rgba(245, 158, 11, 0.8)\"\r\n                      strokeWidth=\"2\"\r\n                      initial={{ pathLength: 0, opacity: 0 }}\r\n                      animate={{ pathLength: 1, opacity: 1 }}\r\n                      transition={{ duration: 2, delay: 1 }}\r\n                    />\r\n                    <motion.path\r\n                      d=\"M100,40 L140,60 L140,140 L100,160 L60,140 L60,60 Z\"\r\n                      fill=\"none\"\r\n                      stroke=\"rgba(245, 158, 11, 0.6)\"\r\n                      strokeWidth=\"2\"\r\n                      initial={{ pathLength: 0, opacity: 0 }}\r\n                      animate={{ pathLength: 1, opacity: 1 }}\r\n                      transition={{ duration: 2, delay: 1.3 }}\r\n                    />\r\n                    <motion.path\r\n                      d=\"M100,60 L120,70 L120,130 L100,140 L80,130 L80,70 Z\"\r\n                      fill=\"rgba(245, 158, 11, 0.3)\"\r\n                      initial={{ scale: 0, opacity: 0 }}\r\n                      animate={{ scale: 1, opacity: 1 }}\r\n                      transition={{ duration: 1, delay: 1.6 }}\r\n                    />\r\n                    <motion.circle\r\n                      cx=\"100\"\r\n                      cy=\"100\"\r\n                      r=\"10\"\r\n                      fill=\"rgba(245, 158, 11, 1)\"\r\n                      initial={{ scale: 0 }}\r\n                      animate={{ scale: 1 }}\r\n                      transition={{ duration: 0.5, delay: 2 }}\r\n                    />\r\n                    <motion.path\r\n                      d=\"M40,50 L100,100 L160,50\"\r\n                      fill=\"none\"\r\n                      stroke=\"rgba(245, 158, 11, 0.4)\"\r\n                      strokeWidth=\"1\"\r\n                      initial={{ pathLength: 0, opacity: 0 }}\r\n                      animate={{ pathLength: 1, opacity: 1 }}\r\n                      transition={{ duration: 1.5, delay: 2.2 }}\r\n                    />\r\n                    <motion.path\r\n                      d=\"M40,150 L100,100 L160,150\"\r\n                      fill=\"none\"\r\n                      stroke=\"rgba(245, 158, 11, 0.4)\"\r\n                      strokeWidth=\"1\"\r\n                      initial={{ pathLength: 0, opacity: 0 }}\r\n                      animate={{ pathLength: 1, opacity: 1 }}\r\n                      transition={{ duration: 1.5, delay: 2.4 }}\r\n                    />\r\n                  </svg>\r\n                </div>\r\n              </motion.div>\r\n            </div>\r\n          </motion.div>\r\n        </div>\r\n      </div>\r\n      <div className=\"absolute bottom-0 left-0 right-0 h-20 bg-gradient-to-t from-[#121212] to-transparent\"></div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default TechHero;\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/particle-background.tsx",
      "content": "\"use client\";\r\n\r\nimport { useEffect, useRef } from \"react\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst ParticleBackground = () => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    if (!ctx) return;\r\n\r\n    // Set canvas dimensions\r\n    const setCanvasDimensions = () => {\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n    };\r\n\r\n    setCanvasDimensions();\r\n    window.addEventListener(\"resize\", setCanvasDimensions);\r\n\r\n    // Particle class\r\n    class Particle {\r\n      x: number;\r\n      y: number;\r\n      size: number;\r\n      speedX: number;\r\n      speedY: number;\r\n      color: string;\r\n\r\n      constructor() {\r\n        this.x = Math.random() * (canvas?.width ?? window.innerWidth);\r\n        this.y = Math.random() * (canvas?.height ?? window.innerHeight);\r\n        this.size = Math.random() * 3 + 0.5;\r\n        this.speedX = Math.random() * 0.5 - 0.25;\r\n        this.speedY = Math.random() * 0.5 - 0.25;\r\n        this.color = `rgba(245, 158, 11, ${Math.random() * 0.5})`;\r\n      }\r\n\r\n      update() {\r\n        this.x += this.speedX;\r\n        this.y += this.speedY;\r\n\r\n        if (canvas) {\r\n          if (this.x > canvas.width) this.x = 0;\r\n          else if (this.x < 0) this.x = canvas.width;\r\n\r\n          if (this.y > canvas.height) this.y = 0;\r\n          else if (this.y < 0) this.y = canvas.height;\r\n        }\r\n      }\r\n\r\n      draw() {\r\n        if (!ctx) return;\r\n        ctx.fillStyle = this.color;\r\n        ctx.beginPath();\r\n        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\r\n        ctx.fill();\r\n      }\r\n    }\r\n\r\n    // Create particles\r\n    const particleCount = Math.min(\r\n      100,\r\n      Math.floor((window.innerWidth * window.innerHeight) / 10000),\r\n    );\r\n    const particles: Particle[] = [];\r\n\r\n    for (let i = 0; i < particleCount; i++) {\r\n      particles.push(new Particle());\r\n    }\r\n\r\n    // Animation loop\r\n    const animate = () => {\r\n      if (!ctx) return;\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n      // Draw connections\r\n      ctx.strokeStyle = \"rgba(245, 158, 11, 0.05)\";\r\n      ctx.lineWidth = 0.5;\r\n\r\n      for (let i = 0; i < particles.length; i++) {\r\n        for (let j = i; j < particles.length; j++) {\r\n          const dx = particles[i].x - particles[j].x;\r\n          const dy = particles[i].y - particles[j].y;\r\n          const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n          if (distance < 100) {\r\n            ctx.beginPath();\r\n            ctx.moveTo(particles[i].x, particles[i].y);\r\n            ctx.lineTo(particles[j].x, particles[j].y);\r\n            ctx.stroke();\r\n          }\r\n        }\r\n      }\r\n\r\n      // Update and draw particles\r\n      particles.forEach((particle) => {\r\n        particle.update();\r\n        particle.draw();\r\n      });\r\n\r\n      requestAnimationFrame(animate);\r\n    };\r\n\r\n    animate();\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", setCanvasDimensions);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <motion.canvas\r\n      ref={canvasRef}\r\n      className=\"absolute inset-0 z-0\"\r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}\r\n      transition={{ duration: 1 }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ParticleBackground;\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/button.tsx",
      "content": "import * as React from \"react\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst buttonVariants = cva(\r\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\r\n        destructive:\r\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\r\n        outline:\r\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\r\n        secondary:\r\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\r\n        link: \"text-primary underline-offset-4 hover:underline\",\r\n      },\r\n      size: {\r\n        default: \"h-10 px-4 py-2\",\r\n        sm: \"h-9 rounded-md px-3\",\r\n        lg: \"h-11 rounded-md px-8\",\r\n        icon: \"h-10 w-10\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  },\r\n)\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof buttonVariants> {\r\n  asChild?: boolean\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\r\n    const Comp = asChild ? Slot : \"button\"\r\n    return (\r\n      <Comp\r\n        className={cn(buttonVariants({ variant, size, className }))}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    )\r\n  },\r\n)\r\nButton.displayName = \"Button\"\r\n\r\nexport { Button, buttonVariants }\r\n",
      "type": "registry:component"
    }
  ]
}