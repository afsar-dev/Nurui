{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "contact-form",
  "type": "registry:component",
  "dependencies": [
    "framer-motion",
    "clsx",
    "tailwind-merge"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/contact-form-demo.tsx",
      "content": "import React from \"react\";\r\nimport ContactForm from \"@/components/nurui/contact-form\";\r\n\r\nconst ContactFormDemo = () => {\r\n  return (\r\n    <div className=\"p-10\">\r\n      <ContactForm />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactFormDemo;\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/contact-form.tsx",
      "content": "import BackgroundShineButton from \"@/components/nurui/background-shine-button\";\r\nimport ShinyInput from \"@/components/nurui/shiny-input\";\r\nimport ShinyTextArea from \"@/components/nurui/shiny-text-area\";\r\n\r\nconst ContactForm = () => {\r\n  return (\r\n    <form className=\"w-full grid lg:grid-cols-2 gap-6\">\r\n      <fieldset className=\"space-y-2\">\r\n        <label className=\"capitalize font-semibold\">First name</label>\r\n        <ShinyInput\r\n          placeholder=\"Your first name\"\r\n          type=\"text\"\r\n          name=\"first_name\"\r\n          required\r\n        />\r\n      </fieldset>\r\n      <fieldset className=\"space-y-2\">\r\n        <label className=\"capitalize font-semibold\">Last name</label>\r\n        <ShinyInput\r\n          placeholder=\"Your last name\"\r\n          type=\"text\"\r\n          name=\"last_name\"\r\n          required\r\n        />\r\n      </fieldset>\r\n      <fieldset className=\"space-y-2 col-span-full\">\r\n        <label className=\"capitalize font-semibold\">Company name</label>\r\n        <ShinyInput\r\n          placeholder=\"Your organization (optional)\"\r\n          type=\"text\"\r\n          name=\"company_name\"\r\n        />\r\n      </fieldset>\r\n      <fieldset className=\"space-y-2 col-span-full\">\r\n        <label className=\"capitalize font-semibold\">Email</label>\r\n        <ShinyInput\r\n          placeholder=\"Your email address\"\r\n          type=\"email\"\r\n          name=\"email\"\r\n          required\r\n        />\r\n      </fieldset>\r\n      <fieldset className=\"space-y-2 col-span-full\">\r\n        <label className=\"capitalize font-semibold\">Phone</label>\r\n        <ShinyInput\r\n          placeholder=\"Your phone number (optional)\"\r\n          type=\"tel\"\r\n          name=\"phone_number\"\r\n        />\r\n      </fieldset>\r\n      <fieldset className=\"space-y-2 col-span-full\">\r\n        <label className=\"capitalize font-semibold\">Message</label>\r\n        <ShinyTextArea\r\n          placeholder=\"Tell us what you need or suggest!\"\r\n          name=\"message\"\r\n          rows={5}\r\n          required\r\n        />\r\n      </fieldset>\r\n      <BackgroundShineButton className=\"col-span-full\" title={\"send message\"} />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/background-shine-button.tsx",
      "content": "import { cn } from \"@/lib/utils\";\r\nimport { FC } from \"react\";\r\n\r\ninterface IProps {\r\n  title: string;\r\n  className?: string;\r\n}\r\n\r\nconst BackgroundShineButton: FC<IProps> = ({ title, className }) => {\r\n  return (\r\n    <button\r\n      type={\"submit\"}\r\n      className={cn(\r\n        \"inline-flex animate-shine items-center justify-center rounded-md border border-[var(--primary-color)] bg-[linear-gradient(110deg,#3CA2FA1A,45%,#3CA2FA4D,55%,#3CA2FA1A)] bg-[length:200%_100%] px-4 py-3 font-bold text-[var(--primary-color)] transition-colors capitalize\",\r\n        className,\r\n      )}\r\n    >\r\n      {title}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default BackgroundShineButton;\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/shiny-input.tsx",
      "content": "\"use client\";\r\nimport { useState, useRef, ReactNode } from \"react\";\r\nimport { motion, useMotionValue, useTransform } from \"framer-motion\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst ShinyInput = ({\r\n  className,\r\n  icon,\r\n  placeholder,\r\n  type,\r\n  name,\r\n  required,\r\n  borderHoverAnimation = \"1px solid var(--primary-color)\",\r\n  focus = \"focus:border-[var(--primary-color)]\",\r\n}: {\r\n  className?: string;\r\n  icon?: ReactNode;\r\n  placeholder: string;\r\n  type: string;\r\n  name: string;\r\n  required?: boolean;\r\n  borderHoverAnimation?: string;\r\n  focus?: string;\r\n}) => {\r\n  const divRef = useRef<HTMLInputElement | null>(null);\r\n  const [, setIsFocused] = useState(false);\r\n  const positionX = useMotionValue(0);\r\n  const positionY = useMotionValue(0);\r\n  const [opacity, setOpacity] = useState(0);\r\n\r\n  const handleMouseMove = (e: React.MouseEvent<HTMLInputElement>) => {\r\n    if (divRef.current) {\r\n      const rect = divRef.current.getBoundingClientRect();\r\n      positionX.set(e.clientX - rect.left);\r\n      positionY.set(e.clientY - rect.top);\r\n    }\r\n  };\r\n\r\n  const handleFocus = () => {\r\n    setIsFocused(true);\r\n    setOpacity(1);\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    setIsFocused(false);\r\n    setOpacity(0);\r\n  };\r\n\r\n  const handleMouseEnter = () => setOpacity(1);\r\n  const handleMouseLeave = () => setOpacity(0);\r\n\r\n  const shineBorder = useTransform(\r\n    [positionX, positionY],\r\n    ([x, y]) =>\r\n      `radial-gradient(30% 30px at ${x}px ${y}px, black 45%, transparent)`,\r\n  );\r\n\r\n  return (\r\n    <div className={cn(\"relative z-40\", className)}>\r\n      <input\r\n        onMouseMove={handleMouseMove}\r\n        onFocus={handleFocus}\r\n        onBlur={handleBlur}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        autoComplete=\"off\"\r\n        placeholder={placeholder}\r\n        type={type}\r\n        name={name}\r\n        required={required}\r\n        className={`h-12 w-full cursor-pointer rounded-md border border-[var(--glass-color)] bg-[var(--glass-color)] p-3.5 \r\n        text-[var(--black-color)] dark:text-[var(--white-color)] transition-colors duration-500 placeholder:select-none placeholder:text-[var(--placeholder-color)] ${focus} focus:outline-none`}\r\n      />\r\n\r\n      <motion.input\r\n        type=\"text\"\r\n        ref={divRef}\r\n        disabled\r\n        style={{\r\n          border: borderHoverAnimation,\r\n          opacity,\r\n          WebkitMaskImage: shineBorder,\r\n          maskImage: shineBorder,\r\n        }}\r\n        aria-hidden=\"true\"\r\n        className=\"pointer-events-none absolute left-0 top-0 z-10 h-12 w-full cursor-default rounded-md border \r\n        border-[var(--secondary-color)] bg-transparent p-3.5 opacity-0 transition-opacity duration-500 placeholder:select-none\"\r\n      />\r\n      {icon}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShinyInput;\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/shiny-text-area.tsx",
      "content": "\"use client\";\r\nimport { useState, useRef, ReactNode } from \"react\";\r\nimport { motion, useMotionValue, useTransform } from \"framer-motion\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst ShinyTextArea = ({\r\n  className,\r\n  icon,\r\n  placeholder,\r\n  name,\r\n  rows = 4,\r\n  required,\r\n  borderHoverAnimation = \"1px solid var(--primary-color)\",\r\n  focus = \"focus:border-[var(--primary-color)]\",\r\n}: {\r\n  className?: string;\r\n  icon?: ReactNode;\r\n  placeholder: string;\r\n  name: string;\r\n  rows?: number;\r\n  required?: boolean;\r\n  borderHoverAnimation?: string;\r\n  focus?: string;\r\n}) => {\r\n  const divRef = useRef<HTMLTextAreaElement | null>(null);\r\n  const [, setIsFocused] = useState(false);\r\n  const positionX = useMotionValue(0);\r\n  const positionY = useMotionValue(0);\r\n  const [opacity, setOpacity] = useState(0);\r\n\r\n  const handleMouseMove = (e: React.MouseEvent<HTMLTextAreaElement>) => {\r\n    if (divRef.current) {\r\n      const rect = divRef.current.getBoundingClientRect();\r\n      positionX.set(e.clientX - rect.left);\r\n      positionY.set(e.clientY - rect.top);\r\n    }\r\n  };\r\n\r\n  const handleFocus = () => {\r\n    setIsFocused(true);\r\n    setOpacity(1);\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    setIsFocused(false);\r\n    setOpacity(0);\r\n  };\r\n\r\n  const handleMouseEnter = () => setOpacity(1);\r\n  const handleMouseLeave = () => setOpacity(0);\r\n\r\n  const shineBorder = useTransform(\r\n    [positionX, positionY],\r\n    ([x, y]) =>\r\n      `radial-gradient(30% 30px at ${x}px ${y}px, black 45%, transparent)`,\r\n  );\r\n\r\n  return (\r\n    <div className={cn(\"relative z-40\", className)}>\r\n      <textarea\r\n        onMouseMove={handleMouseMove}\r\n        onFocus={handleFocus}\r\n        onBlur={handleBlur}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        autoComplete=\"off\"\r\n        placeholder={placeholder}\r\n        name={name}\r\n        rows={rows}\r\n        required={required}\r\n        className={`w-full cursor-pointer h-36 rounded-md border border-[var(--glass-color)] bg-[var(--glass-color)] p-3.5 \r\n        text-[var(--black-color)] dark:text-[var(--white-color)] transition-colors duration-500 placeholder:select-none placeholder:text-[var(--placeholder-color)] ${focus} focus:outline-none resize-none`}\r\n      />\r\n\r\n      <motion.textarea\r\n        ref={divRef}\r\n        disabled\r\n        style={{\r\n          border: borderHoverAnimation,\r\n          opacity,\r\n          WebkitMaskImage: shineBorder,\r\n          maskImage: shineBorder,\r\n        }}\r\n        aria-hidden=\"true\"\r\n        className=\"pointer-events-none absolute h-36 left-0 top-0 z-10 w-full cursor-default rounded-md border border-[var(--secondary-color)] bg-transparent p-3.5 opacity-0 transition-opacity duration-500 placeholder:select-none\"\r\n      />\r\n      {icon}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShinyTextArea;",
      "type": "registry:component"
    }
  ]
}