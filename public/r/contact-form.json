{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "contact-form",
  "type": "registry:component",
  "dependencies": [
    "framer-motion",
    "clsx",
    "tailwind-merge"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/contact-form-demo.tsx",
      "content": "import React from \"react\";\nimport ContactForm from \"@/components/nurui/contact-form\";\n\nconst ContactFormDemo = () => {\n  return (\n    <div className=\"p-10\">\n      <ContactForm />\n    </div>\n  );\n};\n\nexport default ContactFormDemo;\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/contact-form.tsx",
      "content": "import BackgroundShineButton from \"@/components/nurui/background-shine-button\";\nimport ShinyInput from \"@/components/nurui/shiny-input\";\nimport ShinyTextArea from \"@/components/nurui/shiny-text-area\";\n\nconst ContactForm = () => {\n  return (\n    <form className=\"w-full grid lg:grid-cols-2 gap-6\">\n      <fieldset className=\"space-y-2\">\n        <label className=\"capitalize font-semibold\">First name</label>\n        <ShinyInput\n          placeholder=\"Your first name\"\n          type=\"text\"\n          name=\"first_name\"\n          required\n        />\n      </fieldset>\n      <fieldset className=\"space-y-2\">\n        <label className=\"capitalize font-semibold\">Last name</label>\n        <ShinyInput\n          placeholder=\"Your last name\"\n          type=\"text\"\n          name=\"last_name\"\n          required\n        />\n      </fieldset>\n      <fieldset className=\"space-y-2 col-span-full\">\n        <label className=\"capitalize font-semibold\">Company name</label>\n        <ShinyInput\n          placeholder=\"Your organization (optional)\"\n          type=\"text\"\n          name=\"company_name\"\n        />\n      </fieldset>\n      <fieldset className=\"space-y-2 col-span-full\">\n        <label className=\"capitalize font-semibold\">Email</label>\n        <ShinyInput\n          placeholder=\"Your email address\"\n          type=\"email\"\n          name=\"email\"\n          required\n        />\n      </fieldset>\n      <fieldset className=\"space-y-2 col-span-full\">\n        <label className=\"capitalize font-semibold\">Phone</label>\n        <ShinyInput\n          placeholder=\"Your phone number (optional)\"\n          type=\"tel\"\n          name=\"phone_number\"\n        />\n      </fieldset>\n      <fieldset className=\"space-y-2 col-span-full\">\n        <label className=\"capitalize font-semibold\">Message</label>\n        <ShinyTextArea\n          placeholder=\"Tell us what you need or suggest!\"\n          name=\"message\"\n          rows={5}\n          required\n        />\n      </fieldset>\n      <BackgroundShineButton className=\"col-span-full\" title={\"send message\"} />\n    </form>\n  );\n};\n\nexport default ContactForm;\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/background-shine-button.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport { FC } from \"react\";\n\ninterface IProps {\n  title: string;\n  className?: string;\n}\n\nconst BackgroundShineButton: FC<IProps> = ({ title, className }) => {\n  return (\n    <button\n      type={\"submit\"}\n      className={cn(\n        \"inline-flex animate-shine items-center justify-center rounded-md border border-[var(--primary-color)] bg-[linear-gradient(110deg,#3CA2FA1A,45%,#3CA2FA4D,55%,#3CA2FA1A)] bg-[length:200%_100%] px-4 py-3 font-bold text-[var(--primary-color)] transition-colors capitalize\",\n        className,\n      )}\n    >\n      {title}\n    </button>\n  );\n};\n\nexport default BackgroundShineButton;\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/shiny-input.tsx",
      "content": "\"use client\";\nimport { useState, useRef, ReactNode } from \"react\";\nimport { motion, useMotionValue, useTransform } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\nconst ShinyInput = ({\n  className,\n  icon,\n  placeholder,\n  type,\n  name,\n  required,\n  borderHoverAnimation = \"1px solid var(--primary-color)\",\n  focus = \"focus:border-[var(--primary-color)]\",\n}: {\n  className?: string;\n  icon?: ReactNode;\n  placeholder: string;\n  type: string;\n  name: string;\n  required?: boolean;\n  borderHoverAnimation?: string;\n  focus?: string;\n}) => {\n  const divRef = useRef<HTMLInputElement | null>(null);\n  const [, setIsFocused] = useState(false);\n  const positionX = useMotionValue(0);\n  const positionY = useMotionValue(0);\n  const [opacity, setOpacity] = useState(0);\n\n  const handleMouseMove = (e: React.MouseEvent<HTMLInputElement>) => {\n    if (divRef.current) {\n      const rect = divRef.current.getBoundingClientRect();\n      positionX.set(e.clientX - rect.left);\n      positionY.set(e.clientY - rect.top);\n    }\n  };\n\n  const handleFocus = () => {\n    setIsFocused(true);\n    setOpacity(1);\n  };\n\n  const handleBlur = () => {\n    setIsFocused(false);\n    setOpacity(0);\n  };\n\n  const handleMouseEnter = () => setOpacity(1);\n  const handleMouseLeave = () => setOpacity(0);\n\n  const shineBorder = useTransform(\n    [positionX, positionY],\n    ([x, y]) =>\n      `radial-gradient(30% 30px at ${x}px ${y}px, black 45%, transparent)`,\n  );\n\n  return (\n    <div className={cn(\"relative z-40\", className)}>\n      <input\n        onMouseMove={handleMouseMove}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        autoComplete=\"off\"\n        placeholder={placeholder}\n        type={type}\n        name={name}\n        required={required}\n        className={`h-12 w-full cursor-pointer rounded-md border border-[var(--glass-color)] bg-[var(--glass-color)] p-3.5 \n        text-[var(--black-color)] dark:text-[var(--white-color)] transition-colors duration-500 placeholder:select-none placeholder:text-[var(--placeholder-color)] ${focus} focus:outline-none`}\n      />\n\n      <motion.input\n        type=\"text\"\n        ref={divRef}\n        disabled\n        style={{\n          border: borderHoverAnimation,\n          opacity,\n          WebkitMaskImage: shineBorder,\n          maskImage: shineBorder,\n        }}\n        aria-hidden=\"true\"\n        className=\"pointer-events-none absolute left-0 top-0 z-10 h-12 w-full cursor-default rounded-md border \n        border-[var(--secondary-color)] bg-transparent p-3.5 opacity-0 transition-opacity duration-500 placeholder:select-none\"\n      />\n      {icon}\n    </div>\n  );\n};\n\nexport default ShinyInput;\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/shiny-text-area.tsx",
      "content": "\"use client\";\nimport { useState, useRef, ReactNode } from \"react\";\nimport { motion, useMotionValue, useTransform } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\nconst ShinyTextArea = ({\n  className,\n  icon,\n  placeholder,\n  name,\n  rows = 4,\n  required,\n  borderHoverAnimation = \"1px solid var(--primary-color)\",\n  focus = \"focus:border-[var(--primary-color)]\",\n}: {\n  className?: string;\n  icon?: ReactNode;\n  placeholder: string;\n  name: string;\n  rows?: number;\n  required?: boolean;\n  borderHoverAnimation?: string;\n  focus?: string;\n}) => {\n  const divRef = useRef<HTMLTextAreaElement | null>(null);\n  const [, setIsFocused] = useState(false);\n  const positionX = useMotionValue(0);\n  const positionY = useMotionValue(0);\n  const [opacity, setOpacity] = useState(0);\n\n  const handleMouseMove = (e: React.MouseEvent<HTMLTextAreaElement>) => {\n    if (divRef.current) {\n      const rect = divRef.current.getBoundingClientRect();\n      positionX.set(e.clientX - rect.left);\n      positionY.set(e.clientY - rect.top);\n    }\n  };\n\n  const handleFocus = () => {\n    setIsFocused(true);\n    setOpacity(1);\n  };\n\n  const handleBlur = () => {\n    setIsFocused(false);\n    setOpacity(0);\n  };\n\n  const handleMouseEnter = () => setOpacity(1);\n  const handleMouseLeave = () => setOpacity(0);\n\n  const shineBorder = useTransform(\n    [positionX, positionY],\n    ([x, y]) =>\n      `radial-gradient(30% 30px at ${x}px ${y}px, black 45%, transparent)`,\n  );\n\n  return (\n    <div className={cn(\"relative z-40\", className)}>\n      <textarea\n        onMouseMove={handleMouseMove}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        autoComplete=\"off\"\n        placeholder={placeholder}\n        name={name}\n        rows={rows}\n        required={required}\n        className={`w-full cursor-pointer h-36 rounded-md border border-[var(--glass-color)] bg-[var(--glass-color)] p-3.5 \n        text-[var(--black-color)] dark:text-[var(--white-color)] transition-colors duration-500 placeholder:select-none placeholder:text-[var(--placeholder-color)] ${focus} focus:outline-none resize-none`}\n      />\n\n      <motion.textarea\n        ref={divRef}\n        disabled\n        style={{\n          border: borderHoverAnimation,\n          opacity,\n          WebkitMaskImage: shineBorder,\n          maskImage: shineBorder,\n        }}\n        aria-hidden=\"true\"\n        className=\"pointer-events-none absolute h-36 left-0 top-0 z-10 w-full cursor-default rounded-md border border-[var(--secondary-color)] bg-transparent p-3.5 opacity-0 transition-opacity duration-500 placeholder:select-none\"\n      />\n      {icon}\n    </div>\n  );\n};\n\nexport default ShinyTextArea;",
      "type": "registry:component"
    }
  ]
}