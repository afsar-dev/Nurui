{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "story",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "tailwind-merge",
    "class-variance-authority",
    "@radix-ui/react-slot",
    "@radix-ui/react-dialog",
    "lucide-react",
    "@radix-ui/react-avatar"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/story-demo.tsx",
      "content": "import { Avatar, AvatarFallback, AvatarImage } from \"@/components/nurui/avatar\";\nimport { VisuallyHidden } from \"@radix-ui/react-visually-hidden\";\nimport {\n  Story,\n  StoryProgress,\n  StoryControls,\n  StorySlide,\n  StoryOverlay,\n} from \"@/components/nurui/story\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogDescription,\n} from \"@/components/nurui/story-dialog\";\nimport Image from \"next/image\";\n\nconst FABRIZIO_STORIES = [\n  {\n    title: \"Champions league will begin soon\",\n    caption: \"whos you are running for ?\",\n    storyImage:\n      \"https://images.unsplash.com/photo-1569617234470-9e9813ee1dae?q=80&w=2235&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n  },\n  {\n    title: \"who's your favourite player ?\",\n    caption: \"who you think will win the champions league ?\",\n    storyImage:\n      \"https://images.unsplash.com/photo-1570498839593-e565b39455fc?q=80&w=2235&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n  },\n];\n\nconst SHADCN_STORIES = [\n  {\n    title: \"Easy vibes\",\n    caption: \"In the System Prompts.\",\n    storyImage:\n      \"https://pbs.twimg.com/media/Gr5BeX6WwAAgGH_?format=jpg&name=large\",\n  },\n  {\n    title: \"The new calendar.tsx is here\",\n    caption: `\n      â†’ Latest react-daypicker\n      â†’ Tailwind v3 and v4\n      â†’ Date, range & time pickers\n      â†’ Persian, Hijri & timezone support\n      â†’ 30+ examples to copy, paste, and build.\n    `,\n    storyImage:\n      \"https://pbs.twimg.com/media/GsxdzRfb0AIUBSs?format=jpg&name=large\",\n  },\n  {\n    title: \"ðŸ¤£ðŸ¤£ðŸ¤£ðŸ¤£ðŸ¤£\",\n    caption: \"Me walking away after adding min-w-0 and it works.\",\n    storyImage:\n      \"https://pbs.twimg.com/media/Gsh-UBoasAM_Uin?format=jpg&name=medium\",\n  },\n];\n\nconst NBA_STORIES = [\n  {\n    title: \"Shai follows 38 in Game 1 with 34 tonight ðŸ”¥ðŸ”¥ðŸ”¥\",\n    caption:\n      \"MOST POINTS EVER by a player in his first 2 career Finals games ðŸš¨ðŸš¨\",\n    storyImage:\n      \"https://pbs.twimg.com/media/Gs-BiiMbsAAIK9p?format=jpg&name=large\",\n  },\n];\n\nconst StoryDemo = () => {\n  return (\n    <section className=\"p-20 w-full place-content-center\">\n      <div className=\"flex gap-4 justify-center\">\n        {/* ======== FABRIZIO STORIES ======== */}\n        <Dialog>\n          <DialogTrigger>\n            <Avatar className=\"size-12\">\n              <AvatarImage\n                src=\"https://scontent.forn3-5.fna.fbcdn.net/v/t39.30808-1/347110386_993663875383747_583934797072922306_n.jpg\"\n                alt=\"@fabrizioRomano\"\n              />\n              <AvatarFallback>FR</AvatarFallback>\n            </Avatar>\n          </DialogTrigger>\n          <DialogContent className=\"aspect-[12/16] w-auto h-[90vh] overflow-hidden p-0\">\n            <VisuallyHidden asChild>\n              <DialogTitle>Story</DialogTitle>\n            </VisuallyHidden>\n            {/* âœ… Added Description */}\n            <VisuallyHidden asChild>\n              <DialogDescription>\n                Instagram-style story viewer\n              </DialogDescription>\n            </VisuallyHidden>\n\n            <Story\n              className=\"relative size-full\"\n              duration={5000}\n              mediaLength={FABRIZIO_STORIES.length}\n            >\n              <DialogHeader className=\"px-4 py-6\">\n                <div className=\"relative z-10 flex items-center gap-2\">\n                  <Avatar className=\"size-10\">\n                    <AvatarImage\n                      src=\"https://scontent.forn3-5.fna.fbcdn.net/v/t39.30808-1/347110386_993663875383747_583934797072922306_n.jpg\"\n                      alt=\"@fabrizioRomano\"\n                    />\n                    <AvatarFallback>FR</AvatarFallback>\n                  </Avatar>\n                  <StoryProgress\n                    className=\"flex-1\"\n                    progressWrapClass=\"h-1.5\"\n                    progressActiveClass=\"bg-blue-500\"\n                  />\n                  <StoryControls\n                    variant=\"ghost\"\n                    className=\"text-white rounded-full\"\n                  />\n                </div>\n              </DialogHeader>\n              {FABRIZIO_STORIES.map((story, idx) => (\n                <StorySlide\n                  key={idx}\n                  index={idx}\n                  className=\"absolute inset-0 size-full\"\n                >\n                  <Image\n                    src={story.storyImage}\n                    className=\"w-full h-auto\"\n                    alt={story.title}\n                    fill\n                    draggable={false}\n                    unoptimized\n                  />\n                  <div className=\"absolute bottom-4 left-4 z-10 space-y-1 text-white p-4\">\n                    <a\n                      className=\"text-secondary\"\n                      href=\"https://x.com/FabrizioRomano\"\n                    >\n                      @FabrizioRomano\n                    </a>\n                    <h3 className=\"text-medium tracking-tight text-foreground-muted\">\n                      {story.title}\n                    </h3>\n                    <p className=\"text-sm text-slate-200\">{story.caption}</p>\n                  </div>\n                </StorySlide>\n              ))}\n              <StoryOverlay />\n            </Story>\n          </DialogContent>\n        </Dialog>\n\n        {/* ======== SHADCN STORIES ======== */}\n        <Dialog>\n          <DialogTrigger>\n            <Avatar className=\"size-12\">\n              <AvatarImage\n                src=\"https://pbs.twimg.com/profile_images/1593304942210478080/TUYae5z7_400x400.jpg\"\n                alt=\"@shadcn\"\n              />\n              <AvatarFallback>SC</AvatarFallback>\n            </Avatar>\n          </DialogTrigger>\n          <DialogContent className=\"aspect-[12/16] w-auto h-[90vh] overflow-hidden p-0 rounded-md\">\n            <VisuallyHidden asChild>\n              <DialogTitle>Story</DialogTitle>\n            </VisuallyHidden>\n            <VisuallyHidden asChild>\n              <DialogDescription>\n                Instagram-style story viewer\n              </DialogDescription>\n            </VisuallyHidden>\n\n            <Story\n              className=\"relative size-full\"\n              duration={5000}\n              mediaLength={SHADCN_STORIES.length}\n            >\n              <DialogHeader className=\"px-4 py-6\">\n                <div className=\"relative z-10 flex items-center gap-2\">\n                  <Avatar className=\"size-10\">\n                    <AvatarImage\n                      src=\"https://pbs.twimg.com/profile_images/1593304942210478080/TUYae5z7_400x400.jpg\"\n                      alt=\"@shadcn\"\n                    />\n                    <AvatarFallback>SC</AvatarFallback>\n                  </Avatar>\n                  <StoryProgress\n                    className=\"flex-1\"\n                    progressWrapClass=\"h-1.5\"\n                    progressActiveClass=\"bg-pink-500\"\n                  />\n                  <StoryControls\n                    variant=\"ghost\"\n                    className=\"text-white rounded-full\"\n                  />\n                </div>\n              </DialogHeader>\n              {SHADCN_STORIES.map((story, idx) => (\n                <StorySlide\n                  key={idx}\n                  index={idx}\n                  className=\"absolute inset-0 size-full\"\n                >\n                  <Image\n                    src={story.storyImage}\n                    className=\"w-full h-auto\"\n                    alt={story.title}\n                    fill\n                    draggable={false}\n                    unoptimized\n                  />\n                  <div className=\"absolute bottom-4 left-4 z-10 space-y-1 text-white p-4\">\n                    <a className=\"text-secondary\" href=\"https://x.com/Shadcn\">\n                      @Shadcn\n                    </a>\n                    <h3 className=\"text-medium tracking-tight text-foreground-muted\">\n                      {story.title}\n                    </h3>\n                    <p className=\"text-sm text-slate-200\">{story.caption}</p>\n                  </div>\n                </StorySlide>\n              ))}\n              <StoryOverlay />\n            </Story>\n          </DialogContent>\n        </Dialog>\n\n        {/* ======== NBA STORIES ======== */}\n        <Dialog>\n          <DialogTrigger>\n            <Avatar className=\"size-12\">\n              <AvatarImage\n                src=\"https://pbs.twimg.com/profile_images/1931904469446377472/mjaR8LDc_400x400.jpg\"\n                alt=\"@nba\"\n              />\n              <AvatarFallback>NB</AvatarFallback>\n            </Avatar>\n          </DialogTrigger>\n          <DialogContent className=\"aspect-[12/16] w-auto h-[90vh] overflow-hidden p-0 rounded-md\">\n            <VisuallyHidden asChild>\n              <DialogTitle>Story</DialogTitle>\n            </VisuallyHidden>\n            <VisuallyHidden asChild>\n              <DialogDescription>\n                Instagram-style story viewer\n              </DialogDescription>\n            </VisuallyHidden>\n\n            <Story\n              className=\"relative size-full\"\n              duration={8000}\n              mediaLength={NBA_STORIES.length}\n            >\n              <DialogHeader className=\"px-4 py-6\">\n                <div className=\"relative z-10 flex items-center gap-2\">\n                  <Avatar className=\"size-10\">\n                    <AvatarImage\n                      src=\"https://pbs.twimg.com/profile_images/1931904469446377472/mjaR8LDc_400x400.jpg\"\n                      alt=\"@nba\"\n                    />\n                    <AvatarFallback>NB</AvatarFallback>\n                  </Avatar>\n                  <StoryProgress\n                    className=\"flex-1\"\n                    progressWrapClass=\"h-1.5\"\n                    progressActiveClass=\"bg-red-500\"\n                  />\n                  <StoryControls\n                    variant=\"ghost\"\n                    className=\"text-white rounded-full\"\n                  />\n                </div>\n              </DialogHeader>\n              {NBA_STORIES.map((story, idx) => (\n                <StorySlide\n                  key={idx}\n                  index={idx}\n                  className=\"absolute inset-0 size-full\"\n                >\n                  <Image\n                    src={story.storyImage}\n                    className=\"w-full h-auto\"\n                    alt={story.title}\n                    fill\n                    draggable={false}\n                    unoptimized\n                  />\n                  <div className=\"absolute bottom-4 left-4 z-10 space-y-1 text-white p-4\">\n                    <a className=\"text-secondary\" href=\"https://x.com/nba\">\n                      @nba\n                    </a>\n                    <h3 className=\"text-medium tracking-tight text-foreground-muted\">\n                      {story.title}\n                    </h3>\n                    <p className=\"text-sm text-slate-200\">{story.caption}</p>\n                  </div>\n                </StorySlide>\n              ))}\n              <StoryOverlay />\n            </Story>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </section>\n  );\n};\n\nexport { StoryDemo };",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/story.tsx",
      "content": "\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport * as React from \"react\";\nimport { StoryButton, ButtonProps } from \"@/components/nurui/story-button\";\nimport { PauseIcon, PlayIcon, ReplyIcon } from \"lucide-react\";\n\ninterface StoryProps extends React.HTMLAttributes<HTMLDivElement> {\n  mediaLength: number;\n  duration?: number;\n}\ninterface StoryContextValue {\n  mediaLength: number;\n  currentIndex: number;\n  progress: number;\n  isPaused: boolean;\n  isEnded: boolean;\n  handleControl: () => void;\n  setCurrentIndex: (index: number) => void;\n  setIsPaused: (paused: boolean) => void;\n  setIsEnded: (ended: boolean) => void;\n}\nconst StoryContext = React.createContext<StoryContextValue | undefined>(\n  undefined,\n);\nfunction useStoryContext() {\n  const context = React.useContext(StoryContext);\n  if (context === undefined) {\n    throw new Error(\"useStoryContext must be used within a StoryProvider\");\n  }\n  return context;\n}\nexport const Story = React.forwardRef<HTMLDivElement, StoryProps>(\n  ({ mediaLength, duration = 2000, className, children, ...props }, ref) => {\n    const [currentIndex, setCurrentIndex] = React.useState(0);\n    const [progress, setProgress] = React.useState(0);\n    const [isPaused, setIsPaused] = React.useState(false);\n    const [isEnded, setIsEnded] = React.useState(false);\n    const progressRef = React.useRef<number>(0);\n    const intervalRef = React.useRef<ReturnType<typeof setInterval> | null>(\n      null,\n    );\n\n    React.useEffect(() => {\n      progressRef.current = 0;\n      setProgress(0);\n    }, [currentIndex, duration, mediaLength]);\n    React.useEffect(() => {\n      if (mediaLength === 0 || isPaused) return;\n\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n\n      const tick = 50;\n      const totalTicks = duration / tick;\n\n      intervalRef.current = setInterval(() => {\n        progressRef.current += 1;\n        const newProgress = (progressRef.current / totalTicks) * 100;\n        setProgress(newProgress);\n\n        if (progressRef.current >= totalTicks) {\n          clearInterval(intervalRef.current!);\n          intervalRef.current = null;\n\n          if (currentIndex < mediaLength - 1) {\n            setCurrentIndex((idx) => idx + 1);\n          } else {\n            setIsPaused(true);\n            setIsEnded(true);\n          }\n        }\n      }, tick);\n\n      return () => {\n        if (intervalRef.current) {\n          clearInterval(intervalRef.current);\n          intervalRef.current = null;\n        }\n      };\n    }, [isPaused, currentIndex, duration, mediaLength]);\n\n    if (mediaLength === 0) {\n      return (\n        <div className=\"text-center text-secondary\">No stories to display</div>\n      );\n    }\n\n    const handleControl = () => {\n      if (isEnded) {\n        setCurrentIndex(0);\n        setIsEnded(false);\n        setIsPaused(false);\n      } else {\n        setIsPaused((prev) => !prev);\n      }\n    };\n\n    return (\n      <StoryContext.Provider\n        value={{\n          mediaLength,\n          currentIndex,\n          progress,\n          isPaused,\n          isEnded,\n          handleControl,\n          setCurrentIndex,\n          setIsPaused,\n          setIsEnded,\n        }}\n      >\n        <div className={cn(\"mx-auto\", className)} ref={ref} {...props}>\n          {children}\n        </div>\n      </StoryContext.Provider>\n    );\n  },\n);\nStory.displayName = \"Story\";\n\nexport const StoryProgress = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & {\n    progressWrapClass?: string;\n    progressActiveClass?: string;\n  }\n>(({ className, progressWrapClass, progressActiveClass, ...props }, ref) => {\n  const {\n    mediaLength,\n    currentIndex,\n    progress,\n    setCurrentIndex,\n    setIsEnded,\n    setIsPaused,\n  } = useStoryContext();\n\n  const handleProgressClick = (index: number) => {\n    setCurrentIndex(index);\n    setIsPaused(false);\n    setIsEnded(false);\n  };\n\n  return (\n    <div className={cn(\"space-x-1 flex\", className)} ref={ref} {...props}>\n      {Array.from({ length: mediaLength }).map((_, index) => {\n        const isActive = index === currentIndex;\n        const isCompleted = index < currentIndex;\n\n        return (\n          <div\n            key={index}\n            className={cn(\n              \"h-1 flex-1 rounded bg-secondary cursor-pointer transition-colors\",\n              \"hover:bg-secondary/80\",\n              progressWrapClass,\n            )}\n            onClick={() => handleProgressClick(index)}\n            role=\"button\"\n            tabIndex={0}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\" || e.key === \" \") {\n                handleProgressClick(index);\n              }\n            }}\n          >\n            <div\n              className={cn(\n                \"h-full rounded-[inherit] transition-all duration-200\",\n                isActive\n                  ? \"bg-primary\"\n                  : isCompleted\n                    ? \"bg-primary\"\n                    : \"bg-transparent\",\n                progressActiveClass,\n              )}\n              style={{\n                width: isActive ? `${progress}%` : isCompleted ? \"100%\" : \"0%\",\n              }}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n});\nStoryProgress.displayName = \"StoryProgress\";\n\nexport const StorySlide = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const { currentIndex } = useStoryContext();\n  if (index !== currentIndex) return null;\n  return (\n    <div className={cn(\"animate-in fade-in\", className)} ref={ref} {...props} />\n  );\n});\nStorySlide.displayName = \"StorySlide\";\n\nexport const StoryControls = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, ...props }, ref) => {\n    const { isPaused, isEnded, handleControl } = useStoryContext();\n    return (\n      <StoryButton\n        onClick={handleControl}\n        size=\"icon\"\n        {...props}\n        ref={ref}\n        className={className}\n      >\n        {isPaused ? isEnded ? <ReplyIcon /> : <PlayIcon /> : <PauseIcon />}\n      </StoryButton>\n    );\n  },\n);\nStoryControls.displayName = \"StoryControls\";\n\nexport const StoryOverlay: React.FC = () => (\n  <div className=\" absolute inset-0 \">\n    <div className=\"absolute inset-x-0 top-0 h-24 bg-gradient-to-b from-black to-transparent\" />\n    <div className=\"absolute inset-x-0 bottom-0 h-40 bg-gradient-to-t from-black to-transparent\" />\n  </div>\n);\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/story-button.tsx",
      "content": "import { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-lg text-sm font-medium transition-colors outline-offset-2 focus-visible:outline focus-visible:outline-2 focus-visible:outline-ring/70 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground shadow-sm shadow-black/5 hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm shadow-black/5 hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm shadow-black/5 hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm shadow-black/5 hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-lg px-3 text-xs\",\n        lg: \"h-10 rounded-lg px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst StoryButton = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />\n    );\n  },\n);\nStoryButton.displayName = \"StoryButton\";\n\nexport { StoryButton, buttonVariants };",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/story-dialog.tsx",
      "content": "\"use client\";\n\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Cross2Icon } from \"@radix-ui/react-icons\";\n\nconst Dialog = DialogPrimitive.Root;\n\nconst DialogTrigger = DialogPrimitive.Trigger;\n\nconst DialogPortal = DialogPrimitive.Portal;\n\nconst DialogClose = DialogPrimitive.Close;\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-[101] bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className,\n    )}\n    {...props}\n  />\n));\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName;\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-1/2 top-1/2 z-[101] grid max-h-[calc(100%-4rem)] w-full -translate-x-1/2 -translate-y-1/2 gap-4 overflow-y-auto border bg-background p-6 shadow-lg shadow-black/5 duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:max-w-[400px] sm:rounded-xl\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"group absolute right-3 top-3 flex size-7 items-center justify-center rounded-lg outline-offset-2 transition-colors focus-visible:outline focus-visible:outline-2 focus-visible:outline-ring/70 disabled:pointer-events-none\">\n        <Cross2Icon\n          width={16}\n          height={16}\n          strokeWidth={2}\n          className=\"opacity-60 transition-opacity group-hover:opacity-100\"\n        />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n));\nDialogContent.displayName = DialogPrimitive.Content.displayName;\n\nconst DialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"flex flex-col space-y-1.5 text-center sm:text-left\", className)} {...props} />\n);\nDialogHeader.displayName = \"DialogHeader\";\n\nconst DialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end sm:gap-3\", className)}\n    {...props}\n  />\n);\nDialogFooter.displayName = \"DialogFooter\";\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold tracking-tight\", className)}\n    {...props}\n  />\n));\nDialogTitle.displayName = DialogPrimitive.Title.displayName;\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nDialogDescription.displayName = DialogPrimitive.Description.displayName;\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n};",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/avatar.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className,\n    )}\n    {...props}\n  />\n));\nAvatar.displayName = AvatarPrimitive.Root.displayName;\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n));\nAvatarImage.displayName = AvatarPrimitive.Image.displayName;\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className,\n    )}\n    {...props}\n  />\n));\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;\n\nexport { Avatar, AvatarImage, AvatarFallback };\n",
      "type": "registry:component"
    }
  ]
}