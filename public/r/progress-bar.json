{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "progress-bar",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "tailwind-merge"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/progress-bar-demo.tsx",
      "content": "\"use client\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { ProgressBar } from \"@/components/nurui/progress-bar\";\r\n\r\nexport function ProgressBarDemo({ className }: { className?: string }) {\r\n  const [value, setValue] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const handleIncrement = (prev: number) => {\r\n      if (prev === 100) {\r\n        return 0;\r\n      }\r\n      return prev + 10;\r\n    };\r\n    setValue(handleIncrement);\r\n    const interval = setInterval(() => setValue(handleIncrement), 2000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return (\r\n    <ProgressBar\r\n      max={100}\r\n      min={0}\r\n      value={value}\r\n      gaugePrimaryColor=\"#80eeb4\"\r\n      gaugeSecondaryColor=\"#80eeb44d\"\r\n      className={className}\r\n    />\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/progress-bar.tsx",
      "content": "import { cn } from \"@/lib/utils\";\r\n\r\ninterface ProgressBarProps {\r\n  max: number;\r\n  value: number;\r\n  min: number;\r\n  gaugePrimaryColor: string;\r\n  gaugeSecondaryColor: string;\r\n  className?: string;\r\n}\r\n\r\nexport function ProgressBar({\r\n  max = 100,\r\n  min = 0,\r\n  value = 0,\r\n  gaugePrimaryColor,\r\n  gaugeSecondaryColor,\r\n  className,\r\n}: ProgressBarProps) {\r\n  const circumference = 2 * Math.PI * 45;\r\n  const percentPx = circumference / 100;\r\n  const currentPercent = Math.round(((value - min) / (max - min)) * 100);\r\n\r\n  return (\r\n    <div\r\n      className={cn(\"relative size-40 text-2xl font-semibold\", className)}\r\n      style={\r\n        {\r\n          \"--circle-size\": \"100px\",\r\n          \"--circumference\": circumference,\r\n          \"--percent-to-px\": `${percentPx}px`,\r\n          \"--gap-percent\": \"5\",\r\n          \"--offset-factor\": \"0\",\r\n          \"--transition-length\": \"1s\",\r\n          \"--transition-step\": \"200ms\",\r\n          \"--delay\": \"0s\",\r\n          \"--percent-to-deg\": \"3.6deg\",\r\n          transform: \"translateZ(0)\",\r\n        } as React.CSSProperties\r\n      }\r\n    >\r\n      <svg\r\n        fill=\"none\"\r\n        className=\"size-full\"\r\n        strokeWidth=\"2\"\r\n        viewBox=\"0 0 100 100\"\r\n      >\r\n        {currentPercent <= 90 && currentPercent >= 0 && (\r\n          <circle\r\n            cx=\"50\"\r\n            cy=\"50\"\r\n            r=\"45\"\r\n            strokeWidth=\"10\"\r\n            strokeDashoffset=\"0\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            className=\" opacity-100\"\r\n            style={\r\n              {\r\n                stroke: gaugeSecondaryColor,\r\n                \"--stroke-percent\": 90 - currentPercent,\r\n                \"--offset-factor-secondary\": \"calc(1 - var(--offset-factor))\",\r\n                strokeDasharray:\r\n                  \"calc(var(--stroke-percent) * var(--percent-to-px)) var(--circumference)\",\r\n                transform:\r\n                  \"rotate(calc(1turn - 90deg - (var(--gap-percent) * var(--percent-to-deg) * var(--offset-factor-secondary)))) scaleY(-1)\",\r\n                transition: \"all var(--transition-length) ease var(--delay)\",\r\n                transformOrigin:\r\n                  \"calc(var(--circle-size) / 2) calc(var(--circle-size) / 2)\",\r\n              } as React.CSSProperties\r\n            }\r\n          />\r\n        )}\r\n        <circle\r\n          cx=\"50\"\r\n          cy=\"50\"\r\n          r=\"45\"\r\n          strokeWidth=\"10\"\r\n          strokeDashoffset=\"0\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          className=\"opacity-100\"\r\n          style={\r\n            {\r\n              stroke: gaugePrimaryColor,\r\n              \"--stroke-percent\": currentPercent,\r\n              strokeDasharray:\r\n                \"calc(var(--stroke-percent) * var(--percent-to-px)) var(--circumference)\",\r\n              transition:\r\n                \"var(--transition-length) ease var(--delay),stroke var(--transition-length) ease var(--delay)\",\r\n              transitionProperty: \"stroke-dasharray,transform\",\r\n              transform:\r\n                \"rotate(calc(-90deg + var(--gap-percent) * var(--offset-factor) * var(--percent-to-deg)))\",\r\n              transformOrigin:\r\n                \"calc(var(--circle-size) / 2) calc(var(--circle-size) / 2)\",\r\n            } as React.CSSProperties\r\n          }\r\n        />\r\n      </svg>\r\n      <span\r\n        data-current-value={currentPercent}\r\n        className=\"duration-[var(--transition-length)] delay-[var(--delay)] absolute inset-0 m-auto size-fit ease-linear animate-in fade-in\"\r\n      >\r\n        {currentPercent}\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}