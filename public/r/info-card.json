{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "info-card",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "tailwind-merge"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/info-card-demo.tsx",
      "content": "import React from \"react\";\r\nimport { InfoCard } from \"@/components/nurui/info-card\";\r\n\r\nconst containerStyle: React.CSSProperties = {\r\n  display: \"flex\",\r\n  gap: 24,\r\n  padding: 24,\r\n  flexWrap: \"wrap\",\r\n  justifyContent: \"center\",\r\n  alignItems: \"flex-start\",\r\n  background: \"none\",\r\n  fontFamily: \"var(--font-family)\",\r\n  margin: 0,\r\n};\r\n\r\nconst fileContainerStyle: React.CSSProperties = {\r\n  width: 388,\r\n  height: 378,\r\n  borderRadius: \"1em\",\r\n  position: \"relative\",\r\n  overflow: \"hidden\",\r\n  padding: 0,\r\n  cursor: \"pointer\",\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n  alignItems: \"center\",\r\n  background: \"none\",\r\n  boxSizing: \"border-box\",\r\n};\r\n\r\nexport const InfoCardDemo: React.FC = () => (\r\n  <div className=\"py-24\" style={containerStyle}>\r\n    <div\r\n      className=\"file-container\"\r\n      id=\"container1\"\r\n      style={{\r\n        ...fileContainerStyle,\r\n        [\"--hover-text-color\" as string]: \"#242424\", // Unique for card 1\r\n      }}\r\n    >\r\n      <InfoCard\r\n        title=\"American English\"\r\n        description=\"Master American English efficiently with personalized lessons, cultural insights, and practical exercises.\"\r\n        borderColor=\"#80eeb4\"\r\n        borderBgColor=\"#80eeb433\"\r\n        textColor=\"#fff\"\r\n        hoverTextColor=\"#80eeb4\"\r\n        effectBgColor=\"#80eeb466\"\r\n        contentPadding=\"14.3px 16px\"\r\n      />\r\n    </div>\r\n  </div>\r\n);\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/info-card.tsx",
      "content": "\"use client\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport \"./styles/info-card.css\"; // Ensure you have the CSS file for styles\r\n\r\n// RTL detection for Hebrew/Arabic\r\nfunction isRTL(text: string) {\r\n  return /[\\u0590-\\u05FF\\u0600-\\u06FF\\u0700-\\u074F]/.test(text);\r\n}\r\n\r\nexport interface InfoCardProps {\r\n  title: string;\r\n  description: string;\r\n  width?: number;\r\n  height?: number;\r\n  borderColor?: string;\r\n  borderBgColor?: string;\r\n  borderWidth?: number;\r\n  borderPadding?: number;\r\n  cardBgColor?: string;\r\n  shadowColor?: string;\r\n  patternColor1?: string;\r\n  patternColor2?: string;\r\n  textColor?: string;\r\n  hoverTextColor?: string;\r\n  fontFamily?: string;\r\n  rtlFontFamily?: string;\r\n  effectBgColor?: string;\r\n  contentPadding?: string;\r\n}\r\n\r\nexport const InfoCard: React.FC<InfoCardProps> = ({\r\n  title,\r\n  description,\r\n  width = 388,\r\n  height = 378,\r\n  borderColor = \"#80eeb4\",\r\n  borderBgColor = \"#242424\",\r\n  borderWidth = 3,\r\n  borderPadding = 14,\r\n  cardBgColor = \"#000\",\r\n  textColor = \"#f5f5f5\",\r\n  hoverTextColor = \"#242424\",\r\n  fontFamily = \"'Roboto Mono', monospace\",\r\n  rtlFontFamily = \"'Montserrat', sans-serif\",\r\n  effectBgColor = \"#80eeb4\",\r\n  contentPadding = \"10px 16px\",\r\n}) => {\r\n  const [hovered, setHovered] = useState(false);\r\n  const borderRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Mouse movement for rotating border\r\n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\r\n    const border = borderRef.current;\r\n    if (!border) return;\r\n    const rect = border.getBoundingClientRect();\r\n    const x = e.clientX - rect.left - rect.width / 2;\r\n    const y = e.clientY - rect.top - rect.height / 2;\r\n    const angle = Math.atan2(y, x);\r\n    border.style.setProperty(\"--rotation\", `${angle}rad`);\r\n  };\r\n\r\n  // RTL logic\r\n  const rtl = isRTL(title) || isRTL(description);\r\n  const effectiveFont = rtl ? rtlFontFamily : fontFamily;\r\n  const titleDirection = isRTL(title) ? \"rtl\" : \"ltr\";\r\n  const descDirection = isRTL(description) ? \"rtl\" : \"ltr\";\r\n\r\n  // Sizes for inner card (matches .inner-container: 354x344)\r\n\r\n  // Pattern background (unchanged, just colors are props)\r\n\r\n  // Border gradient\r\n  const borderGradient = `conic-gradient(from var(--rotation,0deg), ${borderColor} 0deg, ${borderColor} 90deg, ${borderBgColor} 90deg, ${borderBgColor} 360deg)`;\r\n\r\n  return (\r\n    <div\r\n      ref={borderRef}\r\n      onMouseMove={handleMouseMove}\r\n      onMouseEnter={() => setHovered(true)}\r\n      onMouseLeave={() => {\r\n        setHovered(false);\r\n        if (borderRef.current)\r\n          borderRef.current.style.setProperty(\"--rotation\", \"0deg\");\r\n      }}\r\n      style={\r\n        {\r\n          width,\r\n          height,\r\n          border: `${borderWidth}px solid transparent`,\r\n          borderRadius: \"1em\",\r\n          backgroundOrigin: \"border-box\",\r\n          backgroundClip: \"padding-box, border-box\",\r\n          backgroundImage: `linear-gradient(${cardBgColor}, ${cardBgColor}), ${borderGradient}`,\r\n          padding: borderPadding,\r\n          boxSizing: \"border-box\",\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n          cursor: \"pointer\",\r\n          userSelect: \"none\",\r\n          transition: \"box-shadow 0.3s\",\r\n          position: \"relative\",\r\n          fontFamily: effectiveFont,\r\n        } as React.CSSProperties\r\n      }\r\n    >\r\n      <div\r\n        style={{\r\n          flexGrow: 1,\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          justifyContent: \"space-between\",\r\n          padding: contentPadding,\r\n          minHeight: 0,\r\n        }}\r\n      >\r\n        <h1\r\n          style={{\r\n            fontSize: 21,\r\n            fontWeight: \"bold\",\r\n            letterSpacing: \"-.01em\",\r\n            lineHeight: \"normal\",\r\n            marginBottom: 5,\r\n            color: hovered ? hoverTextColor : textColor,\r\n            transition: \"color 0.3s ease\",\r\n            position: \"relative\",\r\n            overflow: \"hidden\",\r\n            direction: titleDirection,\r\n            width: \"auto\",\r\n          }}\r\n        >\r\n          <span\r\n            style={{\r\n              position: \"relative\",\r\n              zIndex: 10,\r\n              padding: \"2px 4px\",\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              textAlign: \"center\",\r\n              width: \"100%\",\r\n              height: \"100%\",\r\n            }}\r\n          >\r\n            {title}\r\n          </span>\r\n          <span\r\n            style={{\r\n              clipPath: hovered\r\n                ? \"polygon(0 0, 100% 0, 100% 100%, 0% 100%)\"\r\n                : \"polygon(0 50%, 100% 50%, 100% 50%, 0 50%)\",\r\n              transformOrigin: \"center\",\r\n              transition: \"all cubic-bezier(.1,.5,.5,1) 0.4s\",\r\n              position: \"absolute\",\r\n              left: -4,\r\n              right: -4,\r\n              top: -4,\r\n              bottom: -4,\r\n              zIndex: 0,\r\n              backgroundColor: effectBgColor,\r\n            }}\r\n          />\r\n        </h1>\r\n        <p\r\n          style={{\r\n            fontSize: 14,\r\n            color: textColor,\r\n            display: \"-webkit-box\",\r\n            WebkitLineClamp: 3,\r\n            WebkitBoxOrient: \"vertical\",\r\n            overflow: \"hidden\",\r\n            direction: descDirection,\r\n            marginBottom: 0,\r\n            paddingBottom: 0,\r\n            minHeight: 0,\r\n            textAlign: \"center\",\r\n          }}\r\n        >\r\n          {description}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/styles/info-card.css",
      "content": "@import \"tw-animate-css\";\r\n\r\n:root {\r\n  --border-color-1: #ff5613;\r\n  --border-color-2: #9f4eff;\r\n  --border-color-3: #2196f3;\r\n  --border-bg-color: #f5f5f5;\r\n  --card-bg-color: #fff;\r\n  --shadow-color: #e0e0e0;\r\n  --text-color: #242424;\r\n  --hover-text-color-1: #000;\r\n  --hover-text-color-2: #fff;\r\n  --hover-text-color-3: #fff;\r\n  --font-family: \"Roboto Mono\", monospace;\r\n  --rtl-font-family: \"Montserrat\", sans-serif;\r\n  --pattern-color1: rgba(200, 200, 200, 0.1);\r\n  --pattern-color2: rgba(220, 220, 220, 0.1);\r\n}\r\n\r\n.dark {\r\n  --border-color-1: #daff3e;\r\n  --border-color-2: #9f4eff;\r\n  --border-color-3: #2196f3;\r\n  --border-bg-color: #242424;\r\n  --card-bg-color: #000;\r\n  --shadow-color: #242424;\r\n  --text-color: #f5f5f5;\r\n  --hover-text-color-1: #242424;\r\n  --hover-text-color-2: #000;\r\n  --hover-text-color-3: #242424;\r\n  --font-family: \"Roboto Mono\", monospace;\r\n  --rtl-font-family: \"Montserrat\", sans-serif;\r\n  --pattern-color1: rgba(230, 230, 230, 0.15);\r\n  --pattern-color2: rgba(240, 240, 240, 0.15);\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}