{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "terminal",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "tailwind-merge",
    "motion/react"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/terminal-demo.tsx",
      "content": "import {\r\n  AnimatedSpan,\r\n  Terminal,\r\n  TypingAnimation,\r\n} from \"@/components/nurui/terminal\";\r\n\r\nexport function TerminalDemo({ className }: { className?: string }) {\r\n  return (\r\n    <Terminal className={className}>\r\n      <TypingAnimation>&gt; pnpm dlx shadcn@latest init</TypingAnimation>\r\n\r\n      <AnimatedSpan delay={1500} className=\"text-green-500\">\r\n        <span>✔ Preflight checks.</span>\r\n      </AnimatedSpan>\r\n\r\n      <AnimatedSpan delay={2000} className=\"text-green-500\">\r\n        <span>✔ Verifying framework. Found Next.js.</span>\r\n      </AnimatedSpan>\r\n\r\n      <AnimatedSpan delay={2500} className=\"text-green-500\">\r\n        <span>✔ Validating Tailwind CSS.</span>\r\n      </AnimatedSpan>\r\n\r\n      <AnimatedSpan delay={3000} className=\"text-green-500\">\r\n        <span>✔ Validating import alias.</span>\r\n      </AnimatedSpan>\r\n\r\n      <AnimatedSpan delay={3500} className=\"text-green-500\">\r\n        <span>✔ Writing components.json.</span>\r\n      </AnimatedSpan>\r\n\r\n      <AnimatedSpan delay={4000} className=\"text-green-500\">\r\n        <span>✔ Checking registry.</span>\r\n      </AnimatedSpan>\r\n\r\n      <AnimatedSpan delay={4500} className=\"text-green-500\">\r\n        <span>✔ Updating tailwind.config.ts</span>\r\n      </AnimatedSpan>\r\n\r\n      <AnimatedSpan delay={5000} className=\"text-green-500\">\r\n        <span>✔ Updating app/globals.css</span>\r\n      </AnimatedSpan>\r\n\r\n      <AnimatedSpan delay={5500} className=\"text-green-500\">\r\n        <span>✔ Installing dependencies.</span>\r\n      </AnimatedSpan>\r\n\r\n      <AnimatedSpan delay={6000} className=\"text-blue-500\">\r\n        <span>ℹ Updated 1 file:</span>\r\n        <span className=\"pl-2\">- lib/utils.ts</span>\r\n      </AnimatedSpan>\r\n\r\n      <TypingAnimation delay={6500} className=\"text-muted-foreground\">\r\n        Success! Project initialization completed.\r\n      </TypingAnimation>\r\n\r\n      <TypingAnimation delay={7000} className=\"text-muted-foreground\">\r\n        You may now add components.\r\n      </TypingAnimation>\r\n    </Terminal>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/terminal.tsx",
      "content": "\"use client\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { motion, MotionProps } from \"motion/react\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\n\r\ninterface AnimatedSpanProps extends MotionProps {\r\n  children: React.ReactNode;\r\n  delay?: number;\r\n  className?: string;\r\n}\r\n\r\nexport const AnimatedSpan = ({\r\n  children,\r\n  delay = 0,\r\n  className,\r\n  ...props\r\n}: AnimatedSpanProps) => (\r\n  <motion.div\r\n    initial={{ opacity: 0, y: -5 }}\r\n    animate={{ opacity: 1, y: 0 }}\r\n    transition={{ duration: 0.3, delay: delay / 1000 }}\r\n    className={cn(\"grid text-sm font-normal tracking-tight\", className)}\r\n    {...props}\r\n  >\r\n    {children}\r\n  </motion.div>\r\n);\r\n\r\ninterface TypingAnimationProps extends MotionProps {\r\n  children: string;\r\n  className?: string;\r\n  duration?: number;\r\n  delay?: number;\r\n  as?: React.ElementType;\r\n}\r\n\r\nexport const TypingAnimation = ({\r\n  children,\r\n  className,\r\n  duration = 60,\r\n  delay = 0,\r\n  as: Component = \"span\",\r\n  ...props\r\n}: TypingAnimationProps) => {\r\n  if (typeof children !== \"string\") {\r\n    throw new Error(\"TypingAnimation: children must be a string. Received:\");\r\n  }\r\n\r\n  const MotionComponent = motion.create(Component, {\r\n    forwardMotionProps: true,\r\n  });\r\n\r\n  const [displayedText, setDisplayedText] = useState<string>(\"\");\r\n  const [started, setStarted] = useState(false);\r\n  const elementRef = useRef<HTMLElement | null>(null);\r\n\r\n  useEffect(() => {\r\n    const startTimeout = setTimeout(() => {\r\n      setStarted(true);\r\n    }, delay);\r\n    return () => clearTimeout(startTimeout);\r\n  }, [delay]);\r\n\r\n  useEffect(() => {\r\n    if (!started) return;\r\n\r\n    let i = 0;\r\n    const typingEffect = setInterval(() => {\r\n      if (i < children.length) {\r\n        setDisplayedText(children.substring(0, i + 1));\r\n        i++;\r\n      } else {\r\n        clearInterval(typingEffect);\r\n      }\r\n    }, duration);\r\n\r\n    return () => {\r\n      clearInterval(typingEffect);\r\n    };\r\n  }, [children, duration, started]);\r\n\r\n  return (\r\n    <MotionComponent\r\n      ref={elementRef}\r\n      className={cn(\"text-sm font-normal tracking-tight\", className)}\r\n      {...props}\r\n    >\r\n      {displayedText}\r\n    </MotionComponent>\r\n  );\r\n};\r\n\r\ninterface TerminalProps {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nexport const Terminal = ({ children, className }: TerminalProps) => {\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"z-0 h-full max-h-[400px] w-full max-w-lg rounded-xl border border-border bg-background\",\r\n        className,\r\n      )}\r\n    >\r\n      <div className=\"flex flex-col gap-y-2 border-b border-border p-4\">\r\n        <div className=\"flex flex-row gap-x-2\">\r\n          <div className=\"h-2 w-2 rounded-full bg-red-500\"></div>\r\n          <div className=\"h-2 w-2 rounded-full bg-yellow-500\"></div>\r\n          <div className=\"h-2 w-2 rounded-full bg-green-500\"></div>\r\n        </div>\r\n      </div>\r\n      <pre className=\"p-4\">\r\n        <code className=\"grid gap-y-1 overflow-auto\">{children}</code>\r\n      </pre>\r\n    </div>\r\n  );\r\n};\r\n",
      "type": "registry:component"
    }
  ]
}