{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "flow-form",
  "type": "registry:component",
  "dependencies": [
    "@react-three/fiber",
    "framer-motion",
    "clsx",
    "tailwind-merge"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/flow-form-demo.tsx",
      "content": "import { SignInPage } from \"@/components/nurui/flow-form\";\r\n\r\nconst FlowFormDemo = () => {\r\n  return (\r\n    <div className=\"flex w-full h-screen justify-center items-center\">\r\n      <SignInPage />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { FlowFormDemo };\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/flow-form.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useState, useMemo, useRef, useEffect } from \"react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport Link from \"next/link\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Canvas, useFrame, useThree } from \"@react-three/fiber\";\r\n\r\nimport * as THREE from \"three\";\r\n\r\ntype Uniforms = {\r\n  [key: string]: {\r\n    value: number[] | number[][] | number;\r\n    type: string;\r\n  };\r\n};\r\n\r\ninterface ShaderProps {\r\n  source: string;\r\n  uniforms: {\r\n    [key: string]: {\r\n      value: number[] | number[][] | number;\r\n      type: string;\r\n    };\r\n  };\r\n  maxFps?: number;\r\n}\r\n\r\ninterface SignInPageProps {\r\n  className?: string;\r\n}\r\n\r\nexport const CanvasRevealEffect = ({\r\n  animationSpeed = 10,\r\n  opacities = [0.3, 0.3, 0.3, 0.5, 0.5, 0.5, 0.8, 0.8, 0.8, 1],\r\n  colors = [[0, 255, 255]],\r\n  containerClassName,\r\n  dotSize,\r\n  showGradient = true,\r\n  reverse = false, // This controls the direction\r\n}: {\r\n  animationSpeed?: number;\r\n  opacities?: number[];\r\n  colors?: number[][];\r\n  containerClassName?: string;\r\n  dotSize?: number;\r\n  showGradient?: boolean;\r\n  reverse?: boolean; // This prop determines the direction\r\n}) => {\r\n  return (\r\n    <div className={cn(\"h-full relative w-full rounded-2xl\", containerClassName)}>\r\n      {\" \"}\r\n      {/* Removed bg-white */}\r\n      <div className=\"h-full w-full\">\r\n        <DotMatrix\r\n          colors={colors ?? [[0, 255, 255]]}\r\n          dotSize={dotSize ?? 3}\r\n          opacities={\r\n            opacities ?? [0.3, 0.3, 0.3, 0.5, 0.5, 0.5, 0.8, 0.8, 0.8, 1]\r\n          }\r\n          // Pass reverse state and speed via string flags in the empty shader prop\r\n          shader={`\r\n            ${reverse ? \"u_reverse_active\" : \"false\"}_;\r\n            animation_speed_factor_${animationSpeed.toFixed(1)}_;\r\n          `}\r\n          center={[\"x\", \"y\"]}\r\n        />\r\n      </div>\r\n      {showGradient && (\r\n        // Adjust gradient colors if needed based on background (was bg-white, now likely uses containerClassName bg)\r\n        // Example assuming a dark background like the SignInPage uses:\r\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black to-transparent rounded-2xl\" />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface DotMatrixProps {\r\n  colors?: number[][];\r\n  opacities?: number[];\r\n  totalSize?: number;\r\n  dotSize?: number;\r\n  shader?: string;\r\n  center?: (\"x\" | \"y\")[];\r\n}\r\n\r\nconst DotMatrix: React.FC<DotMatrixProps> = ({\r\n  colors = [[0, 0, 0]],\r\n  opacities = [0.04, 0.04, 0.04, 0.04, 0.04, 0.08, 0.08, 0.08, 0.08, 0.14],\r\n  totalSize = 20,\r\n  dotSize = 2,\r\n  shader = \"\", // This shader string will now contain the animation logic\r\n  center = [\"x\", \"y\"],\r\n}) => {\r\n  // ... uniforms calculation remains the same for colors, opacities, etc.\r\n  const uniforms = React.useMemo(() => {\r\n    let colorsArray = [\r\n      colors[0],\r\n      colors[0],\r\n      colors[0],\r\n      colors[0],\r\n      colors[0],\r\n      colors[0],\r\n    ];\r\n    if (colors.length === 2) {\r\n      colorsArray = [\r\n        colors[0],\r\n        colors[0],\r\n        colors[0],\r\n        colors[1],\r\n        colors[1],\r\n        colors[1],\r\n      ];\r\n    } else if (colors.length === 3) {\r\n      colorsArray = [\r\n        colors[0],\r\n        colors[0],\r\n        colors[1],\r\n        colors[1],\r\n        colors[2],\r\n        colors[2],\r\n      ];\r\n    }\r\n    return {\r\n      u_colors: {\r\n        value: colorsArray.map((color) => [\r\n          color[0] / 255,\r\n          color[1] / 255,\r\n          color[2] / 255,\r\n        ]),\r\n        type: \"uniform3fv\",\r\n      },\r\n      u_opacities: {\r\n        value: opacities,\r\n        type: \"uniform1fv\",\r\n      },\r\n      u_total_size: {\r\n        value: totalSize,\r\n        type: \"uniform1f\",\r\n      },\r\n      u_dot_size: {\r\n        value: dotSize,\r\n        type: \"uniform1f\",\r\n      },\r\n      u_reverse: {\r\n        value: shader.includes(\"u_reverse_active\") ? 1 : 0, // Convert boolean to number (1 or 0)\r\n        type: \"uniform1i\", // Use 1i for bool in WebGL1/GLSL100, or just bool for GLSL300+ if supported\r\n      },\r\n    };\r\n  }, [colors, opacities, totalSize, dotSize, shader]); // Add shader to dependencies\r\n\r\n  return (\r\n    <Shader\r\n      // The main animation logic is now built *outside* the shader prop\r\n      source={`\r\n        precision mediump float;\r\n        in vec2 fragCoord;\r\n\r\n        uniform float u_time;\r\n        uniform float u_opacities[10];\r\n        uniform vec3 u_colors[6];\r\n        uniform float u_total_size;\r\n        uniform float u_dot_size;\r\n        uniform vec2 u_resolution;\r\n        uniform int u_reverse; // Changed from bool to int\r\n\r\n        out vec4 fragColor;\r\n\r\n        float PHI = 1.61803398874989484820459;\r\n        float random(vec2 xy) {\r\n            return fract(tan(distance(xy * PHI, xy) * 0.5) * xy.x);\r\n        }\r\n        float map(float value, float min1, float max1, float min2, float max2) {\r\n            return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\r\n        }\r\n\r\n        void main() {\r\n            vec2 st = fragCoord.xy;\r\n            ${\r\n              center.includes(\"x\")\r\n                ? \"st.x -= abs(floor((mod(u_resolution.x, u_total_size) - u_dot_size) * 0.5));\"\r\n                : \"\"\r\n            }\r\n            ${\r\n              center.includes(\"y\")\r\n                ? \"st.y -= abs(floor((mod(u_resolution.y, u_total_size) - u_dot_size) * 0.5));\"\r\n                : \"\"\r\n            }\r\n\r\n            float opacity = step(0.0, st.x);\r\n            opacity *= step(0.0, st.y);\r\n\r\n            vec2 st2 = vec2(int(st.x / u_total_size), int(st.y / u_total_size));\r\n\r\n            float frequency = 5.0;\r\n            float show_offset = random(st2); // Used for initial opacity random pick and color\r\n            float rand = random(st2 * floor((u_time / frequency) + show_offset + frequency));\r\n            opacity *= u_opacities[int(rand * 10.0)];\r\n            opacity *= 1.0 - step(u_dot_size / u_total_size, fract(st.x / u_total_size));\r\n            opacity *= 1.0 - step(u_dot_size / u_total_size, fract(st.y / u_total_size));\r\n\r\n            vec3 color = u_colors[int(show_offset * 6.0)];\r\n\r\n            // --- Animation Timing Logic ---\r\n            float animation_speed_factor = 0.5; // Extract speed from shader string\r\n            vec2 center_grid = u_resolution / 2.0 / u_total_size;\r\n            float dist_from_center = distance(center_grid, st2);\r\n\r\n            // Calculate timing offset for Intro (from center)\r\n            float timing_offset_intro = dist_from_center * 0.01 + (random(st2) * 0.15);\r\n\r\n            // Calculate timing offset for Outro (from edges)\r\n            // Max distance from center to a corner of the grid\r\n            float max_grid_dist = distance(center_grid, vec2(0.0, 0.0));\r\n            float timing_offset_outro = (max_grid_dist - dist_from_center) * 0.02 + (random(st2 + 42.0) * 0.2);\r\n\r\n\r\n            float current_timing_offset;\r\n            if (u_reverse == 1) {\r\n                current_timing_offset = timing_offset_outro;\r\n                 // Outro logic: opacity starts high, goes to 0 when time passes offset\r\n                 opacity *= 1.0 - step(current_timing_offset, u_time * animation_speed_factor);\r\n                 // Clamp for fade-out transition\r\n                 opacity *= clamp((step(current_timing_offset + 0.1, u_time * animation_speed_factor)) * 1.25, 1.0, 1.25);\r\n            } else {\r\n                current_timing_offset = timing_offset_intro;\r\n                 // Intro logic: opacity starts 0, goes to base opacity when time passes offset\r\n                 opacity *= step(current_timing_offset, u_time * animation_speed_factor);\r\n                 // Clamp for fade-in transition\r\n                 opacity *= clamp((1.0 - step(current_timing_offset + 0.1, u_time * animation_speed_factor)) * 1.25, 1.0, 1.25);\r\n            }\r\n\r\n\r\n            fragColor = vec4(color, opacity);\r\n            fragColor.rgb *= fragColor.a; // Premultiply alpha\r\n        }`}\r\n      uniforms={uniforms}\r\n      maxFps={60}\r\n    />\r\n  );\r\n};\r\n\r\nconst ShaderMaterial = ({\r\n  source,\r\n  uniforms,\r\n}: {\r\n  source: string;\r\n  hovered?: boolean;\r\n  maxFps?: number;\r\n  uniforms: Uniforms;\r\n}) => {\r\n  const { size } = useThree();\r\n  const ref = useRef<THREE.Mesh>(null);\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  let lastFrameTime = 0;\r\n\r\n  useFrame(({ clock }) => {\r\n    if (!ref.current) return;\r\n    const timestamp = clock.getElapsedTime();\r\n\r\n    lastFrameTime = timestamp;\r\n\r\n    const material = ref.current.material as THREE.ShaderMaterial;\r\n    const timeLocation = material.uniforms.u_time;\r\n    timeLocation.value = timestamp;\r\n  });\r\n\r\n  const getUniforms = () => {\r\n    const preparedUniforms: Record<string, { value: unknown; type?: string }> =\r\n      {};\r\n\r\n    for (const uniformName in uniforms) {\r\n      const uniform = uniforms[uniformName];\r\n\r\n      switch (uniform.type) {\r\n        case \"uniform1f\":\r\n          preparedUniforms[uniformName] = { value: uniform.value, type: \"1f\" };\r\n          break;\r\n        case \"uniform1i\":\r\n          preparedUniforms[uniformName] = { value: uniform.value, type: \"1i\" };\r\n          break;\r\n        case \"uniform3f\":\r\n          preparedUniforms[uniformName] = {\r\n            value: new THREE.Vector3().fromArray(uniform.value as number[]),\r\n            type: \"3f\",\r\n          };\r\n          break;\r\n        case \"uniform1fv\":\r\n          preparedUniforms[uniformName] = { value: uniform.value, type: \"1fv\" };\r\n          break;\r\n        case \"uniform3fv\":\r\n          preparedUniforms[uniformName] = {\r\n            value: Array.isArray(uniform.value)\r\n              ? (uniform.value as number[][]).map((v: number[]) =>\r\n                  new THREE.Vector3().fromArray(v),\r\n                )\r\n              : [],\r\n            type: \"3fv\",\r\n          };\r\n          break;\r\n        case \"uniform2f\":\r\n          preparedUniforms[uniformName] = {\r\n            value: new THREE.Vector2().fromArray(uniform.value as number[]),\r\n            type: \"2f\",\r\n          };\r\n          break;\r\n        default:\r\n          console.error(`Invalid uniform type for '${uniformName}'.`);\r\n          break;\r\n      }\r\n    }\r\n\r\n    preparedUniforms[\"u_time\"] = { value: 0, type: \"1f\" };\r\n    preparedUniforms[\"u_resolution\"] = {\r\n      value: new THREE.Vector2(size.width * 2, size.height * 2),\r\n    }; // Initialize u_resolution\r\n    return preparedUniforms;\r\n  };\r\n\r\n  // Shader material\r\n  const material = useMemo(() => {\r\n    const materialObject = new THREE.ShaderMaterial({\r\n      vertexShader: `\r\n      precision mediump float;\r\n      in vec2 coordinates;\r\n      uniform vec2 u_resolution;\r\n      out vec2 fragCoord;\r\n      void main(){\r\n        float x = position.x;\r\n        float y = position.y;\r\n        gl_Position = vec4(x, y, 0.0, 1.0);\r\n        fragCoord = (position.xy + vec2(1.0)) * 0.5 * u_resolution;\r\n        fragCoord.y = u_resolution.y - fragCoord.y;\r\n      }\r\n      `,\r\n      fragmentShader: source,\r\n      uniforms: getUniforms(),\r\n      glslVersion: THREE.GLSL3,\r\n      blending: THREE.CustomBlending,\r\n      blendSrc: THREE.SrcAlphaFactor,\r\n      blendDst: THREE.OneFactor,\r\n    });\r\n\r\n    return materialObject;\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [size.width, size.height, source]);\r\n\r\n  return (\r\n    <mesh ref={ref}>\r\n      <planeGeometry args={[2, 2]} />\r\n      <primitive object={material} attach=\"material\" />\r\n    </mesh>\r\n  );\r\n};\r\n\r\nconst Shader: React.FC<ShaderProps> = ({ source, uniforms, maxFps = 60 }) => {\r\n  return (\r\n    <Canvas className=\"absolute inset-0  h-full w-full\">\r\n      <ShaderMaterial source={source} uniforms={uniforms} maxFps={maxFps} />\r\n    </Canvas>\r\n  );\r\n};\r\n\r\nexport const SignInPage = ({ className }: SignInPageProps) => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [step, setStep] = useState<\"email\" | \"code\" | \"success\">(\"email\");\r\n  const [code, setCode] = useState([\"\", \"\", \"\", \"\", \"\", \"\"]);\r\n  const codeInputRefs = useRef<(HTMLInputElement | null)[]>([]);\r\n  const [initialCanvasVisible, setInitialCanvasVisible] = useState(true);\r\n  const [reverseCanvasVisible, setReverseCanvasVisible] = useState(false);\r\n\r\n  const handleEmailSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (email) {\r\n      setStep(\"code\");\r\n    }\r\n  };\r\n\r\n  // Focus first input when code screen appears\r\n  useEffect(() => {\r\n    if (step === \"code\") {\r\n      setTimeout(() => {\r\n        codeInputRefs.current[0]?.focus();\r\n      }, 500);\r\n    }\r\n  }, [step]);\r\n\r\n  const handleCodeChange = (index: number, value: string) => {\r\n    if (value.length <= 1) {\r\n      const newCode = [...code];\r\n      newCode[index] = value;\r\n      setCode(newCode);\r\n\r\n      // Focus next input if value is entered\r\n      if (value && index < 5) {\r\n        codeInputRefs.current[index + 1]?.focus();\r\n      }\r\n\r\n      // Check if code is complete\r\n      if (index === 5 && value) {\r\n        const isComplete = newCode.every((digit) => digit.length === 1);\r\n        if (isComplete) {\r\n          // First show the new reverse canvas\r\n          setReverseCanvasVisible(true);\r\n\r\n          // Then hide the original canvas after a small delay\r\n          setTimeout(() => {\r\n            setInitialCanvasVisible(false);\r\n          }, 50);\r\n\r\n          // Transition to success screen after animation\r\n          setTimeout(() => {\r\n            setStep(\"success\");\r\n          }, 2000);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (\r\n    index: number,\r\n    e: React.KeyboardEvent<HTMLInputElement>,\r\n  ) => {\r\n    if (e.key === \"Backspace\" && !code[index] && index > 0) {\r\n      codeInputRefs.current[index - 1]?.focus();\r\n    }\r\n  };\r\n\r\n  const handleBackClick = () => {\r\n    setStep(\"email\");\r\n    setCode([\"\", \"\", \"\", \"\", \"\", \"\"]);\r\n    // Reset animations if going back\r\n    setReverseCanvasVisible(false);\r\n    setInitialCanvasVisible(true);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"flex w-full flex-col min-h-screen rounded-2xl bg-black relative\",\r\n        className,\r\n      )}\r\n    >\r\n      <div className=\"absolute inset-0 z-0\">\r\n        {/* Initial canvas (forward animation) */}\r\n        {initialCanvasVisible && (\r\n          <div className=\"absolute inset-0\">\r\n            <CanvasRevealEffect\r\n              animationSpeed={3}\r\n              containerClassName=\"bg-black rounded-2xl\"\r\n              colors={[\r\n                [255, 255, 255],\r\n                [255, 255, 255],\r\n              ]}\r\n              dotSize={6}\r\n              reverse={false}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {/* Reverse canvas (appears when code is complete) */}\r\n        {reverseCanvasVisible && (\r\n          <div className=\"absolute inset-0\">\r\n            <CanvasRevealEffect\r\n              animationSpeed={4}\r\n              containerClassName=\"bg-black\"\r\n              colors={[\r\n                [255, 255, 255],\r\n                [255, 255, 255],\r\n              ]}\r\n              dotSize={6}\r\n              reverse={true}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"absolute inset-0 rounded-2xl bg-[radial-gradient(circle_at_center,_rgba(0,0,0,1)_0%,_transparent_100%)]\" />\r\n        <div className=\"absolute top-0 left-0 rounded-2xl right-0 h-1/3 bg-gradient-to-b from-black to-transparent\" />\r\n      </div>\r\n\r\n      {/* Content Layer */}\r\n      <div className=\"relative z-10 flex flex-col flex-1\">\r\n        {/* Main content container */}\r\n        <div className=\"flex flex-1 flex-col lg:flex-row \">\r\n          {/* Left side (form) */}\r\n          <div className=\"flex-1 flex flex-col justify-center items-center\">\r\n            <div className=\"w-full mt-[150px] max-w-sm\">\r\n              <AnimatePresence mode=\"wait\">\r\n                {step === \"email\" ? (\r\n                  <motion.div\r\n                    key=\"email-step\"\r\n                    initial={{ opacity: 0, x: -100 }}\r\n                    animate={{ opacity: 1, x: 0 }}\r\n                    exit={{ opacity: 0, x: -100 }}\r\n                    transition={{ duration: 0.4, ease: \"easeOut\" }}\r\n                    className=\"space-y-6 text-center\"\r\n                  >\r\n                    <div className=\"space-y-1\">\r\n                      <h1 className=\"text-[2.5rem] font-bold leading-[1.1] tracking-tight text-white\">\r\n                        Welcome Developer\r\n                      </h1>\r\n                      <p className=\"text-[1.8rem] text-white/70 font-light\">\r\n                        Your sign in component\r\n                      </p>\r\n                    </div>\r\n\r\n                    <div className=\"space-y-4\">\r\n                      <button className=\"backdrop-blur-[2px] w-full flex items-center justify-center gap-2 bg-white/5 hover:bg-white/10 text-white border border-white/10 rounded-full py-3 px-4 transition-colors\">\r\n                        <span className=\"text-lg\">G</span>\r\n                        <span>Sign in with Google</span>\r\n                      </button>\r\n\r\n                      <div className=\"flex items-center gap-4\">\r\n                        <div className=\"h-px bg-white/10 flex-1\" />\r\n                        <span className=\"text-white/40 text-sm\">or</span>\r\n                        <div className=\"h-px bg-white/10 flex-1\" />\r\n                      </div>\r\n\r\n                      <form onSubmit={handleEmailSubmit}>\r\n                        <div className=\"relative\">\r\n                          <input\r\n                            type=\"email\"\r\n                            placeholder=\"info@gmail.com\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            className=\"w-full backdrop-blur-[1px] text-white border-1 border-white/10 rounded-full py-3 px-4 focus:outline-none focus:border focus:border-white/30 text-center\"\r\n                            required\r\n                          />\r\n                          <button\r\n                            type=\"submit\"\r\n                            className=\"absolute right-1.5 top-1.5 text-white w-9 h-9 flex items-center justify-center rounded-full bg-white/10 hover:bg-white/20 transition-colors group overflow-hidden\"\r\n                          >\r\n                            <span className=\"relative w-full h-full block overflow-hidden\">\r\n                              <span className=\"absolute inset-0 flex items-center justify-center transition-transform duration-300 group-hover:translate-x-full\">\r\n                                →\r\n                              </span>\r\n                              <span className=\"absolute inset-0 flex items-center justify-center transition-transform duration-300 -translate-x-full group-hover:translate-x-0\">\r\n                                →\r\n                              </span>\r\n                            </span>\r\n                          </button>\r\n                        </div>\r\n                      </form>\r\n                    </div>\r\n\r\n                    <p className=\"text-xs text-white/40 pt-10\">\r\n                      By signing up, you agree to the{\" \"}\r\n                      <Link\r\n                        href=\"#\"\r\n                        className=\"underline text-white/40 hover:text-white/60 transition-colors\"\r\n                      >\r\n                        MSA\r\n                      </Link>\r\n                      ,{\" \"}\r\n                      <Link\r\n                        href=\"#\"\r\n                        className=\"underline text-white/40 hover:text-white/60 transition-colors\"\r\n                      >\r\n                        Product Terms\r\n                      </Link>\r\n                      ,{\" \"}\r\n                      <Link\r\n                        href=\"#\"\r\n                        className=\"underline text-white/40 hover:text-white/60 transition-colors\"\r\n                      >\r\n                        Policies\r\n                      </Link>\r\n                      ,{\" \"}\r\n                      <Link\r\n                        href=\"#\"\r\n                        className=\"underline text-white/40 hover:text-white/60 transition-colors\"\r\n                      >\r\n                        Privacy Notice\r\n                      </Link>\r\n                      , and{\" \"}\r\n                      <Link\r\n                        href=\"#\"\r\n                        className=\"underline text-white/40 hover:text-white/60 transition-colors\"\r\n                      >\r\n                        Cookie Notice\r\n                      </Link>\r\n                      .\r\n                    </p>\r\n                  </motion.div>\r\n                ) : step === \"code\" ? (\r\n                  <motion.div\r\n                    key=\"code-step\"\r\n                    initial={{ opacity: 0, x: 100 }}\r\n                    animate={{ opacity: 1, x: 0 }}\r\n                    exit={{ opacity: 0, x: 100 }}\r\n                    transition={{ duration: 0.4, ease: \"easeOut\" }}\r\n                    className=\"space-y-6 text-center\"\r\n                  >\r\n                    <div className=\"space-y-1\">\r\n                      <h1 className=\"text-[2.5rem] font-bold leading-[1.1] tracking-tight text-white\">\r\n                        We sent you a code\r\n                      </h1>\r\n                      <p className=\"text-[1.25rem] text-white/50 font-light\">\r\n                        Please enter it\r\n                      </p>\r\n                    </div>\r\n\r\n                    <div className=\"w-full\">\r\n                      <div className=\"relative rounded-full py-4 px-5 border border-white/10 bg-transparent\">\r\n                        <div className=\"flex items-center justify-center\">\r\n                          {code.map((digit, i) => (\r\n                            <div key={i} className=\"flex items-center\">\r\n                              <div className=\"relative\">\r\n                                <input\r\n                                  ref={(el) => {\r\n                                    codeInputRefs.current[i] = el;\r\n                                  }}\r\n                                  type=\"text\"\r\n                                  inputMode=\"numeric\"\r\n                                  pattern=\"[0-9]*\"\r\n                                  maxLength={1}\r\n                                  value={digit}\r\n                                  onChange={(e) =>\r\n                                    handleCodeChange(i, e.target.value)\r\n                                  }\r\n                                  onKeyDown={(e) => handleKeyDown(i, e)}\r\n                                  className=\"w-8 text-center text-xl bg-transparent text-white border-none focus:outline-none focus:ring-0 appearance-none\"\r\n                                  style={{ caretColor: \"transparent\" }}\r\n                                />\r\n                                {!digit && (\r\n                                  <div className=\"absolute top-0 left-0 w-full h-full flex items-center justify-center pointer-events-none\">\r\n                                    <span className=\"text-xl text-white\">\r\n                                      0\r\n                                    </span>\r\n                                  </div>\r\n                                )}\r\n                              </div>\r\n                              {i < 5 && (\r\n                                <span className=\"text-white/20 text-xl\">|</span>\r\n                              )}\r\n                            </div>\r\n                          ))}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                      <motion.p\r\n                        className=\"text-white/50 hover:text-white/70 transition-colors cursor-pointer text-sm\"\r\n                        whileHover={{ scale: 1.02 }}\r\n                        transition={{ duration: 0.2 }}\r\n                      >\r\n                        Resend code\r\n                      </motion.p>\r\n                    </div>\r\n\r\n                    <div className=\"flex w-full gap-3\">\r\n                      <motion.button\r\n                        onClick={handleBackClick}\r\n                        className=\"rounded-full bg-white text-black font-medium px-8 py-3 hover:bg-white/90 transition-colors w-[30%]\"\r\n                        whileHover={{ scale: 1.02 }}\r\n                        whileTap={{ scale: 0.98 }}\r\n                        transition={{ duration: 0.2 }}\r\n                      >\r\n                        Back\r\n                      </motion.button>\r\n                      <motion.button\r\n                        className={`flex-1 rounded-full font-medium py-3 border transition-all duration-300 ${\r\n                          code.every((d) => d !== \"\")\r\n                            ? \"bg-white text-black border-transparent hover:bg-white/90 cursor-pointer\"\r\n                            : \"bg-[#111] text-white/50 border-white/10 cursor-not-allowed\"\r\n                        }`}\r\n                        disabled={!code.every((d) => d !== \"\")}\r\n                      >\r\n                        Continue\r\n                      </motion.button>\r\n                    </div>\r\n\r\n                    <div className=\"pt-16\">\r\n                      <p className=\"text-xs text-white/40\">\r\n                        By signing up, you agree to the{\" \"}\r\n                        <Link\r\n                          href=\"#\"\r\n                          className=\"underline text-white/40 hover:text-white/60 transition-colors\"\r\n                        >\r\n                          MSA\r\n                        </Link>\r\n                        ,{\" \"}\r\n                        <Link\r\n                          href=\"#\"\r\n                          className=\"underline text-white/40 hover:text-white/60 transition-colors\"\r\n                        >\r\n                          Product Terms\r\n                        </Link>\r\n                        ,{\" \"}\r\n                        <Link\r\n                          href=\"#\"\r\n                          className=\"underline text-white/40 hover:text-white/60 transition-colors\"\r\n                        >\r\n                          Policies\r\n                        </Link>\r\n                        ,{\" \"}\r\n                        <Link\r\n                          href=\"#\"\r\n                          className=\"underline text-white/40 hover:text-white/60 transition-colors\"\r\n                        >\r\n                          Privacy Notice\r\n                        </Link>\r\n                        , and{\" \"}\r\n                        <Link\r\n                          href=\"#\"\r\n                          className=\"underline text-white/40 hover:text-white/60 transition-colors\"\r\n                        >\r\n                          Cookie Notice\r\n                        </Link>\r\n                        .\r\n                      </p>\r\n                    </div>\r\n                  </motion.div>\r\n                ) : (\r\n                  <motion.div\r\n                    key=\"success-step\"\r\n                    initial={{ opacity: 0, y: 50 }}\r\n                    animate={{ opacity: 1, y: 0 }}\r\n                    transition={{ duration: 0.4, ease: \"easeOut\", delay: 0.3 }}\r\n                    className=\"space-y-6 text-center\"\r\n                  >\r\n                    <div className=\"space-y-1\">\r\n                      <h1 className=\"text-[2.5rem] font-bold leading-[1.1] tracking-tight text-white\">\r\n                        You&apos;re in!\r\n                      </h1>\r\n                      <p className=\"text-[1.25rem] text-white/50 font-light\">\r\n                        Welcome\r\n                      </p>\r\n                    </div>\r\n\r\n                    <motion.div\r\n                      initial={{ scale: 0.8, opacity: 0 }}\r\n                      animate={{ scale: 1, opacity: 1 }}\r\n                      transition={{ duration: 0.5, delay: 0.5 }}\r\n                      className=\"py-10\"\r\n                    >\r\n                      <div className=\"mx-auto w-16 h-16 rounded-full bg-gradient-to-br from-white to-white/70 flex items-center justify-center\">\r\n                        <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          className=\"h-8 w-8 text-black\"\r\n                          viewBox=\"0 0 20 20\"\r\n                          fill=\"currentColor\"\r\n                        >\r\n                          <path\r\n                            fillRule=\"evenodd\"\r\n                            d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\r\n                            clipRule=\"evenodd\"\r\n                          />\r\n                        </svg>\r\n                      </div>\r\n                    </motion.div>\r\n\r\n                    <motion.button\r\n                      initial={{ opacity: 0 }}\r\n                      animate={{ opacity: 1 }}\r\n                      transition={{ delay: 1 }}\r\n                      className=\"w-full rounded-full bg-white text-black font-medium py-3 hover:bg-white/90 transition-colors\"\r\n                    >\r\n                      Continue to Dashboard\r\n                    </motion.button>\r\n                  </motion.div>\r\n                )}\r\n              </AnimatePresence>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n",
      "type": "registry:component"
    }
  ]
}