{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "flow-form",
  "type": "registry:component",
  "dependencies": [
    "@react-three/fiber",
    "framer-motion",
    "clsx",
    "tailwind-merge"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/flow-form-demo.tsx",
      "content": "import { SignInPage } from \"@/components/nurui/flow-form\";\n\nconst FlowFormDemo = () => {\n  return (\n    <div className=\"flex w-full h-screen justify-center items-center\">\n      <SignInPage />\n    </div>\n  );\n};\n\nexport { FlowFormDemo };\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/flow-form.tsx",
      "content": "\"use client\";\n\nimport React, { useState, useMemo, useRef, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport Link from \"next/link\";\nimport { cn } from \"@/lib/utils\";\nimport { Canvas, useFrame, useThree } from \"@react-three/fiber\";\n\nimport * as THREE from \"three\";\n\ntype Uniforms = {\n  [key: string]: {\n    value: number[] | number[][] | number;\n    type: string;\n  };\n};\n\ninterface ShaderProps {\n  source: string;\n  uniforms: {\n    [key: string]: {\n      value: number[] | number[][] | number;\n      type: string;\n    };\n  };\n  maxFps?: number;\n}\n\ninterface SignInPageProps {\n  className?: string;\n}\n\nexport const CanvasRevealEffect = ({\n  animationSpeed = 10,\n  opacities = [0.3, 0.3, 0.3, 0.5, 0.5, 0.5, 0.8, 0.8, 0.8, 1],\n  colors = [[0, 255, 255]],\n  containerClassName,\n  dotSize,\n  showGradient = true,\n  reverse = false, // This controls the direction\n}: {\n  animationSpeed?: number;\n  opacities?: number[];\n  colors?: number[][];\n  containerClassName?: string;\n  dotSize?: number;\n  showGradient?: boolean;\n  reverse?: boolean; // This prop determines the direction\n}) => {\n  return (\n    <div className={cn(\"h-full relative w-full rounded-2xl\", containerClassName)}>\n      {\" \"}\n      {/* Removed bg-white */}\n      <div className=\"h-full w-full\">\n        <DotMatrix\n          colors={colors ?? [[0, 255, 255]]}\n          dotSize={dotSize ?? 3}\n          opacities={\n            opacities ?? [0.3, 0.3, 0.3, 0.5, 0.5, 0.5, 0.8, 0.8, 0.8, 1]\n          }\n          // Pass reverse state and speed via string flags in the empty shader prop\n          shader={`\n            ${reverse ? \"u_reverse_active\" : \"false\"}_;\n            animation_speed_factor_${animationSpeed.toFixed(1)}_;\n          `}\n          center={[\"x\", \"y\"]}\n        />\n      </div>\n      {showGradient && (\n        // Adjust gradient colors if needed based on background (was bg-white, now likely uses containerClassName bg)\n        // Example assuming a dark background like the SignInPage uses:\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black to-transparent rounded-2xl\" />\n      )}\n    </div>\n  );\n};\n\ninterface DotMatrixProps {\n  colors?: number[][];\n  opacities?: number[];\n  totalSize?: number;\n  dotSize?: number;\n  shader?: string;\n  center?: (\"x\" | \"y\")[];\n}\n\nconst DotMatrix: React.FC<DotMatrixProps> = ({\n  colors = [[0, 0, 0]],\n  opacities = [0.04, 0.04, 0.04, 0.04, 0.04, 0.08, 0.08, 0.08, 0.08, 0.14],\n  totalSize = 20,\n  dotSize = 2,\n  shader = \"\", // This shader string will now contain the animation logic\n  center = [\"x\", \"y\"],\n}) => {\n  // ... uniforms calculation remains the same for colors, opacities, etc.\n  const uniforms = React.useMemo(() => {\n    let colorsArray = [\n      colors[0],\n      colors[0],\n      colors[0],\n      colors[0],\n      colors[0],\n      colors[0],\n    ];\n    if (colors.length === 2) {\n      colorsArray = [\n        colors[0],\n        colors[0],\n        colors[0],\n        colors[1],\n        colors[1],\n        colors[1],\n      ];\n    } else if (colors.length === 3) {\n      colorsArray = [\n        colors[0],\n        colors[0],\n        colors[1],\n        colors[1],\n        colors[2],\n        colors[2],\n      ];\n    }\n    return {\n      u_colors: {\n        value: colorsArray.map((color) => [\n          color[0] / 255,\n          color[1] / 255,\n          color[2] / 255,\n        ]),\n        type: \"uniform3fv\",\n      },\n      u_opacities: {\n        value: opacities,\n        type: \"uniform1fv\",\n      },\n      u_total_size: {\n        value: totalSize,\n        type: \"uniform1f\",\n      },\n      u_dot_size: {\n        value: dotSize,\n        type: \"uniform1f\",\n      },\n      u_reverse: {\n        value: shader.includes(\"u_reverse_active\") ? 1 : 0, // Convert boolean to number (1 or 0)\n        type: \"uniform1i\", // Use 1i for bool in WebGL1/GLSL100, or just bool for GLSL300+ if supported\n      },\n    };\n  }, [colors, opacities, totalSize, dotSize, shader]); // Add shader to dependencies\n\n  return (\n    <Shader\n      // The main animation logic is now built *outside* the shader prop\n      source={`\n        precision mediump float;\n        in vec2 fragCoord;\n\n        uniform float u_time;\n        uniform float u_opacities[10];\n        uniform vec3 u_colors[6];\n        uniform float u_total_size;\n        uniform float u_dot_size;\n        uniform vec2 u_resolution;\n        uniform int u_reverse; // Changed from bool to int\n\n        out vec4 fragColor;\n\n        float PHI = 1.61803398874989484820459;\n        float random(vec2 xy) {\n            return fract(tan(distance(xy * PHI, xy) * 0.5) * xy.x);\n        }\n        float map(float value, float min1, float max1, float min2, float max2) {\n            return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n        }\n\n        void main() {\n            vec2 st = fragCoord.xy;\n            ${\n              center.includes(\"x\")\n                ? \"st.x -= abs(floor((mod(u_resolution.x, u_total_size) - u_dot_size) * 0.5));\"\n                : \"\"\n            }\n            ${\n              center.includes(\"y\")\n                ? \"st.y -= abs(floor((mod(u_resolution.y, u_total_size) - u_dot_size) * 0.5));\"\n                : \"\"\n            }\n\n            float opacity = step(0.0, st.x);\n            opacity *= step(0.0, st.y);\n\n            vec2 st2 = vec2(int(st.x / u_total_size), int(st.y / u_total_size));\n\n            float frequency = 5.0;\n            float show_offset = random(st2); // Used for initial opacity random pick and color\n            float rand = random(st2 * floor((u_time / frequency) + show_offset + frequency));\n            opacity *= u_opacities[int(rand * 10.0)];\n            opacity *= 1.0 - step(u_dot_size / u_total_size, fract(st.x / u_total_size));\n            opacity *= 1.0 - step(u_dot_size / u_total_size, fract(st.y / u_total_size));\n\n            vec3 color = u_colors[int(show_offset * 6.0)];\n\n            // --- Animation Timing Logic ---\n            float animation_speed_factor = 0.5; // Extract speed from shader string\n            vec2 center_grid = u_resolution / 2.0 / u_total_size;\n            float dist_from_center = distance(center_grid, st2);\n\n            // Calculate timing offset for Intro (from center)\n            float timing_offset_intro = dist_from_center * 0.01 + (random(st2) * 0.15);\n\n            // Calculate timing offset for Outro (from edges)\n            // Max distance from center to a corner of the grid\n            float max_grid_dist = distance(center_grid, vec2(0.0, 0.0));\n            float timing_offset_outro = (max_grid_dist - dist_from_center) * 0.02 + (random(st2 + 42.0) * 0.2);\n\n\n            float current_timing_offset;\n            if (u_reverse == 1) {\n                current_timing_offset = timing_offset_outro;\n                 // Outro logic: opacity starts high, goes to 0 when time passes offset\n                 opacity *= 1.0 - step(current_timing_offset, u_time * animation_speed_factor);\n                 // Clamp for fade-out transition\n                 opacity *= clamp((step(current_timing_offset + 0.1, u_time * animation_speed_factor)) * 1.25, 1.0, 1.25);\n            } else {\n                current_timing_offset = timing_offset_intro;\n                 // Intro logic: opacity starts 0, goes to base opacity when time passes offset\n                 opacity *= step(current_timing_offset, u_time * animation_speed_factor);\n                 // Clamp for fade-in transition\n                 opacity *= clamp((1.0 - step(current_timing_offset + 0.1, u_time * animation_speed_factor)) * 1.25, 1.0, 1.25);\n            }\n\n\n            fragColor = vec4(color, opacity);\n            fragColor.rgb *= fragColor.a; // Premultiply alpha\n        }`}\n      uniforms={uniforms}\n      maxFps={60}\n    />\n  );\n};\n\nconst ShaderMaterial = ({\n  source,\n  uniforms,\n}: {\n  source: string;\n  hovered?: boolean;\n  maxFps?: number;\n  uniforms: Uniforms;\n}) => {\n  const { size } = useThree();\n  const ref = useRef<THREE.Mesh>(null);\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  let lastFrameTime = 0;\n\n  useFrame(({ clock }) => {\n    if (!ref.current) return;\n    const timestamp = clock.getElapsedTime();\n\n    lastFrameTime = timestamp;\n\n    const material = ref.current.material as THREE.ShaderMaterial;\n    const timeLocation = material.uniforms.u_time;\n    timeLocation.value = timestamp;\n  });\n\n  const getUniforms = () => {\n    const preparedUniforms: Record<string, { value: unknown; type?: string }> =\n      {};\n\n    for (const uniformName in uniforms) {\n      const uniform = uniforms[uniformName];\n\n      switch (uniform.type) {\n        case \"uniform1f\":\n          preparedUniforms[uniformName] = { value: uniform.value, type: \"1f\" };\n          break;\n        case \"uniform1i\":\n          preparedUniforms[uniformName] = { value: uniform.value, type: \"1i\" };\n          break;\n        case \"uniform3f\":\n          preparedUniforms[uniformName] = {\n            value: new THREE.Vector3().fromArray(uniform.value as number[]),\n            type: \"3f\",\n          };\n          break;\n        case \"uniform1fv\":\n          preparedUniforms[uniformName] = { value: uniform.value, type: \"1fv\" };\n          break;\n        case \"uniform3fv\":\n          preparedUniforms[uniformName] = {\n            value: Array.isArray(uniform.value)\n              ? (uniform.value as number[][]).map((v: number[]) =>\n                  new THREE.Vector3().fromArray(v),\n                )\n              : [],\n            type: \"3fv\",\n          };\n          break;\n        case \"uniform2f\":\n          preparedUniforms[uniformName] = {\n            value: new THREE.Vector2().fromArray(uniform.value as number[]),\n            type: \"2f\",\n          };\n          break;\n        default:\n          console.error(`Invalid uniform type for '${uniformName}'.`);\n          break;\n      }\n    }\n\n    preparedUniforms[\"u_time\"] = { value: 0, type: \"1f\" };\n    preparedUniforms[\"u_resolution\"] = {\n      value: new THREE.Vector2(size.width * 2, size.height * 2),\n    }; // Initialize u_resolution\n    return preparedUniforms;\n  };\n\n  // Shader material\n  const material = useMemo(() => {\n    const materialObject = new THREE.ShaderMaterial({\n      vertexShader: `\n      precision mediump float;\n      in vec2 coordinates;\n      uniform vec2 u_resolution;\n      out vec2 fragCoord;\n      void main(){\n        float x = position.x;\n        float y = position.y;\n        gl_Position = vec4(x, y, 0.0, 1.0);\n        fragCoord = (position.xy + vec2(1.0)) * 0.5 * u_resolution;\n        fragCoord.y = u_resolution.y - fragCoord.y;\n      }\n      `,\n      fragmentShader: source,\n      uniforms: getUniforms(),\n      glslVersion: THREE.GLSL3,\n      blending: THREE.CustomBlending,\n      blendSrc: THREE.SrcAlphaFactor,\n      blendDst: THREE.OneFactor,\n    });\n\n    return materialObject;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [size.width, size.height, source]);\n\n  return (\n    <mesh ref={ref}>\n      <planeGeometry args={[2, 2]} />\n      <primitive object={material} attach=\"material\" />\n    </mesh>\n  );\n};\n\nconst Shader: React.FC<ShaderProps> = ({ source, uniforms, maxFps = 60 }) => {\n  return (\n    <Canvas className=\"absolute inset-0  h-full w-full\">\n      <ShaderMaterial source={source} uniforms={uniforms} maxFps={maxFps} />\n    </Canvas>\n  );\n};\n\nexport const SignInPage = ({ className }: SignInPageProps) => {\n  const [email, setEmail] = useState(\"\");\n  const [step, setStep] = useState<\"email\" | \"code\" | \"success\">(\"email\");\n  const [code, setCode] = useState([\"\", \"\", \"\", \"\", \"\", \"\"]);\n  const codeInputRefs = useRef<(HTMLInputElement | null)[]>([]);\n  const [initialCanvasVisible, setInitialCanvasVisible] = useState(true);\n  const [reverseCanvasVisible, setReverseCanvasVisible] = useState(false);\n\n  const handleEmailSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (email) {\n      setStep(\"code\");\n    }\n  };\n\n  // Focus first input when code screen appears\n  useEffect(() => {\n    if (step === \"code\") {\n      setTimeout(() => {\n        codeInputRefs.current[0]?.focus();\n      }, 500);\n    }\n  }, [step]);\n\n  const handleCodeChange = (index: number, value: string) => {\n    if (value.length <= 1) {\n      const newCode = [...code];\n      newCode[index] = value;\n      setCode(newCode);\n\n      // Focus next input if value is entered\n      if (value && index < 5) {\n        codeInputRefs.current[index + 1]?.focus();\n      }\n\n      // Check if code is complete\n      if (index === 5 && value) {\n        const isComplete = newCode.every((digit) => digit.length === 1);\n        if (isComplete) {\n          // First show the new reverse canvas\n          setReverseCanvasVisible(true);\n\n          // Then hide the original canvas after a small delay\n          setTimeout(() => {\n            setInitialCanvasVisible(false);\n          }, 50);\n\n          // Transition to success screen after animation\n          setTimeout(() => {\n            setStep(\"success\");\n          }, 2000);\n        }\n      }\n    }\n  };\n\n  const handleKeyDown = (\n    index: number,\n    e: React.KeyboardEvent<HTMLInputElement>,\n  ) => {\n    if (e.key === \"Backspace\" && !code[index] && index > 0) {\n      codeInputRefs.current[index - 1]?.focus();\n    }\n  };\n\n  const handleBackClick = () => {\n    setStep(\"email\");\n    setCode([\"\", \"\", \"\", \"\", \"\", \"\"]);\n    // Reset animations if going back\n    setReverseCanvasVisible(false);\n    setInitialCanvasVisible(true);\n  };\n\n  return (\n    <div\n      className={cn(\n        \"flex w-full flex-col min-h-screen rounded-2xl bg-black relative\",\n        className,\n      )}\n    >\n      <div className=\"absolute inset-0 z-0\">\n        {/* Initial canvas (forward animation) */}\n        {initialCanvasVisible && (\n          <div className=\"absolute inset-0\">\n            <CanvasRevealEffect\n              animationSpeed={3}\n              containerClassName=\"bg-black rounded-2xl\"\n              colors={[\n                [255, 255, 255],\n                [255, 255, 255],\n              ]}\n              dotSize={6}\n              reverse={false}\n            />\n          </div>\n        )}\n\n        {/* Reverse canvas (appears when code is complete) */}\n        {reverseCanvasVisible && (\n          <div className=\"absolute inset-0\">\n            <CanvasRevealEffect\n              animationSpeed={4}\n              containerClassName=\"bg-black\"\n              colors={[\n                [255, 255, 255],\n                [255, 255, 255],\n              ]}\n              dotSize={6}\n              reverse={true}\n            />\n          </div>\n        )}\n\n        <div className=\"absolute inset-0 rounded-2xl bg-[radial-gradient(circle_at_center,_rgba(0,0,0,1)_0%,_transparent_100%)]\" />\n        <div className=\"absolute top-0 left-0 rounded-2xl right-0 h-1/3 bg-gradient-to-b from-black to-transparent\" />\n      </div>\n\n      {/* Content Layer */}\n      <div className=\"relative z-10 flex flex-col flex-1\">\n        {/* Main content container */}\n        <div className=\"flex flex-1 flex-col lg:flex-row \">\n          {/* Left side (form) */}\n          <div className=\"flex-1 flex flex-col justify-center items-center\">\n            <div className=\"w-full mt-[150px] max-w-sm\">\n              <AnimatePresence mode=\"wait\">\n                {step === \"email\" ? (\n                  <motion.div\n                    key=\"email-step\"\n                    initial={{ opacity: 0, x: -100 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    exit={{ opacity: 0, x: -100 }}\n                    transition={{ duration: 0.4, ease: \"easeOut\" }}\n                    className=\"space-y-6 text-center\"\n                  >\n                    <div className=\"space-y-1\">\n                      <h1 className=\"text-[2.5rem] font-bold leading-[1.1] tracking-tight text-white\">\n                        Welcome Developer\n                      </h1>\n                      <p className=\"text-[1.8rem] text-white/70 font-light\">\n                        Your sign in component\n                      </p>\n                    </div>\n\n                    <div className=\"space-y-4\">\n                      <button className=\"backdrop-blur-[2px] w-full flex items-center justify-center gap-2 bg-white/5 hover:bg-white/10 text-white border border-white/10 rounded-full py-3 px-4 transition-colors\">\n                        <span className=\"text-lg\">G</span>\n                        <span>Sign in with Google</span>\n                      </button>\n\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"h-px bg-white/10 flex-1\" />\n                        <span className=\"text-white/40 text-sm\">or</span>\n                        <div className=\"h-px bg-white/10 flex-1\" />\n                      </div>\n\n                      <form onSubmit={handleEmailSubmit}>\n                        <div className=\"relative\">\n                          <input\n                            type=\"email\"\n                            placeholder=\"info@gmail.com\"\n                            value={email}\n                            onChange={(e) => setEmail(e.target.value)}\n                            className=\"w-full backdrop-blur-[1px] text-white border-1 border-white/10 rounded-full py-3 px-4 focus:outline-none focus:border focus:border-white/30 text-center\"\n                            required\n                          />\n                          <button\n                            type=\"submit\"\n                            className=\"absolute right-1.5 top-1.5 text-white w-9 h-9 flex items-center justify-center rounded-full bg-white/10 hover:bg-white/20 transition-colors group overflow-hidden\"\n                          >\n                            <span className=\"relative w-full h-full block overflow-hidden\">\n                              <span className=\"absolute inset-0 flex items-center justify-center transition-transform duration-300 group-hover:translate-x-full\">\n                                →\n                              </span>\n                              <span className=\"absolute inset-0 flex items-center justify-center transition-transform duration-300 -translate-x-full group-hover:translate-x-0\">\n                                →\n                              </span>\n                            </span>\n                          </button>\n                        </div>\n                      </form>\n                    </div>\n\n                    <p className=\"text-xs text-white/40 pt-10\">\n                      By signing up, you agree to the{\" \"}\n                      <Link\n                        href=\"#\"\n                        className=\"underline text-white/40 hover:text-white/60 transition-colors\"\n                      >\n                        MSA\n                      </Link>\n                      ,{\" \"}\n                      <Link\n                        href=\"#\"\n                        className=\"underline text-white/40 hover:text-white/60 transition-colors\"\n                      >\n                        Product Terms\n                      </Link>\n                      ,{\" \"}\n                      <Link\n                        href=\"#\"\n                        className=\"underline text-white/40 hover:text-white/60 transition-colors\"\n                      >\n                        Policies\n                      </Link>\n                      ,{\" \"}\n                      <Link\n                        href=\"#\"\n                        className=\"underline text-white/40 hover:text-white/60 transition-colors\"\n                      >\n                        Privacy Notice\n                      </Link>\n                      , and{\" \"}\n                      <Link\n                        href=\"#\"\n                        className=\"underline text-white/40 hover:text-white/60 transition-colors\"\n                      >\n                        Cookie Notice\n                      </Link>\n                      .\n                    </p>\n                  </motion.div>\n                ) : step === \"code\" ? (\n                  <motion.div\n                    key=\"code-step\"\n                    initial={{ opacity: 0, x: 100 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    exit={{ opacity: 0, x: 100 }}\n                    transition={{ duration: 0.4, ease: \"easeOut\" }}\n                    className=\"space-y-6 text-center\"\n                  >\n                    <div className=\"space-y-1\">\n                      <h1 className=\"text-[2.5rem] font-bold leading-[1.1] tracking-tight text-white\">\n                        We sent you a code\n                      </h1>\n                      <p className=\"text-[1.25rem] text-white/50 font-light\">\n                        Please enter it\n                      </p>\n                    </div>\n\n                    <div className=\"w-full\">\n                      <div className=\"relative rounded-full py-4 px-5 border border-white/10 bg-transparent\">\n                        <div className=\"flex items-center justify-center\">\n                          {code.map((digit, i) => (\n                            <div key={i} className=\"flex items-center\">\n                              <div className=\"relative\">\n                                <input\n                                  ref={(el) => {\n                                    codeInputRefs.current[i] = el;\n                                  }}\n                                  type=\"text\"\n                                  inputMode=\"numeric\"\n                                  pattern=\"[0-9]*\"\n                                  maxLength={1}\n                                  value={digit}\n                                  onChange={(e) =>\n                                    handleCodeChange(i, e.target.value)\n                                  }\n                                  onKeyDown={(e) => handleKeyDown(i, e)}\n                                  className=\"w-8 text-center text-xl bg-transparent text-white border-none focus:outline-none focus:ring-0 appearance-none\"\n                                  style={{ caretColor: \"transparent\" }}\n                                />\n                                {!digit && (\n                                  <div className=\"absolute top-0 left-0 w-full h-full flex items-center justify-center pointer-events-none\">\n                                    <span className=\"text-xl text-white\">\n                                      0\n                                    </span>\n                                  </div>\n                                )}\n                              </div>\n                              {i < 5 && (\n                                <span className=\"text-white/20 text-xl\">|</span>\n                              )}\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n\n                    <div>\n                      <motion.p\n                        className=\"text-white/50 hover:text-white/70 transition-colors cursor-pointer text-sm\"\n                        whileHover={{ scale: 1.02 }}\n                        transition={{ duration: 0.2 }}\n                      >\n                        Resend code\n                      </motion.p>\n                    </div>\n\n                    <div className=\"flex w-full gap-3\">\n                      <motion.button\n                        onClick={handleBackClick}\n                        className=\"rounded-full bg-white text-black font-medium px-8 py-3 hover:bg-white/90 transition-colors w-[30%]\"\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        transition={{ duration: 0.2 }}\n                      >\n                        Back\n                      </motion.button>\n                      <motion.button\n                        className={`flex-1 rounded-full font-medium py-3 border transition-all duration-300 ${\n                          code.every((d) => d !== \"\")\n                            ? \"bg-white text-black border-transparent hover:bg-white/90 cursor-pointer\"\n                            : \"bg-[#111] text-white/50 border-white/10 cursor-not-allowed\"\n                        }`}\n                        disabled={!code.every((d) => d !== \"\")}\n                      >\n                        Continue\n                      </motion.button>\n                    </div>\n\n                    <div className=\"pt-16\">\n                      <p className=\"text-xs text-white/40\">\n                        By signing up, you agree to the{\" \"}\n                        <Link\n                          href=\"#\"\n                          className=\"underline text-white/40 hover:text-white/60 transition-colors\"\n                        >\n                          MSA\n                        </Link>\n                        ,{\" \"}\n                        <Link\n                          href=\"#\"\n                          className=\"underline text-white/40 hover:text-white/60 transition-colors\"\n                        >\n                          Product Terms\n                        </Link>\n                        ,{\" \"}\n                        <Link\n                          href=\"#\"\n                          className=\"underline text-white/40 hover:text-white/60 transition-colors\"\n                        >\n                          Policies\n                        </Link>\n                        ,{\" \"}\n                        <Link\n                          href=\"#\"\n                          className=\"underline text-white/40 hover:text-white/60 transition-colors\"\n                        >\n                          Privacy Notice\n                        </Link>\n                        , and{\" \"}\n                        <Link\n                          href=\"#\"\n                          className=\"underline text-white/40 hover:text-white/60 transition-colors\"\n                        >\n                          Cookie Notice\n                        </Link>\n                        .\n                      </p>\n                    </div>\n                  </motion.div>\n                ) : (\n                  <motion.div\n                    key=\"success-step\"\n                    initial={{ opacity: 0, y: 50 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ duration: 0.4, ease: \"easeOut\", delay: 0.3 }}\n                    className=\"space-y-6 text-center\"\n                  >\n                    <div className=\"space-y-1\">\n                      <h1 className=\"text-[2.5rem] font-bold leading-[1.1] tracking-tight text-white\">\n                        You&apos;re in!\n                      </h1>\n                      <p className=\"text-[1.25rem] text-white/50 font-light\">\n                        Welcome\n                      </p>\n                    </div>\n\n                    <motion.div\n                      initial={{ scale: 0.8, opacity: 0 }}\n                      animate={{ scale: 1, opacity: 1 }}\n                      transition={{ duration: 0.5, delay: 0.5 }}\n                      className=\"py-10\"\n                    >\n                      <div className=\"mx-auto w-16 h-16 rounded-full bg-gradient-to-br from-white to-white/70 flex items-center justify-center\">\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          className=\"h-8 w-8 text-black\"\n                          viewBox=\"0 0 20 20\"\n                          fill=\"currentColor\"\n                        >\n                          <path\n                            fillRule=\"evenodd\"\n                            d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n                            clipRule=\"evenodd\"\n                          />\n                        </svg>\n                      </div>\n                    </motion.div>\n\n                    <motion.button\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      transition={{ delay: 1 }}\n                      className=\"w-full rounded-full bg-white text-black font-medium py-3 hover:bg-white/90 transition-colors\"\n                    >\n                      Continue to Dashboard\n                    </motion.button>\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n",
      "type": "registry:component"
    }
  ]
}