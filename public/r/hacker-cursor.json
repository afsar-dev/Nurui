{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "hacker-cursor",
  "type": "registry:component",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/hacker-cursor-demo.tsx",
      "content": "import HackerCursor from \"@/components/nurui/hacker-cursor\";\r\n\r\nexport default function HackerCursorDemo() {\r\n  return (\r\n    <>\r\n      <p className=\"text-3xl text-center pt-4 text-[#3ca2fa] font-bold\">\r\n        Move cursor to see the effect.\r\n      </p>\r\n      <HackerCursor trailColor=\"#FF0077\" dotSize={6} fadeDuration={700} />\r\n    </>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/hacker-cursor.tsx",
      "content": "\"use client\";\r\nimport React, { useRef, useEffect } from \"react\";\r\n\r\ninterface CursorTrailProps {\r\n  trailColor?: string;\r\n  dotSize?: number;\r\n  fadeDuration?: number;\r\n  className?: string;\r\n}\r\n\r\nconst HackerCursor: React.FC<CursorTrailProps> = ({\r\n  trailColor = \"#D0FBB6\",\r\n  dotSize = 4,\r\n  fadeDuration = 600,\r\n  className = \"fixed inset-0 w-full h-full pointer-events-none z-50\",\r\n}) => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    if (!ctx) return;\r\n\r\n    const resizeCanvas = () => {\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n    };\r\n\r\n    resizeCanvas();\r\n    window.addEventListener(\"resize\", resizeCanvas);\r\n\r\n    const hexToRGB = (hex: string) => {\r\n      const num = parseInt(hex.replace(\"#\", \"\"), 16);\r\n      return {\r\n        r: (num >> 16) & 255,\r\n        g: (num >> 8) & 255,\r\n        b: num & 255,\r\n      };\r\n    };\r\n\r\n    const { r, g, b } = hexToRGB(trailColor);\r\n\r\n    const paintDot = (x: number, y: number) => {\r\n      ctx.fillStyle = `rgba(${r}, ${g}, ${b}, 1)`;\r\n      ctx.fillRect(x, y, dotSize, dotSize);\r\n    };\r\n\r\n    let lastTime = performance.now();\r\n\r\n    const fade = () => {\r\n      const now = performance.now();\r\n      const delta = now - lastTime;\r\n      lastTime = now;\r\n\r\n      const fadeAlpha = delta / fadeDuration;\r\n\r\n      ctx.fillStyle = `rgba(0, 0, 0, ${fadeAlpha})`;\r\n      ctx.globalCompositeOperation = \"destination-out\";\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      ctx.globalCompositeOperation = \"source-over\";\r\n\r\n      requestAnimationFrame(fade);\r\n    };\r\n\r\n    requestAnimationFrame(fade);\r\n\r\n    const handleMouseMove = (e: MouseEvent) => {\r\n      const x = Math.floor(e.clientX / dotSize) * dotSize;\r\n      const y = Math.floor(e.clientY / dotSize) * dotSize;\r\n      paintDot(x, y);\r\n    };\r\n\r\n    window.addEventListener(\"mousemove\", handleMouseMove);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"mousemove\", handleMouseMove);\r\n      window.removeEventListener(\"resize\", resizeCanvas);\r\n    };\r\n  }, [trailColor, dotSize, fadeDuration]);\r\n\r\n  return <canvas ref={canvasRef} className={className} />;\r\n};\r\n\r\nexport default HackerCursor;\r\n",
      "type": "registry:component"
    }
  ]
}