{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "magnet-button",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "tailwind-merge",
    "motion",
    "lucide-react"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/magnet-button-demo.tsx",
      "content": "import React from \"react\";\r\nimport MagnetButton from \"@/components/nurui/magnet-button\";\r\n\r\nconst MagnetButtonDemo = () => {\r\n  return (\r\n    <div className=\"flex items-center justify-center min-h-[30rem]\">\r\n      <MagnetButton />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MagnetButtonDemo;\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/magnet-button.tsx",
      "content": "\"use client\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { motion, useAnimation } from \"motion/react\";\r\nimport { Magnet } from \"lucide-react\";\r\nimport { useEffect, useState, useCallback } from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\ninterface AttractButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  particleCount?: number;\r\n  attractRadius?: number;\r\n}\r\n\r\ninterface Particle {\r\n  id: number;\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport default function MagnetButton({\r\n  className,\r\n  particleCount = 12,\r\n  ...props\r\n}: AttractButtonProps) {\r\n  const [isAttracting, setIsAttracting] = useState(false);\r\n  const [particles, setParticles] = useState<Particle[]>([]);\r\n  const particlesControl = useAnimation();\r\n\r\n  useEffect(() => {\r\n    const newParticles = Array.from({ length: particleCount }, (_, i) => ({\r\n      id: i,\r\n      x: Math.random() * 360 - 180,\r\n      y: Math.random() * 360 - 180,\r\n    }));\r\n    setParticles(newParticles);\r\n  }, [particleCount]);\r\n\r\n  const handleInteractionStart = useCallback(async () => {\r\n    setIsAttracting(true);\r\n    await particlesControl.start({\r\n      x: 0,\r\n      y: 0,\r\n      transition: {\r\n        type: \"spring\",\r\n        stiffness: 50,\r\n        damping: 10,\r\n      },\r\n    });\r\n  }, [particlesControl]);\r\n\r\n  const handleInteractionEnd = useCallback(async () => {\r\n    setIsAttracting(false);\r\n    await particlesControl.start((i) => ({\r\n      x: particles[i].x,\r\n      y: particles[i].y,\r\n      transition: {\r\n        type: \"spring\",\r\n        stiffness: 100,\r\n        damping: 15,\r\n      },\r\n    }));\r\n  }, [particlesControl, particles]);\r\n\r\n  return (\r\n    <Button\r\n      className={cn(\r\n        \"min-w-40 relative touch-none\",\r\n        \"bg-violet-100 dark:bg-violet-900\",\r\n        \"hover:bg-violet-200 dark:hover:bg-violet-800\",\r\n        \"text-violet-600 dark:text-violet-300\",\r\n        \"border border-violet-300 dark:border-violet-700\",\r\n        \"transition-all duration-300\",\r\n        className,\r\n      )}\r\n      onMouseEnter={handleInteractionStart}\r\n      onMouseLeave={handleInteractionEnd}\r\n      onTouchStart={handleInteractionStart}\r\n      onTouchEnd={handleInteractionEnd}\r\n      {...props}\r\n    >\r\n      {particles.map((_, index) => (\r\n        <motion.div\r\n          key={index}\r\n          custom={index}\r\n          initial={{ x: particles[index].x, y: particles[index].y }}\r\n          animate={particlesControl}\r\n          className={cn(\r\n            \"absolute w-1.5 h-1.5 rounded-full\",\r\n            \"bg-violet-400 dark:bg-violet-300\",\r\n            \"transition-opacity duration-300\",\r\n            isAttracting ? \"opacity-100\" : \"opacity-40\",\r\n          )}\r\n        />\r\n      ))}\r\n      <span className=\"relative w-full flex items-center justify-center gap-2\">\r\n        <Magnet\r\n          className={cn(\r\n            \"w-4 h-4 transition-transform duration-300\",\r\n            isAttracting && \"scale-110\",\r\n          )}\r\n        />\r\n        {isAttracting ? \"Attracting\" : \"Hover me\"}\r\n      </span>\r\n    </Button>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}