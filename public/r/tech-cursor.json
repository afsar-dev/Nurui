{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tech-cursor",
  "type": "registry:component",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/tech-cursor-demo.tsx",
      "content": "import React from \"react\";\r\nimport TechCursor from \"@/components/nurui/tech-cursor\";\r\n\r\nconst TechCursorDemo = () => {\r\n  return (\r\n    <>\r\n      <p className=\"text-3xl text-center pt-4 text-[#3ca2fa] font-bold\">\r\n        Move cursor to see the effect.\r\n      </p>\r\n      <TechCursor />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TechCursorDemo;\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/tech-cursor.tsx",
      "content": "\"use client\";\r\nimport React, { useEffect, useRef } from \"react\";\r\n\r\ninterface TechImage {\r\n  name: string;\r\n  src: string;\r\n  image: HTMLImageElement;\r\n}\r\n\r\ninterface Particle {\r\n  x: number;\r\n  y: number;\r\n  alpha: number;\r\n  image: HTMLImageElement;\r\n  size: number;\r\n  update: () => void;\r\n  draw: (ctx: CanvasRenderingContext2D) => void;\r\n}\r\n\r\nconst icons: { name: string; src: string }[] = [\r\n  // replace with your image path\r\n  {\r\n    name: \"JavaScript\",\r\n    src: \"https://res.cloudinary.com/dz1fy2tof/image/upload/v1755012752/js_nocitj.png\",\r\n  },\r\n  {\r\n    name: \"TypeScript\",\r\n    src: \"https://res.cloudinary.com/dz1fy2tof/image/upload/v1755012632/ts_elsqw8.png\",\r\n  },\r\n  {\r\n    name: \"React\",\r\n    src: \"https://res.cloudinary.com/dz1fy2tof/image/upload/v1755012941/react_ogt6ny.svg\",\r\n  },\r\n  {\r\n    name: \"Next.js\",\r\n    src: \"https://res.cloudinary.com/dz1fy2tof/image/upload/v1755012973/next_hrodnb.svg\",\r\n  },\r\n  {\r\n    name: \"HTML\",\r\n    src: \"https://res.cloudinary.com/dz1fy2tof/image/upload/v1755012812/html_xbcdkj.png\",\r\n  },\r\n  {\r\n    name: \"CSS\",\r\n    src: \"https://res.cloudinary.com/dz1fy2tof/image/upload/v1755012862/css_1_irojyc.png\",\r\n  },\r\n];\r\n\r\nconst TechCursor = () => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const particlesRef = useRef<Particle[]>([]);\r\n  const techImagesRef = useRef<TechImage[]>([]);\r\n\r\n  useEffect(() => {\r\n    // Preload images\r\n    const loadImages = async () => {\r\n      techImagesRef.current = await Promise.all(\r\n        icons.map(({ name, src }) => {\r\n          return new Promise<TechImage>((resolve) => {\r\n            const img = new Image();\r\n            img.src = src;\r\n            img.onload = () => resolve({ name, src, image: img });\r\n          });\r\n        }),\r\n      );\r\n    };\r\n\r\n    loadImages().then(() => {\r\n      const canvas = canvasRef.current;\r\n      if (!canvas) return;\r\n      const ctx = canvas.getContext(\"2d\");\r\n      if (!ctx) return;\r\n\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n\r\n      const particles = particlesRef.current;\r\n\r\n      const animate = () => {\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        for (let i = particles.length - 1; i >= 0; i--) {\r\n          const p = particles[i];\r\n          p.update();\r\n          p.draw(ctx);\r\n          if (p.alpha <= 0) {\r\n            particles.splice(i, 1);\r\n          }\r\n        }\r\n        requestAnimationFrame(animate);\r\n      };\r\n\r\n      animate();\r\n\r\n      const onMove = (e: MouseEvent) => {\r\n        const randomIcon =\r\n          techImagesRef.current[\r\n            Math.floor(Math.random() * techImagesRef.current.length)\r\n          ];\r\n\r\n        const size = 22 + Math.random() * 8;\r\n\r\n        const particle: Particle = {\r\n          x: e.clientX,\r\n          y: e.clientY,\r\n          alpha: 1,\r\n          image: randomIcon.image,\r\n          size,\r\n          update() {\r\n            this.y -= 0.4;\r\n            this.alpha -= 0.02;\r\n          },\r\n          draw(ctx: CanvasRenderingContext2D) {\r\n            ctx.globalAlpha = this.alpha;\r\n            ctx.drawImage(\r\n              this.image,\r\n              this.x - this.size / 2,\r\n              this.y - this.size / 2,\r\n              this.size,\r\n              this.size,\r\n            );\r\n            ctx.globalAlpha = 1;\r\n          },\r\n        };\r\n\r\n        particles.push(particle);\r\n      };\r\n\r\n      window.addEventListener(\"mousemove\", onMove);\r\n      return () => {\r\n        window.removeEventListener(\"mousemove\", onMove);\r\n      };\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      className=\"fixed top-0 left-0 w-full h-full pointer-events-none z-50\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default TechCursor;\r\n",
      "type": "registry:component"
    }
  ]
}