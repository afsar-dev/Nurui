{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tech-cursor",
  "type": "registry:component",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/tech-cursor-demo.tsx",
      "content": "import React from \"react\";\nimport TechCursor from \"@/components/nurui/tech-cursor\";\n\nconst TechCursorDemo = () => {\n  return (\n    <>\n      <p className=\"text-3xl text-center pt-4 text-[#3ca2fa] font-bold\">\n        Move cursor to see the effect.\n      </p>\n      <TechCursor />\n    </>\n  );\n};\n\nexport default TechCursorDemo;\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/tech-cursor.tsx",
      "content": "\"use client\";\nimport React, { useEffect, useRef } from \"react\";\n\ninterface TechImage {\n  name: string;\n  src: string;\n  image: HTMLImageElement;\n}\n\ninterface Particle {\n  x: number;\n  y: number;\n  alpha: number;\n  image: HTMLImageElement;\n  size: number;\n  update: () => void;\n  draw: (ctx: CanvasRenderingContext2D) => void;\n}\n\nconst icons: { name: string; src: string }[] = [\n  // replace with your image path\n  {\n    name: \"JavaScript\",\n    src: \"https://res.cloudinary.com/dz1fy2tof/image/upload/v1755012752/js_nocitj.png\",\n  },\n  {\n    name: \"TypeScript\",\n    src: \"https://res.cloudinary.com/dz1fy2tof/image/upload/v1755012632/ts_elsqw8.png\",\n  },\n  {\n    name: \"React\",\n    src: \"https://res.cloudinary.com/dz1fy2tof/image/upload/v1755012941/react_ogt6ny.svg\",\n  },\n  {\n    name: \"Next.js\",\n    src: \"https://res.cloudinary.com/dz1fy2tof/image/upload/v1755012973/next_hrodnb.svg\",\n  },\n  {\n    name: \"HTML\",\n    src: \"https://res.cloudinary.com/dz1fy2tof/image/upload/v1755012812/html_xbcdkj.png\",\n  },\n  {\n    name: \"CSS\",\n    src: \"https://res.cloudinary.com/dz1fy2tof/image/upload/v1755012862/css_1_irojyc.png\",\n  },\n];\n\nconst TechCursor = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const particlesRef = useRef<Particle[]>([]);\n  const techImagesRef = useRef<TechImage[]>([]);\n\n  useEffect(() => {\n    // Preload images\n    const loadImages = async () => {\n      techImagesRef.current = await Promise.all(\n        icons.map(({ name, src }) => {\n          return new Promise<TechImage>((resolve) => {\n            const img = new Image();\n            img.src = src;\n            img.onload = () => resolve({ name, src, image: img });\n          });\n        }),\n      );\n    };\n\n    loadImages().then(() => {\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n      const ctx = canvas.getContext(\"2d\");\n      if (!ctx) return;\n\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n\n      const particles = particlesRef.current;\n\n      const animate = () => {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        for (let i = particles.length - 1; i >= 0; i--) {\n          const p = particles[i];\n          p.update();\n          p.draw(ctx);\n          if (p.alpha <= 0) {\n            particles.splice(i, 1);\n          }\n        }\n        requestAnimationFrame(animate);\n      };\n\n      animate();\n\n      const onMove = (e: MouseEvent) => {\n        const randomIcon =\n          techImagesRef.current[\n            Math.floor(Math.random() * techImagesRef.current.length)\n          ];\n\n        const size = 22 + Math.random() * 8;\n\n        const particle: Particle = {\n          x: e.clientX,\n          y: e.clientY,\n          alpha: 1,\n          image: randomIcon.image,\n          size,\n          update() {\n            this.y -= 0.4;\n            this.alpha -= 0.02;\n          },\n          draw(ctx: CanvasRenderingContext2D) {\n            ctx.globalAlpha = this.alpha;\n            ctx.drawImage(\n              this.image,\n              this.x - this.size / 2,\n              this.y - this.size / 2,\n              this.size,\n              this.size,\n            );\n            ctx.globalAlpha = 1;\n          },\n        };\n\n        particles.push(particle);\n      };\n\n      window.addEventListener(\"mousemove\", onMove);\n      return () => {\n        window.removeEventListener(\"mousemove\", onMove);\n      };\n    });\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className=\"fixed top-0 left-0 w-full h-full pointer-events-none z-50\"\n    />\n  );\n};\n\nexport default TechCursor;\n",
      "type": "registry:component"
    }
  ]
}