{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "following-eye",
  "type": "registry:component",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/following-eye-demo.tsx",
      "content": "import { FollowingEye } from \"@/components/nurui/following-eye\";\n\nconst FollowingEyeDemo = () => {\n  return <FollowingEye />;\n};\n\nexport { FollowingEyeDemo };\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/following-eye.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport * as React from \"react\";\nimport { useState, useRef, useEffect } from \"react\";\n\nconst FollowingEye = ({ className }: { className?: string }) => {\n  const [mousePos, setMousePos] = useState({ x: 0, y: 0 });\n  const eye1Ref = useRef<HTMLDivElement>(null);\n  const eye2Ref = useRef<HTMLDivElement>(null);\n\n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\n    setMousePos({ x: e.clientX, y: e.clientY });\n  };\n\n  return (\n    <div\n      className={cn(\n        \"w-screen h-screen flex justify-center items-center rounded-xl\",\n        className,\n      )}\n      onMouseMove={handleMouseMove}\n    >\n      <div className=\"flex\">\n        <Eye\n          mouseX={mousePos.x}\n          mouseY={mousePos.y}\n          selfRef={eye1Ref as React.RefObject<HTMLDivElement>}\n          otherRef={eye2Ref as React.RefObject<HTMLDivElement>}\n        />\n        <Eye\n          mouseX={mousePos.x}\n          mouseY={mousePos.y}\n          selfRef={eye2Ref as React.RefObject<HTMLDivElement>}\n          otherRef={eye1Ref as React.RefObject<HTMLDivElement>}\n        />\n      </div>\n    </div>\n  );\n};\n\ninterface EyeProps {\n  mouseX: number;\n  mouseY: number;\n  selfRef: React.RefObject<HTMLDivElement>;\n  otherRef: React.RefObject<HTMLDivElement>;\n}\n\nconst Eye: React.FC<EyeProps> = ({ mouseX, mouseY, selfRef, otherRef }) => {\n  const pupilRef = useRef<HTMLDivElement>(null);\n  const [center, setCenter] = useState({ x: 0, y: 0 });\n\n  const updateCenter = React.useCallback(() => {\n    if (!selfRef.current) return;\n    const rect = selfRef.current.getBoundingClientRect();\n    setCenter({\n      x: rect.left + rect.width / 2,\n      y: rect.top + rect.height / 2,\n    });\n  }, [selfRef]);\n\n  useEffect(() => {\n    const updateCenter = () => {\n      if (!selfRef.current) return;\n      const rect = selfRef.current.getBoundingClientRect();\n      setCenter({\n        x: rect.left + rect.width / 2,\n        y: rect.top + rect.height / 2,\n      });\n    };\n\n    updateCenter();\n    window.addEventListener(\"resize\", updateCenter);\n    return () => window.removeEventListener(\"resize\", updateCenter);\n  }, [selfRef]);\n\n  useEffect(() => {\n    updateCenter();\n\n    const isInside = (ref: React.RefObject<HTMLDivElement>) => {\n      const rect = ref.current?.getBoundingClientRect();\n      if (!rect) return false;\n      return (\n        mouseX >= rect.left &&\n        mouseX <= rect.right &&\n        mouseY >= rect.top &&\n        mouseY <= rect.bottom\n      );\n    };\n\n    if (isInside(selfRef) || isInside(otherRef)) return;\n\n    const dx = mouseX - center.x;\n    const dy = mouseY - center.y;\n    const angle = Math.atan2(dy, dx);\n\n    const maxMove = 20;\n    const pupilX = Math.cos(angle) * maxMove;\n    const pupilY = Math.sin(angle) * maxMove;\n\n    if (pupilRef.current) {\n      pupilRef.current.style.transform = `translate(${pupilX}px, ${pupilY}px)`;\n    }\n  }, [mouseX, mouseY, center.x, center.y, otherRef, selfRef, updateCenter]);\n\n  return (\n    <div\n      ref={selfRef}\n      className=\"relative bg-white border-4 border-black rounded-full h-24 w-24 flex items-center justify-center\"\n    >\n      <div\n        ref={pupilRef}\n        className=\"absolute bg-black rounded-full h-8 w-8 transition-all duration-[5ms]\"\n      >\n        <div className=\"w-3 h-3 bg-white rounded-full absolute bottom-1 right-1\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport { FollowingEye };\n",
      "type": "registry:component"
    }
  ]
}