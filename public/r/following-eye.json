{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "following-eye",
  "type": "registry:component",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/following-eye-demo.tsx",
      "content": "import { FollowingEye } from \"@/components/nurui/following-eye\";\r\n\r\nconst FollowingEyeDemo = () => {\r\n  return <FollowingEye />;\r\n};\r\n\r\nexport { FollowingEyeDemo };\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/following-eye.tsx",
      "content": "\"use client\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport * as React from \"react\";\r\nimport { useState, useRef, useEffect } from \"react\";\r\n\r\nconst FollowingEye = ({ className }: { className?: string }) => {\r\n  const [mousePos, setMousePos] = useState({ x: 0, y: 0 });\r\n  const eye1Ref = useRef<HTMLDivElement>(null);\r\n  const eye2Ref = useRef<HTMLDivElement>(null);\r\n\r\n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\r\n    setMousePos({ x: e.clientX, y: e.clientY });\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"w-screen h-screen flex justify-center items-center rounded-xl\",\r\n        className,\r\n      )}\r\n      onMouseMove={handleMouseMove}\r\n    >\r\n      <div className=\"flex\">\r\n        <Eye\r\n          mouseX={mousePos.x}\r\n          mouseY={mousePos.y}\r\n          selfRef={eye1Ref as React.RefObject<HTMLDivElement>}\r\n          otherRef={eye2Ref as React.RefObject<HTMLDivElement>}\r\n        />\r\n        <Eye\r\n          mouseX={mousePos.x}\r\n          mouseY={mousePos.y}\r\n          selfRef={eye2Ref as React.RefObject<HTMLDivElement>}\r\n          otherRef={eye1Ref as React.RefObject<HTMLDivElement>}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface EyeProps {\r\n  mouseX: number;\r\n  mouseY: number;\r\n  selfRef: React.RefObject<HTMLDivElement>;\r\n  otherRef: React.RefObject<HTMLDivElement>;\r\n}\r\n\r\nconst Eye: React.FC<EyeProps> = ({ mouseX, mouseY, selfRef, otherRef }) => {\r\n  const pupilRef = useRef<HTMLDivElement>(null);\r\n  const [center, setCenter] = useState({ x: 0, y: 0 });\r\n\r\n  const updateCenter = React.useCallback(() => {\r\n    if (!selfRef.current) return;\r\n    const rect = selfRef.current.getBoundingClientRect();\r\n    setCenter({\r\n      x: rect.left + rect.width / 2,\r\n      y: rect.top + rect.height / 2,\r\n    });\r\n  }, [selfRef]);\r\n\r\n  useEffect(() => {\r\n    const updateCenter = () => {\r\n      if (!selfRef.current) return;\r\n      const rect = selfRef.current.getBoundingClientRect();\r\n      setCenter({\r\n        x: rect.left + rect.width / 2,\r\n        y: rect.top + rect.height / 2,\r\n      });\r\n    };\r\n\r\n    updateCenter();\r\n    window.addEventListener(\"resize\", updateCenter);\r\n    return () => window.removeEventListener(\"resize\", updateCenter);\r\n  }, [selfRef]);\r\n\r\n  useEffect(() => {\r\n    updateCenter();\r\n\r\n    const isInside = (ref: React.RefObject<HTMLDivElement>) => {\r\n      const rect = ref.current?.getBoundingClientRect();\r\n      if (!rect) return false;\r\n      return (\r\n        mouseX >= rect.left &&\r\n        mouseX <= rect.right &&\r\n        mouseY >= rect.top &&\r\n        mouseY <= rect.bottom\r\n      );\r\n    };\r\n\r\n    if (isInside(selfRef) || isInside(otherRef)) return;\r\n\r\n    const dx = mouseX - center.x;\r\n    const dy = mouseY - center.y;\r\n    const angle = Math.atan2(dy, dx);\r\n\r\n    const maxMove = 20;\r\n    const pupilX = Math.cos(angle) * maxMove;\r\n    const pupilY = Math.sin(angle) * maxMove;\r\n\r\n    if (pupilRef.current) {\r\n      pupilRef.current.style.transform = `translate(${pupilX}px, ${pupilY}px)`;\r\n    }\r\n  }, [mouseX, mouseY, center.x, center.y, otherRef, selfRef, updateCenter]);\r\n\r\n  return (\r\n    <div\r\n      ref={selfRef}\r\n      className=\"relative bg-white border-4 border-black rounded-full h-24 w-24 flex items-center justify-center\"\r\n    >\r\n      <div\r\n        ref={pupilRef}\r\n        className=\"absolute bg-black rounded-full h-8 w-8 transition-all duration-[5ms]\"\r\n      >\r\n        <div className=\"w-3 h-3 bg-white rounded-full absolute bottom-1 right-1\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { FollowingEye };\r\n",
      "type": "registry:component"
    }
  ]
}