{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "research-hero",
  "type": "registry:component",
  "dependencies": [
    "class-variance-authority",
    "framer-motion",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-slot",
    "lucide-react"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/research-hero-demo.tsx",
      "content": "import ResearchHero from \"@/components/nurui/research-hero\";\nimport { SparklesCore } from \"@/components/nurui/sparkles\";\n\nexport default function ResearchHeroDemo() {\n  return (\n    <section className=\"min-h-screen w-full rounded-2xl bg-black/[0.96] antialiased bg-grid-white/[0.02] relative overflow-hidden\">\n      {/* Ambient background with moving particles */}\n      <div className=\"h-full w-full absolute inset-0 z-0\">\n        <SparklesCore\n          id=\"tsparticlesfullpage\"\n          background=\"transparent\"\n          minSize={0.6}\n          maxSize={1.4}\n          particleDensity={100}\n          className=\"w-full h-full\"\n          particleColor=\"#FFFFFF\"\n        />\n      </div>\n\n      <div className=\"relative z-10\">\n        <ResearchHero />\n      </div>\n    </section>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/research-hero.tsx",
      "content": "\"use client\";\nimport { Button } from \"@/components/ui/button\";\nimport { motion } from \"framer-motion\";\nimport { FileText, Sparkles } from \"lucide-react\";\nimport { FloatingPaper } from \"@/components/nurui/floating-paper\";\nimport { RoboAnimation } from \"@/components/nurui/robo-animation\";\n\nexport default function ResearchHero() {\n  return (\n    <div className=\"relative min-h-screen flex items-center\">\n      {/* Floating papers background */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <FloatingPaper count={6} />\n      </div>\n\n      <div className=\"container mx-auto px-6 relative z-10\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5 }}\n          >\n            <h1 className=\"text-4xl md:text-6xl lg:text-7xl font-bold text-white mb-6\">\n              Transform Your Research with\n              <span className=\"text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-600\">\n                {\" \"}\n                AI Power\n              </span>\n            </h1>\n          </motion.div>\n\n          <motion.p\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.2 }}\n            className=\"text-gray-400 text-xl mb-8 max-w-2xl mx-auto\"\n          >\n            Upload your research papers and let our AI transform them into\n            engaging presentations, podcasts, and visual content.\n          </motion.p>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.4 }}\n            className=\"flex flex-col sm:flex-row items-center justify-center gap-4\"\n          >\n            <Button\n              size=\"lg\"\n              className=\"bg-purple-600 hover:bg-purple-700 text-white px-8\"\n            >\n              <FileText className=\"mr-2 h-5 w-5\" />\n              Upload Paper\n            </Button>\n            <Button\n              size=\"lg\"\n              variant=\"outline\"\n              className=\"text-white border-purple-500 hover:bg-purple-500/20\"\n            >\n              <Sparkles className=\"mr-2 h-5 w-5\" />\n              See Examples\n            </Button>\n          </motion.div>\n        </div>\n      </div>\n\n      {/* Animated robot */}\n      <div className=\"absolute bottom-0 right-0 w-96 h-96\">\n        <RoboAnimation />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/sparkles.tsx",
      "content": "\"use client\"\n\nimport { useMousePosition } from \"@/utils/use-mouse-position\"\nimport { useEffect, useRef, useState } from \"react\"\n\ninterface SparklesProps {\n  id?: string\n  background?: string\n  minSize?: number\n  maxSize?: number\n  particleDensity?: number\n  className?: string\n  particleColor?: string\n}\n\nexport const SparklesCore = ({\n  id = \"tsparticles\",\n  background = \"transparent\",\n  minSize = 0.6,\n  maxSize = 1.4,\n  particleDensity = 100,\n  className = \"h-full w-full\",\n  particleColor = \"#FFFFFF\",\n}: SparklesProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const mousePosition = useMousePosition()\n  const [dimensions, setDimensions] = useState({ width: 1200, height: 800 })\n\n  useEffect(() => {\n    if (typeof window === \"undefined\") return\n\n    setDimensions({\n      width: window.innerWidth,\n      height: window.innerHeight,\n    })\n\n    const canvas = canvasRef.current\n    if (!canvas) return\n\n    const ctx = canvas.getContext(\"2d\")\n    if (!ctx) return\n\n    let particles: Particle[] = []\n    let animationFrameId: number\n\n    canvas.width = window.innerWidth\n    canvas.height = window.innerHeight\n\n    class Particle {\n      x: number\n      y: number\n      size: number\n      speedX: number\n      speedY: number\n\n      constructor() {\n        this.x = Math.random() * canvas!.width\n        this.y = Math.random() * canvas!.height\n        this.size = Math.random() * (maxSize - minSize) + minSize\n        this.speedX = Math.random() * 0.5 - 0.25\n        this.speedY = Math.random() * 0.5 - 0.25\n      }\n\n      update() {\n        this.x += this.speedX\n        this.y += this.speedY\n\n        if (canvas) {\n          if (this.x > canvas.width) this.x = 0\n          if (this.x < 0) this.x = canvas.width\n          if (this.y > canvas.height) this.y = 0\n          if (this.y < 0) this.y = canvas.height\n        }\n\n        // Mouse interaction\n        const dx = mousePosition.x - this.x\n        const dy = mousePosition.y - this.y\n        const distance = Math.sqrt(dx * dx + dy * dy)\n        if (distance < 100) {\n          const angle = Math.atan2(dy, dx)\n          this.x -= Math.cos(angle) * 1\n          this.y -= Math.sin(angle) * 1\n        }\n      }\n\n      draw() {\n        if (!ctx) return\n        ctx.fillStyle = particleColor\n        ctx.beginPath()\n        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2)\n        ctx.fill()\n      }\n    }\n\n    const init = () => {\n      particles = []\n      for (let i = 0; i < particleDensity; i++) {\n        particles.push(new Particle())\n      }\n    }\n\n    const animate = () => {\n      if (!ctx) return\n      ctx.clearRect(0, 0, canvas.width, canvas.height)\n\n      particles.forEach((particle) => {\n        particle.update()\n        particle.draw()\n      })\n\n      animationFrameId = requestAnimationFrame(animate)\n    }\n\n    init()\n    animate()\n\n    const handleResize = () => {\n      if (typeof window === \"undefined\") return\n\n      canvas.width = window.innerWidth\n      canvas.height = window.innerHeight\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      })\n      init()\n    }\n\n    window.addEventListener(\"resize\", handleResize)\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize)\n      cancelAnimationFrame(animationFrameId)\n    }\n  }, [maxSize, minSize, particleColor, particleDensity, mousePosition.x, mousePosition.y])\n\n  return (\n    <canvas\n      ref={canvasRef}\n      id={id}\n      className={className}\n      style={{\n        background,\n        width: dimensions.width,\n        height: dimensions.height,\n      }}\n    />\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/floating-paper.tsx",
      "content": "\"use client\"\n\nimport { useEffect, useState } from \"react\"\nimport { motion } from \"framer-motion\"\nimport { FileText } from \"lucide-react\"\n\nexport function FloatingPaper({ count = 5 }) {\n  const [dimensions, setDimensions] = useState({ width: 1200, height: 800 })\n\n  useEffect(() => {\n    // Update dimensions only on client side\n    setDimensions({\n      width: window.innerWidth,\n      height: window.innerHeight,\n    })\n\n    const handleResize = () => {\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      })\n    }\n\n    window.addEventListener(\"resize\", handleResize)\n    return () => window.removeEventListener(\"resize\", handleResize)\n  }, [])\n\n  return (\n    <div className=\"relative w-full h-full\">\n      {Array.from({ length: count }).map((_, i) => (\n        <motion.div\n          key={i}\n          className=\"absolute\"\n          initial={{\n            x: Math.random() * dimensions.width,\n            y: Math.random() * dimensions.height,\n          }}\n          animate={{\n            x: [Math.random() * dimensions.width, Math.random() * dimensions.width, Math.random() * dimensions.width],\n            y: [\n              Math.random() * dimensions.height,\n              Math.random() * dimensions.height,\n              Math.random() * dimensions.height,\n            ],\n            rotate: [0, 180, 360],\n          }}\n          transition={{\n            duration: 20 + Math.random() * 10,\n            repeat: Number.POSITIVE_INFINITY,\n            ease: \"linear\",\n          }}\n        >\n          <div className=\"relative w-16 h-20 bg-white/5 backdrop-blur-sm rounded-lg border border-white/10 flex items-center justify-center transform hover:scale-110 transition-transform\">\n            <FileText className=\"w-8 h-8 text-purple-400/50\" />\n          </div>\n        </motion.div>\n      ))}\n    </div>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/robo-animation.tsx",
      "content": "\"use client\"\n\nimport { motion } from \"framer-motion\"\nimport { Bot } from \"lucide-react\"\n\nexport function RoboAnimation() {\n  return (\n    <div className=\"relative w-full h-full\">\n      <motion.div\n        className=\"absolute inset-0 flex items-center justify-center\"\n        animate={{\n          y: [0, -20, 0],\n        }}\n        transition={{\n          duration: 4,\n          repeat: Number.POSITIVE_INFINITY,\n          ease: \"easeInOut\",\n        }}\n      >\n        <div className=\"relative\">\n          <motion.div\n            className=\"absolute -inset-4 bg-purple-500/20 rounded-full blur-xl\"\n            animate={{\n              scale: [1, 1.2, 1],\n              opacity: [0.5, 0.8, 0.5],\n            }}\n            transition={{\n              duration: 4,\n              repeat: Number.POSITIVE_INFINITY,\n              ease: \"easeInOut\",\n            }}\n          />\n          <Bot className=\"w-32 h-32 text-purple-500\" />\n        </div>\n      </motion.div>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n",
      "type": "registry:component"
    }
  ]
}