{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "research-hero",
  "type": "registry:component",
  "dependencies": [
    "class-variance-authority",
    "framer-motion",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-slot",
    "lucide-react"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/research-hero-demo.tsx",
      "content": "import ResearchHero from \"@/components/nurui/research-hero\";\r\nimport { SparklesCore } from \"@/components/nurui/sparkles\";\r\n\r\nexport default function ResearchHeroDemo() {\r\n  return (\r\n    <section className=\"min-h-screen w-full rounded-2xl bg-black/[0.96] antialiased bg-grid-white/[0.02] relative overflow-hidden\">\r\n      {/* Ambient background with moving particles */}\r\n      <div className=\"h-full w-full absolute inset-0 z-0\">\r\n        <SparklesCore\r\n          id=\"tsparticlesfullpage\"\r\n          background=\"transparent\"\r\n          minSize={0.6}\r\n          maxSize={1.4}\r\n          particleDensity={100}\r\n          className=\"w-full h-full\"\r\n          particleColor=\"#FFFFFF\"\r\n        />\r\n      </div>\r\n\r\n      <div className=\"relative z-10\">\r\n        <ResearchHero />\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/research-hero.tsx",
      "content": "\"use client\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { motion } from \"framer-motion\";\r\nimport { FileText, Sparkles } from \"lucide-react\";\r\nimport { FloatingPaper } from \"@/components/nurui/floating-paper\";\r\nimport { RoboAnimation } from \"@/components/nurui/robo-animation\";\r\n\r\nexport default function ResearchHero() {\r\n  return (\r\n    <div className=\"relative min-h-screen flex items-center\">\r\n      {/* Floating papers background */}\r\n      <div className=\"absolute inset-0 overflow-hidden\">\r\n        <FloatingPaper count={6} />\r\n      </div>\r\n\r\n      <div className=\"container mx-auto px-6 relative z-10\">\r\n        <div className=\"max-w-4xl mx-auto text-center\">\r\n          <motion.div\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            transition={{ duration: 0.5 }}\r\n          >\r\n            <h1 className=\"text-4xl md:text-6xl lg:text-7xl font-bold text-white mb-6\">\r\n              Transform Your Research with\r\n              <span className=\"text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-600\">\r\n                {\" \"}\r\n                AI Power\r\n              </span>\r\n            </h1>\r\n          </motion.div>\r\n\r\n          <motion.p\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            transition={{ duration: 0.5, delay: 0.2 }}\r\n            className=\"text-gray-400 text-xl mb-8 max-w-2xl mx-auto\"\r\n          >\r\n            Upload your research papers and let our AI transform them into\r\n            engaging presentations, podcasts, and visual content.\r\n          </motion.p>\r\n\r\n          <motion.div\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            transition={{ duration: 0.5, delay: 0.4 }}\r\n            className=\"flex flex-col sm:flex-row items-center justify-center gap-4\"\r\n          >\r\n            <Button\r\n              size=\"lg\"\r\n              className=\"bg-purple-600 hover:bg-purple-700 text-white px-8\"\r\n            >\r\n              <FileText className=\"mr-2 h-5 w-5\" />\r\n              Upload Paper\r\n            </Button>\r\n            <Button\r\n              size=\"lg\"\r\n              variant=\"outline\"\r\n              className=\"text-white border-purple-500 hover:bg-purple-500/20\"\r\n            >\r\n              <Sparkles className=\"mr-2 h-5 w-5\" />\r\n              See Examples\r\n            </Button>\r\n          </motion.div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Animated robot */}\r\n      <div className=\"absolute bottom-0 right-0 w-96 h-96\">\r\n        <RoboAnimation />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/sparkles.tsx",
      "content": "\"use client\"\r\n\r\nimport { useMousePosition } from \"@/utils/use-mouse-position\"\r\nimport { useEffect, useRef, useState } from \"react\"\r\n\r\ninterface SparklesProps {\r\n  id?: string\r\n  background?: string\r\n  minSize?: number\r\n  maxSize?: number\r\n  particleDensity?: number\r\n  className?: string\r\n  particleColor?: string\r\n}\r\n\r\nexport const SparklesCore = ({\r\n  id = \"tsparticles\",\r\n  background = \"transparent\",\r\n  minSize = 0.6,\r\n  maxSize = 1.4,\r\n  particleDensity = 100,\r\n  className = \"h-full w-full\",\r\n  particleColor = \"#FFFFFF\",\r\n}: SparklesProps) => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null)\r\n  const mousePosition = useMousePosition()\r\n  const [dimensions, setDimensions] = useState({ width: 1200, height: 800 })\r\n\r\n  useEffect(() => {\r\n    if (typeof window === \"undefined\") return\r\n\r\n    setDimensions({\r\n      width: window.innerWidth,\r\n      height: window.innerHeight,\r\n    })\r\n\r\n    const canvas = canvasRef.current\r\n    if (!canvas) return\r\n\r\n    const ctx = canvas.getContext(\"2d\")\r\n    if (!ctx) return\r\n\r\n    let particles: Particle[] = []\r\n    let animationFrameId: number\r\n\r\n    canvas.width = window.innerWidth\r\n    canvas.height = window.innerHeight\r\n\r\n    class Particle {\r\n      x: number\r\n      y: number\r\n      size: number\r\n      speedX: number\r\n      speedY: number\r\n\r\n      constructor() {\r\n        this.x = Math.random() * canvas!.width\r\n        this.y = Math.random() * canvas!.height\r\n        this.size = Math.random() * (maxSize - minSize) + minSize\r\n        this.speedX = Math.random() * 0.5 - 0.25\r\n        this.speedY = Math.random() * 0.5 - 0.25\r\n      }\r\n\r\n      update() {\r\n        this.x += this.speedX\r\n        this.y += this.speedY\r\n\r\n        if (canvas) {\r\n          if (this.x > canvas.width) this.x = 0\r\n          if (this.x < 0) this.x = canvas.width\r\n          if (this.y > canvas.height) this.y = 0\r\n          if (this.y < 0) this.y = canvas.height\r\n        }\r\n\r\n        // Mouse interaction\r\n        const dx = mousePosition.x - this.x\r\n        const dy = mousePosition.y - this.y\r\n        const distance = Math.sqrt(dx * dx + dy * dy)\r\n        if (distance < 100) {\r\n          const angle = Math.atan2(dy, dx)\r\n          this.x -= Math.cos(angle) * 1\r\n          this.y -= Math.sin(angle) * 1\r\n        }\r\n      }\r\n\r\n      draw() {\r\n        if (!ctx) return\r\n        ctx.fillStyle = particleColor\r\n        ctx.beginPath()\r\n        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2)\r\n        ctx.fill()\r\n      }\r\n    }\r\n\r\n    const init = () => {\r\n      particles = []\r\n      for (let i = 0; i < particleDensity; i++) {\r\n        particles.push(new Particle())\r\n      }\r\n    }\r\n\r\n    const animate = () => {\r\n      if (!ctx) return\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height)\r\n\r\n      particles.forEach((particle) => {\r\n        particle.update()\r\n        particle.draw()\r\n      })\r\n\r\n      animationFrameId = requestAnimationFrame(animate)\r\n    }\r\n\r\n    init()\r\n    animate()\r\n\r\n    const handleResize = () => {\r\n      if (typeof window === \"undefined\") return\r\n\r\n      canvas.width = window.innerWidth\r\n      canvas.height = window.innerHeight\r\n      setDimensions({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n      })\r\n      init()\r\n    }\r\n\r\n    window.addEventListener(\"resize\", handleResize)\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize)\r\n      cancelAnimationFrame(animationFrameId)\r\n    }\r\n  }, [maxSize, minSize, particleColor, particleDensity, mousePosition.x, mousePosition.y])\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      id={id}\r\n      className={className}\r\n      style={{\r\n        background,\r\n        width: dimensions.width,\r\n        height: dimensions.height,\r\n      }}\r\n    />\r\n  )\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/floating-paper.tsx",
      "content": "\"use client\"\r\n\r\nimport { useEffect, useState } from \"react\"\r\nimport { motion } from \"framer-motion\"\r\nimport { FileText } from \"lucide-react\"\r\n\r\nexport function FloatingPaper({ count = 5 }) {\r\n  const [dimensions, setDimensions] = useState({ width: 1200, height: 800 })\r\n\r\n  useEffect(() => {\r\n    // Update dimensions only on client side\r\n    setDimensions({\r\n      width: window.innerWidth,\r\n      height: window.innerHeight,\r\n    })\r\n\r\n    const handleResize = () => {\r\n      setDimensions({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n      })\r\n    }\r\n\r\n    window.addEventListener(\"resize\", handleResize)\r\n    return () => window.removeEventListener(\"resize\", handleResize)\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"relative w-full h-full\">\r\n      {Array.from({ length: count }).map((_, i) => (\r\n        <motion.div\r\n          key={i}\r\n          className=\"absolute\"\r\n          initial={{\r\n            x: Math.random() * dimensions.width,\r\n            y: Math.random() * dimensions.height,\r\n          }}\r\n          animate={{\r\n            x: [Math.random() * dimensions.width, Math.random() * dimensions.width, Math.random() * dimensions.width],\r\n            y: [\r\n              Math.random() * dimensions.height,\r\n              Math.random() * dimensions.height,\r\n              Math.random() * dimensions.height,\r\n            ],\r\n            rotate: [0, 180, 360],\r\n          }}\r\n          transition={{\r\n            duration: 20 + Math.random() * 10,\r\n            repeat: Number.POSITIVE_INFINITY,\r\n            ease: \"linear\",\r\n          }}\r\n        >\r\n          <div className=\"relative w-16 h-20 bg-white/5 backdrop-blur-sm rounded-lg border border-white/10 flex items-center justify-center transform hover:scale-110 transition-transform\">\r\n            <FileText className=\"w-8 h-8 text-purple-400/50\" />\r\n          </div>\r\n        </motion.div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/robo-animation.tsx",
      "content": "\"use client\"\r\n\r\nimport { motion } from \"framer-motion\"\r\nimport { Bot } from \"lucide-react\"\r\n\r\nexport function RoboAnimation() {\r\n  return (\r\n    <div className=\"relative w-full h-full\">\r\n      <motion.div\r\n        className=\"absolute inset-0 flex items-center justify-center\"\r\n        animate={{\r\n          y: [0, -20, 0],\r\n        }}\r\n        transition={{\r\n          duration: 4,\r\n          repeat: Number.POSITIVE_INFINITY,\r\n          ease: \"easeInOut\",\r\n        }}\r\n      >\r\n        <div className=\"relative\">\r\n          <motion.div\r\n            className=\"absolute -inset-4 bg-purple-500/20 rounded-full blur-xl\"\r\n            animate={{\r\n              scale: [1, 1.2, 1],\r\n              opacity: [0.5, 0.8, 0.5],\r\n            }}\r\n            transition={{\r\n              duration: 4,\r\n              repeat: Number.POSITIVE_INFINITY,\r\n              ease: \"easeInOut\",\r\n            }}\r\n          />\r\n          <Bot className=\"w-32 h-32 text-purple-500\" />\r\n        </div>\r\n      </motion.div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/button.tsx",
      "content": "import * as React from \"react\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst buttonVariants = cva(\r\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\r\n        destructive:\r\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\r\n        outline:\r\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\r\n        secondary:\r\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\r\n        link: \"text-primary underline-offset-4 hover:underline\",\r\n      },\r\n      size: {\r\n        default: \"h-10 px-4 py-2\",\r\n        sm: \"h-9 rounded-md px-3\",\r\n        lg: \"h-11 rounded-md px-8\",\r\n        icon: \"h-10 w-10\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  },\r\n)\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof buttonVariants> {\r\n  asChild?: boolean\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\r\n    const Comp = asChild ? Slot : \"button\"\r\n    return (\r\n      <Comp\r\n        className={cn(buttonVariants({ variant, size, className }))}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    )\r\n  },\r\n)\r\nButton.displayName = \"Button\"\r\n\r\nexport { Button, buttonVariants }\r\n",
      "type": "registry:component"
    }
  ]
}