{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "banner-close",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "tailwind-merge",
    "class-variance-authority",
    "@radix-ui/react-slot",
    "lucide-react"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./src/components/nurui/banner-close-demo.tsx",
      "content": "import React from \"react\";\nimport { Banner } from \"@/components/nurui/banner\";\n\nconst BannerCloseDemo = () => {\n  return (\n    <div className=\"p-10 w-full\">\n      <Banner\n        id=\"banner-id\"\n        className=\"shadow-lg bg-white dark:bg-transparent\"\n        variant=\"rainbow\"\n      >\n        ðŸš€ Added 20+ modern animated UI components to enhance your projects.\n      </Banner>\n    </div>\n  );\n};\n\nexport default BannerCloseDemo;\n",
      "type": "registry:component"
    },
    {
      "path": "./src/components/nurui/banner.tsx",
      "content": "\"use client\";\nimport { type HTMLAttributes, useEffect, useState } from \"react\";\nimport { X } from \"lucide-react\";\nimport { buttonVariants } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\ntype BannerVariant = \"rainbow\" | \"normal\";\n\nexport function Banner({\n  id,\n  xColor,\n  variant = \"normal\",\n  changeLayout = true,\n  height = \"3rem\",\n  rainbowColors = [\n    \"rgba(0,149,255,0.56)\",\n    \"rgba(231,77,255,0.77)\",\n    \"rgba(255,0,0,0.73)\",\n    \"rgba(131,255,166,0.66)\",\n  ],\n  ...props\n}: HTMLAttributes<HTMLDivElement> & {\n  /**\n   * @defaultValue 3rem\n   */\n  height?: string;\n\n  xColor?: string;\n\n  /**\n   * @defaultValue 'normal'\n   */\n  variant?: BannerVariant;\n\n  /**\n   * For rainbow variant only, customise the colors\n   */\n  rainbowColors?: string[];\n\n  /**\n   * Change Fumadocs layout styles\n   *\n   * @defaultValue true\n   */\n  changeLayout?: boolean;\n}) {\n  const [open, setOpen] = useState(true);\n  const globalKey = id ? `nd-banner-${id}` : null;\n\n  useEffect(() => {\n    if (globalKey) setOpen(localStorage.getItem(globalKey) !== \"true\");\n  }, [globalKey]);\n\n  if (!open) return null;\n\n  return (\n    <div\n      id={id}\n      {...props}\n      className={cn(\n        \"sticky top-0 z-40 flex flex-row items-center justify-center px-4 text-center text-sm font-medium\",\n        variant === \"normal\" && \"bg-fd-secondary\",\n        variant === \"rainbow\" && \"bg-fd-background\",\n        !open && \"hidden\",\n        props.className,\n      )}\n      style={{\n        height,\n      }}\n    >\n      {changeLayout && open ? (\n        <style>\n          {globalKey\n            ? `:root:not(.${globalKey}) { --fd-banner-height: ${height}; }`\n            : `:root { --fd-banner-height: ${height}; }`}\n        </style>\n      ) : null}\n      {globalKey ? (\n        <style>{`.${globalKey} #${id} { display: none; }`}</style>\n      ) : null}\n      {globalKey ? (\n        <script\n          dangerouslySetInnerHTML={{\n            __html: `if (localStorage.getItem('${globalKey}') === 'true') document.documentElement.classList.add('${globalKey}');`,\n          }}\n        />\n      ) : null}\n\n      {variant === \"rainbow\"\n        ? flow({\n            colors: rainbowColors,\n          })\n        : null}\n      {props.children}\n      {id ? (\n        <button\n          type=\"button\"\n          aria-label=\"Close Banner\"\n          onClick={() => {\n            setOpen(false);\n            if (globalKey) {\n              localStorage.setItem(globalKey, \"true\");\n              window.dispatchEvent(new Event(\"banner-status-changed\"));\n            }\n          }}\n          className={cn(\n            buttonVariants({\n              variant: \"ghost\",\n              className:\n                \"absolute end-2 md:end-20 top-1/2 -translate-y-1/2 text-fd-muted-foreground/50\",\n              size: \"icon\",\n            }),\n          )}\n        >\n          <X color={xColor} />\n        </button>\n      ) : null}\n    </div>\n  );\n}\n\nconst maskImage =\n  \"linear-gradient(to bottom,white,transparent), radial-gradient(circle at top center, white, transparent)\";\n\nfunction flow({ colors }: { colors: string[] }) {\n  return (\n    <>\n      <div\n        className=\"absolute inset-0 z-[-1]\"\n        style={\n          {\n            maskImage,\n            maskComposite: \"intersect\",\n            animation: \"fd-moving-banner 20s linear infinite\",\n            backgroundImage: `repeating-linear-gradient(70deg, ${[...colors, colors[0]].map((color, i) => `${color} ${(i * 50) / colors.length}%`).join(\", \")})`,\n            backgroundSize: \"200% 100%\",\n            filter: \"saturate(2)\",\n          } as object\n        }\n      />\n      <style>\n        {`@keyframes fd-moving-banner {\n            from { background-position: 0% 0;  }\n            to { background-position: 100% 0;  }\n         }`}\n      </style>\n    </>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}